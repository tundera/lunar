// @ts-nocheck
import * as extensions from '../extensions';
import { lazyGetters } from '@gqless/utils';
import {
  ScalarNode,
  InputNode,
  InputNodeField,
  ArrayNode,
  ObjectNode,
  FieldNode,
  Arguments,
  ArgumentsField,
  EnumNode,
} from 'gqless';

export const schema = {
  get Boolean() {
    return new ScalarNode({
      name: 'Boolean',
      extension: ((extensions as any) || {}).Boolean,
    });
  },
  get Boolean_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _gt() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _gte() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.Boolean, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lte() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _neq() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.Boolean, true), true);
        },
      },
      { name: 'Boolean_comparison_exp' }
    );
  },
  get Float() {
    return new ScalarNode({
      name: 'Float',
      extension: ((extensions as any) || {}).Float,
    });
  },
  get ID() {
    return new ScalarNode({
      name: 'ID',
      extension: ((extensions as any) || {}).ID,
    });
  },
  get Int() {
    return new ScalarNode({
      name: 'Int',
      extension: ((extensions as any) || {}).Int,
    });
  },
  get Int_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.Int, true);
        },
        get _gt() {
          return new InputNodeField(schema.Int, true);
        },
        get _gte() {
          return new InputNodeField(schema.Int, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.Int, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.Int, true);
        },
        get _lte() {
          return new InputNodeField(schema.Int, true);
        },
        get _neq() {
          return new InputNodeField(schema.Int, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.Int, true), true);
        },
      },
      { name: 'Int_comparison_exp' }
    );
  },
  get String() {
    return new ScalarNode({
      name: 'String',
      extension: ((extensions as any) || {}).String,
    });
  },
  get String_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.String, true);
        },
        get _gt() {
          return new InputNodeField(schema.String, true);
        },
        get _gte() {
          return new InputNodeField(schema.String, true);
        },
        get _ilike() {
          return new InputNodeField(schema.String, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _like() {
          return new InputNodeField(schema.String, true);
        },
        get _lt() {
          return new InputNodeField(schema.String, true);
        },
        get _lte() {
          return new InputNodeField(schema.String, true);
        },
        get _neq() {
          return new InputNodeField(schema.String, true);
        },
        get _nilike() {
          return new InputNodeField(schema.String, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _nlike() {
          return new InputNodeField(schema.String, true);
        },
        get _nsimilar() {
          return new InputNodeField(schema.String, true);
        },
        get _similar() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'String_comparison_exp' }
    );
  },
  get World() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get population() {
          return new FieldNode(schema.numeric, undefined, false);
        },
      },
      { name: 'World', extension: ((extensions as any) || {}).World }
    );
  },
  get World_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.World_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.World, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'World_aggregate',
        extension: ((extensions as any) || {}).World_aggregate,
      }
    );
  },
  get World_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.World_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.World_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.World_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.World_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.World_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(
            schema.World_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.World_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.World_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.World_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.World_variance_fields, undefined, true);
        },
      },
      {
        name: 'World_aggregate_fields',
        extension: ((extensions as any) || {}).World_aggregate_fields,
      }
    );
  },
  get World_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.World_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.World_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.World_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.World_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.World_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.World_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.World_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.World_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.World_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.World_variance_order_by, true);
        },
      },
      { name: 'World_aggregate_order_by' }
    );
  },
  get World_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.World_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.World_on_conflict, true);
        },
      },
      { name: 'World_arr_rel_insert_input' }
    );
  },
  get World_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_avg_fields',
        extension: ((extensions as any) || {}).World_avg_fields,
      }
    );
  },
  get World_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_avg_order_by' }
    );
  },
  get World_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.World_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.World_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.World_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get population() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
      },
      { name: 'World_bool_exp' }
    );
  },
  get World_constraint() {
    return new EnumNode({ name: 'World_constraint' });
  },
  get World_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get population() {
          return new InputNodeField(schema.numeric, true);
        },
      },
      { name: 'World_inc_input' }
    );
  },
  get World_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get population() {
          return new InputNodeField(schema.numeric, true);
        },
      },
      { name: 'World_insert_input' }
    );
  },
  get World_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get population() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'World_max_fields',
        extension: ((extensions as any) || {}).World_max_fields,
      }
    );
  },
  get World_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_max_order_by' }
    );
  },
  get World_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get population() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'World_min_fields',
        extension: ((extensions as any) || {}).World_min_fields,
      }
    );
  },
  get World_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_min_order_by' }
    );
  },
  get World_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.World, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'World_mutation_response',
        extension: ((extensions as any) || {}).World_mutation_response,
      }
    );
  },
  get World_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.World_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.World_on_conflict, true);
        },
      },
      { name: 'World_obj_rel_insert_input' }
    );
  },
  get World_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.World_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.World_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.World_bool_exp, true);
        },
      },
      { name: 'World_on_conflict' }
    );
  },
  get World_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_order_by' }
    );
  },
  get World_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'World_pk_columns_input' }
    );
  },
  get World_select_column() {
    return new EnumNode({ name: 'World_select_column' });
  },
  get World_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get population() {
          return new InputNodeField(schema.numeric, true);
        },
      },
      { name: 'World_set_input' }
    );
  },
  get World_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_stddev_fields',
        extension: ((extensions as any) || {}).World_stddev_fields,
      }
    );
  },
  get World_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_stddev_order_by' }
    );
  },
  get World_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_stddev_pop_fields',
        extension: ((extensions as any) || {}).World_stddev_pop_fields,
      }
    );
  },
  get World_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_stddev_pop_order_by' }
    );
  },
  get World_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_stddev_samp_fields',
        extension: ((extensions as any) || {}).World_stddev_samp_fields,
      }
    );
  },
  get World_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_stddev_samp_order_by' }
    );
  },
  get World_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get population() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'World_sum_fields',
        extension: ((extensions as any) || {}).World_sum_fields,
      }
    );
  },
  get World_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_sum_order_by' }
    );
  },
  get World_update_column() {
    return new EnumNode({ name: 'World_update_column' });
  },
  get World_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_var_pop_fields',
        extension: ((extensions as any) || {}).World_var_pop_fields,
      }
    );
  },
  get World_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_var_pop_order_by' }
    );
  },
  get World_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_var_samp_fields',
        extension: ((extensions as any) || {}).World_var_samp_fields,
      }
    );
  },
  get World_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_var_samp_order_by' }
    );
  },
  get World_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get population() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'World_variance_fields',
        extension: ((extensions as any) || {}).World_variance_fields,
      }
    );
  },
  get World_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get population() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'World_variance_order_by' }
    );
  },
  get _Migration() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get database_migration() {
          return new FieldNode(schema.String, undefined, false);
        },
        get datamodel() {
          return new FieldNode(schema.String, undefined, false);
        },
        get datamodel_steps() {
          return new FieldNode(schema.String, undefined, false);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, false);
        },
        get finished_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get revision() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get rolled_back() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get status() {
          return new FieldNode(schema.String, undefined, false);
        },
      },
      { name: '_Migration', extension: ((extensions as any) || {})._Migration }
    );
  },
  get _Migration_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema._Migration_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema._Migration, false),
            undefined,
            false
          );
        },
      },
      {
        name: '_Migration_aggregate',
        extension: ((extensions as any) || {})._Migration_aggregate,
      }
    );
  },
  get _Migration_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema._Migration_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema._Migration_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema._Migration_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema._Migration_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema._Migration_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema._Migration_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema._Migration_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema._Migration_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema._Migration_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema._Migration_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: '_Migration_aggregate_fields',
        extension: ((extensions as any) || {})._Migration_aggregate_fields,
      }
    );
  },
  get _Migration_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema._Migration_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema._Migration_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema._Migration_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema._Migration_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema._Migration_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema._Migration_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema._Migration_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema._Migration_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema._Migration_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema._Migration_variance_order_by, true);
        },
      },
      { name: '_Migration_aggregate_order_by' }
    );
  },
  get _Migration_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema._Migration_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema._Migration_on_conflict, true);
        },
      },
      { name: '_Migration_arr_rel_insert_input' }
    );
  },
  get _Migration_avg_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_avg_fields',
        extension: ((extensions as any) || {})._Migration_avg_fields,
      }
    );
  },
  get _Migration_avg_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_avg_order_by' }
    );
  },
  get _Migration_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema._Migration_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema._Migration_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema._Migration_bool_exp, true),
            true
          );
        },
        get applied() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get database_migration() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get datamodel() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get datamodel_steps() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get finished_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get revision() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: '_Migration_bool_exp' }
    );
  },
  get _Migration_constraint() {
    return new EnumNode({ name: '_Migration_constraint' });
  },
  get _Migration_inc_input() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.Int, true);
        },
        get revision() {
          return new InputNodeField(schema.Int, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: '_Migration_inc_input' }
    );
  },
  get _Migration_insert_input() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.Int, true);
        },
        get database_migration() {
          return new InputNodeField(schema.String, true);
        },
        get datamodel() {
          return new InputNodeField(schema.String, true);
        },
        get datamodel_steps() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get finished_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get revision() {
          return new InputNodeField(schema.Int, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.Int, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: '_Migration_insert_input' }
    );
  },
  get _Migration_max_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get database_migration() {
          return new FieldNode(schema.String, undefined, true);
        },
        get datamodel() {
          return new FieldNode(schema.String, undefined, true);
        },
        get datamodel_steps() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get finished_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: '_Migration_max_fields',
        extension: ((extensions as any) || {})._Migration_max_fields,
      }
    );
  },
  get _Migration_max_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get database_migration() {
          return new InputNodeField(schema.order_by, true);
        },
        get datamodel() {
          return new InputNodeField(schema.order_by, true);
        },
        get datamodel_steps() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get finished_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_max_order_by' }
    );
  },
  get _Migration_min_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get database_migration() {
          return new FieldNode(schema.String, undefined, true);
        },
        get datamodel() {
          return new FieldNode(schema.String, undefined, true);
        },
        get datamodel_steps() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get finished_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: '_Migration_min_fields',
        extension: ((extensions as any) || {})._Migration_min_fields,
      }
    );
  },
  get _Migration_min_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get database_migration() {
          return new InputNodeField(schema.order_by, true);
        },
        get datamodel() {
          return new InputNodeField(schema.order_by, true);
        },
        get datamodel_steps() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get finished_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_min_order_by' }
    );
  },
  get _Migration_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema._Migration, false),
            undefined,
            false
          );
        },
      },
      {
        name: '_Migration_mutation_response',
        extension: ((extensions as any) || {})._Migration_mutation_response,
      }
    );
  },
  get _Migration_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema._Migration_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema._Migration_on_conflict, true);
        },
      },
      { name: '_Migration_obj_rel_insert_input' }
    );
  },
  get _Migration_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema._Migration_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema._Migration_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema._Migration_bool_exp, true);
        },
      },
      { name: '_Migration_on_conflict' }
    );
  },
  get _Migration_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get database_migration() {
          return new InputNodeField(schema.order_by, true);
        },
        get datamodel() {
          return new InputNodeField(schema.order_by, true);
        },
        get datamodel_steps() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get finished_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_order_by' }
    );
  },
  get _Migration_pk_columns_input() {
    return new InputNode(
      {
        get revision() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: '_Migration_pk_columns_input' }
    );
  },
  get _Migration_select_column() {
    return new EnumNode({ name: '_Migration_select_column' });
  },
  get _Migration_set_input() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.Int, true);
        },
        get database_migration() {
          return new InputNodeField(schema.String, true);
        },
        get datamodel() {
          return new InputNodeField(schema.String, true);
        },
        get datamodel_steps() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get finished_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get revision() {
          return new InputNodeField(schema.Int, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.Int, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: '_Migration_set_input' }
    );
  },
  get _Migration_stddev_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_stddev_fields',
        extension: ((extensions as any) || {})._Migration_stddev_fields,
      }
    );
  },
  get _Migration_stddev_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_stddev_order_by' }
    );
  },
  get _Migration_stddev_pop_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_stddev_pop_fields',
        extension: ((extensions as any) || {})._Migration_stddev_pop_fields,
      }
    );
  },
  get _Migration_stddev_pop_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_stddev_pop_order_by' }
    );
  },
  get _Migration_stddev_samp_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_stddev_samp_fields',
        extension: ((extensions as any) || {})._Migration_stddev_samp_fields,
      }
    );
  },
  get _Migration_stddev_samp_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_stddev_samp_order_by' }
    );
  },
  get _Migration_sum_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: '_Migration_sum_fields',
        extension: ((extensions as any) || {})._Migration_sum_fields,
      }
    );
  },
  get _Migration_sum_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_sum_order_by' }
    );
  },
  get _Migration_update_column() {
    return new EnumNode({ name: '_Migration_update_column' });
  },
  get _Migration_var_pop_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_var_pop_fields',
        extension: ((extensions as any) || {})._Migration_var_pop_fields,
      }
    );
  },
  get _Migration_var_pop_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_var_pop_order_by' }
    );
  },
  get _Migration_var_samp_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_var_samp_fields',
        extension: ((extensions as any) || {})._Migration_var_samp_fields,
      }
    );
  },
  get _Migration_var_samp_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_var_samp_order_by' }
    );
  },
  get _Migration_variance_fields() {
    return new ObjectNode(
      {
        get applied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get revision() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rolled_back() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: '_Migration_variance_fields',
        extension: ((extensions as any) || {})._Migration_variance_fields,
      }
    );
  },
  get _Migration_variance_order_by() {
    return new InputNode(
      {
        get applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get revision() {
          return new InputNodeField(schema.order_by, true);
        },
        get rolled_back() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: '_Migration_variance_order_by' }
    );
  },
  get __Directive() {
    return new ObjectNode(
      {
        get args() {
          return new FieldNode(
            new ArrayNode(schema.__InputValue, false),
            undefined,
            false
          );
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get locations() {
          return new FieldNode(
            new ArrayNode(schema.__DirectiveLocation, false),
            undefined,
            false
          );
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
      },
      {
        name: '__Directive',
        extension: ((extensions as any) || {}).__Directive,
      }
    );
  },
  get __DirectiveLocation() {
    return new EnumNode({ name: '__DirectiveLocation' });
  },
  get __EnumValue() {
    return new ObjectNode(
      {
        get deprecationReason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get isDeprecated() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
      },
      {
        name: '__EnumValue',
        extension: ((extensions as any) || {}).__EnumValue,
      }
    );
  },
  get __Field() {
    return new ObjectNode(
      {
        get args() {
          return new FieldNode(
            new ArrayNode(schema.__InputValue, false),
            undefined,
            false
          );
        },
        get deprecationReason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get isDeprecated() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get type() {
          return new FieldNode(schema.__Type, undefined, false);
        },
      },
      { name: '__Field', extension: ((extensions as any) || {}).__Field }
    );
  },
  get __InputValue() {
    return new ObjectNode(
      {
        get defaultValue() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get type() {
          return new FieldNode(schema.__Type, undefined, false);
        },
      },
      {
        name: '__InputValue',
        extension: ((extensions as any) || {}).__InputValue,
      }
    );
  },
  get __Schema() {
    return new ObjectNode(
      {
        get directives() {
          return new FieldNode(
            new ArrayNode(schema.__Directive, false),
            undefined,
            false
          );
        },
        get mutationType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get queryType() {
          return new FieldNode(schema.__Type, undefined, false);
        },
        get subscriptionType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get types() {
          return new FieldNode(
            new ArrayNode(schema.__Type, false),
            undefined,
            false
          );
        },
      },
      { name: '__Schema', extension: ((extensions as any) || {}).__Schema }
    );
  },
  get __Type() {
    return new ObjectNode(
      {
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get enumValues() {
          return new FieldNode(
            new ArrayNode(schema.__EnumValue, true),
            new Arguments({
              get includeDeprecated() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get fields() {
          return new FieldNode(
            new ArrayNode(schema.__Field, true),
            new Arguments({
              get includeDeprecated() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get inputFields() {
          return new FieldNode(
            new ArrayNode(schema.__InputValue, true),
            undefined,
            true
          );
        },
        get interfaces() {
          return new FieldNode(
            new ArrayNode(schema.__Type, true),
            undefined,
            true
          );
        },
        get kind() {
          return new FieldNode(schema.__TypeKind, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ofType() {
          return new FieldNode(schema.__Type, undefined, true);
        },
        get possibleTypes() {
          return new FieldNode(
            new ArrayNode(schema.__Type, true),
            undefined,
            true
          );
        },
      },
      { name: '__Type', extension: ((extensions as any) || {}).__Type }
    );
  },
  get __TypeKind() {
    return new EnumNode({ name: '__TypeKind' });
  },
  get _bool() {
    return new ScalarNode({
      name: '_bool',
      extension: ((extensions as any) || {})._bool,
    });
  },
  get _bool_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema._bool, true);
        },
        get _gt() {
          return new InputNodeField(schema._bool, true);
        },
        get _gte() {
          return new InputNodeField(schema._bool, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema._bool, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema._bool, true);
        },
        get _lte() {
          return new InputNodeField(schema._bool, true);
        },
        get _neq() {
          return new InputNodeField(schema._bool, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema._bool, true), true);
        },
      },
      { name: '_bool_comparison_exp' }
    );
  },
  get _float8() {
    return new ScalarNode({
      name: '_float8',
      extension: ((extensions as any) || {})._float8,
    });
  },
  get _float8_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema._float8, true);
        },
        get _gt() {
          return new InputNodeField(schema._float8, true);
        },
        get _gte() {
          return new InputNodeField(schema._float8, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema._float8, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema._float8, true);
        },
        get _lte() {
          return new InputNodeField(schema._float8, true);
        },
        get _neq() {
          return new InputNodeField(schema._float8, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema._float8, true), true);
        },
      },
      { name: '_float8_comparison_exp' }
    );
  },
  get _int4() {
    return new ScalarNode({
      name: '_int4',
      extension: ((extensions as any) || {})._int4,
    });
  },
  get _int4_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema._int4, true);
        },
        get _gt() {
          return new InputNodeField(schema._int4, true);
        },
        get _gte() {
          return new InputNodeField(schema._int4, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema._int4, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema._int4, true);
        },
        get _lte() {
          return new InputNodeField(schema._int4, true);
        },
        get _neq() {
          return new InputNodeField(schema._int4, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema._int4, true), true);
        },
      },
      { name: '_int4_comparison_exp' }
    );
  },
  get _jsonb() {
    return new ScalarNode({
      name: '_jsonb',
      extension: ((extensions as any) || {})._jsonb,
    });
  },
  get _jsonb_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema._jsonb, true);
        },
        get _gt() {
          return new InputNodeField(schema._jsonb, true);
        },
        get _gte() {
          return new InputNodeField(schema._jsonb, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema._jsonb, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema._jsonb, true);
        },
        get _lte() {
          return new InputNodeField(schema._jsonb, true);
        },
        get _neq() {
          return new InputNodeField(schema._jsonb, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema._jsonb, true), true);
        },
      },
      { name: '_jsonb_comparison_exp' }
    );
  },
  get _text() {
    return new ScalarNode({
      name: '_text',
      extension: ((extensions as any) || {})._text,
    });
  },
  get _text_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema._text, true);
        },
        get _gt() {
          return new InputNodeField(schema._text, true);
        },
        get _gte() {
          return new InputNodeField(schema._text, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema._text, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema._text, true);
        },
        get _lte() {
          return new InputNodeField(schema._text, true);
        },
        get _neq() {
          return new InputNodeField(schema._text, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema._text, true), true);
        },
      },
      { name: '_text_comparison_exp' }
    );
  },
  get _varchar() {
    return new ScalarNode({
      name: '_varchar',
      extension: ((extensions as any) || {})._varchar,
    });
  },
  get _varchar_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema._varchar, true);
        },
        get _gt() {
          return new InputNodeField(schema._varchar, true);
        },
        get _gte() {
          return new InputNodeField(schema._varchar, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema._varchar, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema._varchar, true);
        },
        get _lte() {
          return new InputNodeField(schema._varchar, true);
        },
        get _neq() {
          return new InputNodeField(schema._varchar, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema._varchar, true), true);
        },
      },
      { name: '_varchar_comparison_exp' }
    );
  },
  get bad_actors() {
    return new ObjectNode(
      {
        get bad_actors_associated_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_associated_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_associated_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_associated_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      { name: 'bad_actors', extension: ((extensions as any) || {}).bad_actors }
    );
  },
  get bad_actors_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.bad_actors_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'bad_actors_aggregate',
        extension: ((extensions as any) || {}).bad_actors_aggregate,
      }
    );
  },
  get bad_actors_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.bad_actors_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.bad_actors_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.bad_actors_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.bad_actors_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.bad_actors_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.bad_actors_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.bad_actors_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.bad_actors_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.bad_actors_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.bad_actors_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'bad_actors_aggregate_fields',
        extension: ((extensions as any) || {}).bad_actors_aggregate_fields,
      }
    );
  },
  get bad_actors_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.bad_actors_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.bad_actors_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.bad_actors_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.bad_actors_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.bad_actors_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.bad_actors_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.bad_actors_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.bad_actors_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.bad_actors_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.bad_actors_variance_order_by, true);
        },
      },
      { name: 'bad_actors_aggregate_order_by' }
    );
  },
  get bad_actors_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.bad_actors_on_conflict, true);
        },
      },
      { name: 'bad_actors_arr_rel_insert_input' }
    );
  },
  get bad_actors_associated_users() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get bad_actor() {
          return new FieldNode(schema.bad_actors, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users',
        extension: ((extensions as any) || {}).bad_actors_associated_users,
      }
    );
  },
  get bad_actors_associated_users_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.bad_actors_associated_users_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_associated_users, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'bad_actors_associated_users_aggregate',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_aggregate,
      }
    );
  },
  get bad_actors_associated_users_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.bad_actors_associated_users_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.bad_actors_associated_users_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.bad_actors_associated_users_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.bad_actors_associated_users_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.bad_actors_associated_users_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.bad_actors_associated_users_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.bad_actors_associated_users_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.bad_actors_associated_users_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.bad_actors_associated_users_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.bad_actors_associated_users_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'bad_actors_associated_users_aggregate_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_aggregate_fields,
      }
    );
  },
  get bad_actors_associated_users_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.bad_actors_associated_users_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.bad_actors_associated_users_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.bad_actors_associated_users_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.bad_actors_associated_users_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.bad_actors_associated_users_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.bad_actors_associated_users_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.bad_actors_associated_users_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.bad_actors_associated_users_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.bad_actors_associated_users_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.bad_actors_associated_users_variance_order_by,
            true
          );
        },
      },
      { name: 'bad_actors_associated_users_aggregate_order_by' }
    );
  },
  get bad_actors_associated_users_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.bad_actors_associated_users_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.bad_actors_associated_users_on_conflict,
            true
          );
        },
      },
      { name: 'bad_actors_associated_users_arr_rel_insert_input' }
    );
  },
  get bad_actors_associated_users_avg_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_avg_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_avg_fields,
      }
    );
  },
  get bad_actors_associated_users_avg_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_avg_order_by' }
    );
  },
  get bad_actors_associated_users_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_associated_users_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.bad_actors_associated_users_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_associated_users_bool_exp, true),
            true
          );
        },
        get associated_user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get bad_actor() {
          return new InputNodeField(schema.bad_actors_bool_exp, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'bad_actors_associated_users_bool_exp' }
    );
  },
  get bad_actors_associated_users_constraint() {
    return new EnumNode({ name: 'bad_actors_associated_users_constraint' });
  },
  get bad_actors_associated_users_inc_input() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'bad_actors_associated_users_inc_input' }
    );
  },
  get bad_actors_associated_users_insert_input() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get bad_actor() {
          return new InputNodeField(
            schema.bad_actors_obj_rel_insert_input,
            true
          );
        },
        get bad_actor_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'bad_actors_associated_users_insert_input' }
    );
  },
  get bad_actors_associated_users_max_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_max_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_max_fields,
      }
    );
  },
  get bad_actors_associated_users_max_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_max_order_by' }
    );
  },
  get bad_actors_associated_users_min_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_min_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_min_fields,
      }
    );
  },
  get bad_actors_associated_users_min_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_min_order_by' }
    );
  },
  get bad_actors_associated_users_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_associated_users, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'bad_actors_associated_users_mutation_response',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_mutation_response,
      }
    );
  },
  get bad_actors_associated_users_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.bad_actors_associated_users_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.bad_actors_associated_users_on_conflict,
            true
          );
        },
      },
      { name: 'bad_actors_associated_users_obj_rel_insert_input' }
    );
  },
  get bad_actors_associated_users_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.bad_actors_associated_users_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.bad_actors_associated_users_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.bad_actors_associated_users_bool_exp,
            true
          );
        },
      },
      { name: 'bad_actors_associated_users_on_conflict' }
    );
  },
  get bad_actors_associated_users_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor() {
          return new InputNodeField(schema.bad_actors_order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_order_by' }
    );
  },
  get bad_actors_associated_users_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'bad_actors_associated_users_pk_columns_input' }
    );
  },
  get bad_actors_associated_users_select_column() {
    return new EnumNode({ name: 'bad_actors_associated_users_select_column' });
  },
  get bad_actors_associated_users_set_input() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'bad_actors_associated_users_set_input' }
    );
  },
  get bad_actors_associated_users_stddev_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_stddev_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_stddev_fields,
      }
    );
  },
  get bad_actors_associated_users_stddev_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_stddev_order_by' }
    );
  },
  get bad_actors_associated_users_stddev_pop_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_stddev_pop_fields,
      }
    );
  },
  get bad_actors_associated_users_stddev_pop_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_stddev_pop_order_by' }
    );
  },
  get bad_actors_associated_users_stddev_samp_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_stddev_samp_fields,
      }
    );
  },
  get bad_actors_associated_users_stddev_samp_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_stddev_samp_order_by' }
    );
  },
  get bad_actors_associated_users_sum_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_sum_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_sum_fields,
      }
    );
  },
  get bad_actors_associated_users_sum_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_sum_order_by' }
    );
  },
  get bad_actors_associated_users_update_column() {
    return new EnumNode({ name: 'bad_actors_associated_users_update_column' });
  },
  get bad_actors_associated_users_var_pop_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_var_pop_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_var_pop_fields,
      }
    );
  },
  get bad_actors_associated_users_var_pop_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_var_pop_order_by' }
    );
  },
  get bad_actors_associated_users_var_samp_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_var_samp_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_var_samp_fields,
      }
    );
  },
  get bad_actors_associated_users_var_samp_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_var_samp_order_by' }
    );
  },
  get bad_actors_associated_users_variance_fields() {
    return new ObjectNode(
      {
        get associated_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_associated_users_variance_fields',
        extension: ((extensions as any) || {})
          .bad_actors_associated_users_variance_fields,
      }
    );
  },
  get bad_actors_associated_users_variance_order_by() {
    return new InputNode(
      {
        get associated_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_associated_users_variance_order_by' }
    );
  },
  get bad_actors_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_avg_fields',
        extension: ((extensions as any) || {}).bad_actors_avg_fields,
      }
    );
  },
  get bad_actors_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_avg_order_by' }
    );
  },
  get bad_actors_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.bad_actors_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_bool_exp, true),
            true
          );
        },
        get bad_actors_associated_users() {
          return new InputNodeField(
            schema.bad_actors_associated_users_bool_exp,
            true
          );
        },
        get bad_actors_users() {
          return new InputNodeField(schema.bad_actors_users_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'bad_actors_bool_exp' }
    );
  },
  get bad_actors_constraint() {
    return new EnumNode({ name: 'bad_actors_constraint' });
  },
  get bad_actors_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'bad_actors_inc_input' }
    );
  },
  get bad_actors_insert_input() {
    return new InputNode(
      {
        get bad_actors_associated_users() {
          return new InputNodeField(
            schema.bad_actors_associated_users_arr_rel_insert_input,
            true
          );
        },
        get bad_actors_users() {
          return new InputNodeField(
            schema.bad_actors_users_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'bad_actors_insert_input' }
    );
  },
  get bad_actors_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'bad_actors_max_fields',
        extension: ((extensions as any) || {}).bad_actors_max_fields,
      }
    );
  },
  get bad_actors_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_max_order_by' }
    );
  },
  get bad_actors_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'bad_actors_min_fields',
        extension: ((extensions as any) || {}).bad_actors_min_fields,
      }
    );
  },
  get bad_actors_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_min_order_by' }
    );
  },
  get bad_actors_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'bad_actors_mutation_response',
        extension: ((extensions as any) || {}).bad_actors_mutation_response,
      }
    );
  },
  get bad_actors_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.bad_actors_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.bad_actors_on_conflict, true);
        },
      },
      { name: 'bad_actors_obj_rel_insert_input' }
    );
  },
  get bad_actors_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.bad_actors_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.bad_actors_bool_exp, true);
        },
      },
      { name: 'bad_actors_on_conflict' }
    );
  },
  get bad_actors_order_by() {
    return new InputNode(
      {
        get bad_actors_associated_users_aggregate() {
          return new InputNodeField(
            schema.bad_actors_associated_users_aggregate_order_by,
            true
          );
        },
        get bad_actors_users_aggregate() {
          return new InputNodeField(
            schema.bad_actors_users_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_order_by' }
    );
  },
  get bad_actors_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'bad_actors_pk_columns_input' }
    );
  },
  get bad_actors_select_column() {
    return new EnumNode({ name: 'bad_actors_select_column' });
  },
  get bad_actors_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'bad_actors_set_input' }
    );
  },
  get bad_actors_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_stddev_fields',
        extension: ((extensions as any) || {}).bad_actors_stddev_fields,
      }
    );
  },
  get bad_actors_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_stddev_order_by' }
    );
  },
  get bad_actors_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_stddev_pop_fields',
        extension: ((extensions as any) || {}).bad_actors_stddev_pop_fields,
      }
    );
  },
  get bad_actors_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_stddev_pop_order_by' }
    );
  },
  get bad_actors_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_stddev_samp_fields',
        extension: ((extensions as any) || {}).bad_actors_stddev_samp_fields,
      }
    );
  },
  get bad_actors_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_stddev_samp_order_by' }
    );
  },
  get bad_actors_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'bad_actors_sum_fields',
        extension: ((extensions as any) || {}).bad_actors_sum_fields,
      }
    );
  },
  get bad_actors_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_sum_order_by' }
    );
  },
  get bad_actors_update_column() {
    return new EnumNode({ name: 'bad_actors_update_column' });
  },
  get bad_actors_users() {
    return new ObjectNode(
      {
        get bad_actor() {
          return new FieldNode(schema.bad_actors, undefined, true);
        },
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'bad_actors_users',
        extension: ((extensions as any) || {}).bad_actors_users,
      }
    );
  },
  get bad_actors_users_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.bad_actors_users_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_users, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'bad_actors_users_aggregate',
        extension: ((extensions as any) || {}).bad_actors_users_aggregate,
      }
    );
  },
  get bad_actors_users_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.bad_actors_users_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.bad_actors_users_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.bad_actors_users_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.bad_actors_users_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.bad_actors_users_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.bad_actors_users_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.bad_actors_users_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.bad_actors_users_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.bad_actors_users_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.bad_actors_users_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'bad_actors_users_aggregate_fields',
        extension: ((extensions as any) || {})
          .bad_actors_users_aggregate_fields,
      }
    );
  },
  get bad_actors_users_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.bad_actors_users_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.bad_actors_users_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.bad_actors_users_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.bad_actors_users_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.bad_actors_users_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.bad_actors_users_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.bad_actors_users_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.bad_actors_users_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.bad_actors_users_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.bad_actors_users_variance_order_by,
            true
          );
        },
      },
      { name: 'bad_actors_users_aggregate_order_by' }
    );
  },
  get bad_actors_users_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_users_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.bad_actors_users_on_conflict, true);
        },
      },
      { name: 'bad_actors_users_arr_rel_insert_input' }
    );
  },
  get bad_actors_users_avg_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_avg_fields',
        extension: ((extensions as any) || {}).bad_actors_users_avg_fields,
      }
    );
  },
  get bad_actors_users_avg_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_avg_order_by' }
    );
  },
  get bad_actors_users_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_users_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.bad_actors_users_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_users_bool_exp, true),
            true
          );
        },
        get bad_actor() {
          return new InputNodeField(schema.bad_actors_bool_exp, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'bad_actors_users_bool_exp' }
    );
  },
  get bad_actors_users_constraint() {
    return new EnumNode({ name: 'bad_actors_users_constraint' });
  },
  get bad_actors_users_inc_input() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'bad_actors_users_inc_input' }
    );
  },
  get bad_actors_users_insert_input() {
    return new InputNode(
      {
        get bad_actor() {
          return new InputNodeField(
            schema.bad_actors_obj_rel_insert_input,
            true
          );
        },
        get bad_actor_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'bad_actors_users_insert_input' }
    );
  },
  get bad_actors_users_max_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_max_fields',
        extension: ((extensions as any) || {}).bad_actors_users_max_fields,
      }
    );
  },
  get bad_actors_users_max_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_max_order_by' }
    );
  },
  get bad_actors_users_min_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_min_fields',
        extension: ((extensions as any) || {}).bad_actors_users_min_fields,
      }
    );
  },
  get bad_actors_users_min_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_min_order_by' }
    );
  },
  get bad_actors_users_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_users, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'bad_actors_users_mutation_response',
        extension: ((extensions as any) || {})
          .bad_actors_users_mutation_response,
      }
    );
  },
  get bad_actors_users_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.bad_actors_users_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.bad_actors_users_on_conflict, true);
        },
      },
      { name: 'bad_actors_users_obj_rel_insert_input' }
    );
  },
  get bad_actors_users_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.bad_actors_users_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.bad_actors_users_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.bad_actors_users_bool_exp, true);
        },
      },
      { name: 'bad_actors_users_on_conflict' }
    );
  },
  get bad_actors_users_order_by() {
    return new InputNode(
      {
        get bad_actor() {
          return new InputNodeField(schema.bad_actors_order_by, true);
        },
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_order_by' }
    );
  },
  get bad_actors_users_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'bad_actors_users_pk_columns_input' }
    );
  },
  get bad_actors_users_select_column() {
    return new EnumNode({ name: 'bad_actors_users_select_column' });
  },
  get bad_actors_users_set_input() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'bad_actors_users_set_input' }
    );
  },
  get bad_actors_users_stddev_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_stddev_fields',
        extension: ((extensions as any) || {}).bad_actors_users_stddev_fields,
      }
    );
  },
  get bad_actors_users_stddev_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_stddev_order_by' }
    );
  },
  get bad_actors_users_stddev_pop_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .bad_actors_users_stddev_pop_fields,
      }
    );
  },
  get bad_actors_users_stddev_pop_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_stddev_pop_order_by' }
    );
  },
  get bad_actors_users_stddev_samp_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .bad_actors_users_stddev_samp_fields,
      }
    );
  },
  get bad_actors_users_stddev_samp_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_stddev_samp_order_by' }
    );
  },
  get bad_actors_users_sum_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_sum_fields',
        extension: ((extensions as any) || {}).bad_actors_users_sum_fields,
      }
    );
  },
  get bad_actors_users_sum_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_sum_order_by' }
    );
  },
  get bad_actors_users_update_column() {
    return new EnumNode({ name: 'bad_actors_users_update_column' });
  },
  get bad_actors_users_var_pop_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_var_pop_fields',
        extension: ((extensions as any) || {}).bad_actors_users_var_pop_fields,
      }
    );
  },
  get bad_actors_users_var_pop_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_var_pop_order_by' }
    );
  },
  get bad_actors_users_var_samp_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_var_samp_fields',
        extension: ((extensions as any) || {}).bad_actors_users_var_samp_fields,
      }
    );
  },
  get bad_actors_users_var_samp_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_var_samp_order_by' }
    );
  },
  get bad_actors_users_variance_fields() {
    return new ObjectNode(
      {
        get bad_actor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_users_variance_fields',
        extension: ((extensions as any) || {}).bad_actors_users_variance_fields,
      }
    );
  },
  get bad_actors_users_variance_order_by() {
    return new InputNode(
      {
        get bad_actor_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_users_variance_order_by' }
    );
  },
  get bad_actors_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_var_pop_fields',
        extension: ((extensions as any) || {}).bad_actors_var_pop_fields,
      }
    );
  },
  get bad_actors_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_var_pop_order_by' }
    );
  },
  get bad_actors_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_var_samp_fields',
        extension: ((extensions as any) || {}).bad_actors_var_samp_fields,
      }
    );
  },
  get bad_actors_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_var_samp_order_by' }
    );
  },
  get bad_actors_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'bad_actors_variance_fields',
        extension: ((extensions as any) || {}).bad_actors_variance_fields,
      }
    );
  },
  get bad_actors_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'bad_actors_variance_order_by' }
    );
  },
  get balance_transactions() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get available_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get created() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fee_details() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get net() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payout() {
          return new FieldNode(schema.payouts, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get source() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get transfers_v2s() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'balance_transactions',
        extension: ((extensions as any) || {}).balance_transactions,
      }
    );
  },
  get balance_transactions_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.balance_transactions_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.balance_transactions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'balance_transactions_aggregate',
        extension: ((extensions as any) || {}).balance_transactions_aggregate,
      }
    );
  },
  get balance_transactions_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.balance_transactions_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.balance_transactions_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.balance_transactions_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.balance_transactions_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.balance_transactions_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.balance_transactions_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.balance_transactions_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.balance_transactions_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.balance_transactions_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.balance_transactions_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'balance_transactions_aggregate_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_aggregate_fields,
      }
    );
  },
  get balance_transactions_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.balance_transactions_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.balance_transactions_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.balance_transactions_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.balance_transactions_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.balance_transactions_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.balance_transactions_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.balance_transactions_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.balance_transactions_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.balance_transactions_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.balance_transactions_variance_order_by,
            true
          );
        },
      },
      { name: 'balance_transactions_aggregate_order_by' }
    );
  },
  get balance_transactions_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.balance_transactions_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.balance_transactions_on_conflict,
            true
          );
        },
      },
      { name: 'balance_transactions_arr_rel_insert_input' }
    );
  },
  get balance_transactions_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_avg_fields',
        extension: ((extensions as any) || {}).balance_transactions_avg_fields,
      }
    );
  },
  get balance_transactions_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_avg_order_by' }
    );
  },
  get balance_transactions_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.balance_transactions_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.balance_transactions_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.balance_transactions_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get available_on() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get created() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get currency() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get fee_details() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get net() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get payout() {
          return new InputNodeField(schema.payouts_bool_exp, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get source() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get transfers_v2s() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'balance_transactions_bool_exp' }
    );
  },
  get balance_transactions_constraint() {
    return new EnumNode({ name: 'balance_transactions_constraint' });
  },
  get balance_transactions_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.numeric, true);
        },
        get fee() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get net() {
          return new InputNodeField(schema.Int, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'balance_transactions_inc_input' }
    );
  },
  get balance_transactions_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get available_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get created() {
          return new InputNodeField(schema.timestamp, true);
        },
        get currency() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.numeric, true);
        },
        get fee() {
          return new InputNodeField(schema.Int, true);
        },
        get fee_details() {
          return new InputNodeField(schema._jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get net() {
          return new InputNodeField(schema.Int, true);
        },
        get payout() {
          return new InputNodeField(schema.payouts_obj_rel_insert_input, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get source() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get transfers_v2s() {
          return new InputNodeField(
            schema.transfers_v2_arr_rel_insert_input,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'balance_transactions_insert_input' }
    );
  },
  get balance_transactions_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get available_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get created() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get source() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'balance_transactions_max_fields',
        extension: ((extensions as any) || {}).balance_transactions_max_fields,
      }
    );
  },
  get balance_transactions_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get available_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get created() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get source() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_max_order_by' }
    );
  },
  get balance_transactions_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get available_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get created() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get source() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'balance_transactions_min_fields',
        extension: ((extensions as any) || {}).balance_transactions_min_fields,
      }
    );
  },
  get balance_transactions_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get available_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get created() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get source() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_min_order_by' }
    );
  },
  get balance_transactions_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.balance_transactions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'balance_transactions_mutation_response',
        extension: ((extensions as any) || {})
          .balance_transactions_mutation_response,
      }
    );
  },
  get balance_transactions_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.balance_transactions_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.balance_transactions_on_conflict,
            true
          );
        },
      },
      { name: 'balance_transactions_obj_rel_insert_input' }
    );
  },
  get balance_transactions_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.balance_transactions_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.balance_transactions_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.balance_transactions_bool_exp, true);
        },
      },
      { name: 'balance_transactions_on_conflict' }
    );
  },
  get balance_transactions_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get available_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get created() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee_details() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout() {
          return new InputNodeField(schema.payouts_order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get source() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_v2s_aggregate() {
          return new InputNodeField(
            schema.transfers_v2_aggregate_order_by,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_order_by' }
    );
  },
  get balance_transactions_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'balance_transactions_pk_columns_input' }
    );
  },
  get balance_transactions_select_column() {
    return new EnumNode({ name: 'balance_transactions_select_column' });
  },
  get balance_transactions_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get available_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get created() {
          return new InputNodeField(schema.timestamp, true);
        },
        get currency() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.numeric, true);
        },
        get fee() {
          return new InputNodeField(schema.Int, true);
        },
        get fee_details() {
          return new InputNodeField(schema._jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get net() {
          return new InputNodeField(schema.Int, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get source() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'balance_transactions_set_input' }
    );
  },
  get balance_transactions_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_stddev_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_stddev_fields,
      }
    );
  },
  get balance_transactions_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_stddev_order_by' }
    );
  },
  get balance_transactions_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_stddev_pop_fields,
      }
    );
  },
  get balance_transactions_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_stddev_pop_order_by' }
    );
  },
  get balance_transactions_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_stddev_samp_fields,
      }
    );
  },
  get balance_transactions_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_stddev_samp_order_by' }
    );
  },
  get balance_transactions_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'balance_transactions_sum_fields',
        extension: ((extensions as any) || {}).balance_transactions_sum_fields,
      }
    );
  },
  get balance_transactions_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_sum_order_by' }
    );
  },
  get balance_transactions_update_column() {
    return new EnumNode({ name: 'balance_transactions_update_column' });
  },
  get balance_transactions_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_var_pop_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_var_pop_fields,
      }
    );
  },
  get balance_transactions_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_var_pop_order_by' }
    );
  },
  get balance_transactions_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_var_samp_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_var_samp_fields,
      }
    );
  },
  get balance_transactions_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_var_samp_order_by' }
    );
  },
  get balance_transactions_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exchange_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get net() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'balance_transactions_variance_fields',
        extension: ((extensions as any) || {})
          .balance_transactions_variance_fields,
      }
    );
  },
  get balance_transactions_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get exchange_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get net() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'balance_transactions_variance_order_by' }
    );
  },
  get bigint() {
    return new ScalarNode({
      name: 'bigint',
      extension: ((extensions as any) || {}).bigint,
    });
  },
  get bigint_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.bigint, true);
        },
        get _gt() {
          return new InputNodeField(schema.bigint, true);
        },
        get _gte() {
          return new InputNodeField(schema.bigint, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.bigint, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.bigint, true);
        },
        get _lte() {
          return new InputNodeField(schema.bigint, true);
        },
        get _neq() {
          return new InputNodeField(schema.bigint, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.bigint, true), true);
        },
      },
      { name: 'bigint_comparison_exp' }
    );
  },
  get business_cases() {
    return new ObjectNode(
      {
        get banner_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get pictures() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get subtitle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'business_cases',
        extension: ((extensions as any) || {}).business_cases,
      }
    );
  },
  get business_cases_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.business_cases_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.business_cases, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'business_cases_aggregate',
        extension: ((extensions as any) || {}).business_cases_aggregate,
      }
    );
  },
  get business_cases_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.business_cases_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.business_cases_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.business_cases_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.business_cases_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.business_cases_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.business_cases_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.business_cases_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.business_cases_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.business_cases_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.business_cases_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'business_cases_aggregate_fields',
        extension: ((extensions as any) || {}).business_cases_aggregate_fields,
      }
    );
  },
  get business_cases_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.business_cases_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.business_cases_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.business_cases_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.business_cases_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.business_cases_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.business_cases_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.business_cases_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.business_cases_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.business_cases_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.business_cases_variance_order_by,
            true
          );
        },
      },
      { name: 'business_cases_aggregate_order_by' }
    );
  },
  get business_cases_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.business_cases_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.business_cases_on_conflict, true);
        },
      },
      { name: 'business_cases_arr_rel_insert_input' }
    );
  },
  get business_cases_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_avg_fields',
        extension: ((extensions as any) || {}).business_cases_avg_fields,
      }
    );
  },
  get business_cases_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_avg_order_by' }
    );
  },
  get business_cases_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.business_cases_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.business_cases_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.business_cases_bool_exp, true),
            true
          );
        },
        get banner_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get subtitle() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'business_cases_bool_exp' }
    );
  },
  get business_cases_constraint() {
    return new EnumNode({ name: 'business_cases_constraint' });
  },
  get business_cases_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'business_cases_inc_input' }
    );
  },
  get business_cases_insert_input() {
    return new InputNode(
      {
        get banner_url() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get subtitle() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'business_cases_insert_input' }
    );
  },
  get business_cases_max_fields() {
    return new ObjectNode(
      {
        get banner_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get subtitle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'business_cases_max_fields',
        extension: ((extensions as any) || {}).business_cases_max_fields,
      }
    );
  },
  get business_cases_max_order_by() {
    return new InputNode(
      {
        get banner_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtitle() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_max_order_by' }
    );
  },
  get business_cases_min_fields() {
    return new ObjectNode(
      {
        get banner_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get subtitle() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'business_cases_min_fields',
        extension: ((extensions as any) || {}).business_cases_min_fields,
      }
    );
  },
  get business_cases_min_order_by() {
    return new InputNode(
      {
        get banner_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtitle() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_min_order_by' }
    );
  },
  get business_cases_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.business_cases, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'business_cases_mutation_response',
        extension: ((extensions as any) || {}).business_cases_mutation_response,
      }
    );
  },
  get business_cases_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.business_cases_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.business_cases_on_conflict, true);
        },
      },
      { name: 'business_cases_obj_rel_insert_input' }
    );
  },
  get business_cases_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.business_cases_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.business_cases_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.business_cases_bool_exp, true);
        },
      },
      { name: 'business_cases_on_conflict' }
    );
  },
  get business_cases_order_by() {
    return new InputNode(
      {
        get banner_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get pictures() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtitle() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_order_by' }
    );
  },
  get business_cases_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'business_cases_pk_columns_input' }
    );
  },
  get business_cases_select_column() {
    return new EnumNode({ name: 'business_cases_select_column' });
  },
  get business_cases_set_input() {
    return new InputNode(
      {
        get banner_url() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get subtitle() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'business_cases_set_input' }
    );
  },
  get business_cases_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_stddev_fields',
        extension: ((extensions as any) || {}).business_cases_stddev_fields,
      }
    );
  },
  get business_cases_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_stddev_order_by' }
    );
  },
  get business_cases_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_stddev_pop_fields',
        extension: ((extensions as any) || {}).business_cases_stddev_pop_fields,
      }
    );
  },
  get business_cases_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_stddev_pop_order_by' }
    );
  },
  get business_cases_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .business_cases_stddev_samp_fields,
      }
    );
  },
  get business_cases_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_stddev_samp_order_by' }
    );
  },
  get business_cases_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'business_cases_sum_fields',
        extension: ((extensions as any) || {}).business_cases_sum_fields,
      }
    );
  },
  get business_cases_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_sum_order_by' }
    );
  },
  get business_cases_update_column() {
    return new EnumNode({ name: 'business_cases_update_column' });
  },
  get business_cases_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_var_pop_fields',
        extension: ((extensions as any) || {}).business_cases_var_pop_fields,
      }
    );
  },
  get business_cases_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_var_pop_order_by' }
    );
  },
  get business_cases_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_var_samp_fields',
        extension: ((extensions as any) || {}).business_cases_var_samp_fields,
      }
    );
  },
  get business_cases_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_var_samp_order_by' }
    );
  },
  get business_cases_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'business_cases_variance_fields',
        extension: ((extensions as any) || {}).business_cases_variance_fields,
      }
    );
  },
  get business_cases_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'business_cases_variance_order_by' }
    );
  },
  get categories() {
    return new ObjectNode(
      {
        get category() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      { name: 'categories', extension: ((extensions as any) || {}).categories }
    );
  },
  get categories_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.categories_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.categories, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'categories_aggregate',
        extension: ((extensions as any) || {}).categories_aggregate,
      }
    );
  },
  get categories_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.categories_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.categories_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.categories_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.categories_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.categories_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.categories_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.categories_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.categories_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.categories_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.categories_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'categories_aggregate_fields',
        extension: ((extensions as any) || {}).categories_aggregate_fields,
      }
    );
  },
  get categories_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.categories_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.categories_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.categories_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.categories_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.categories_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.categories_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.categories_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.categories_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.categories_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.categories_variance_order_by, true);
        },
      },
      { name: 'categories_aggregate_order_by' }
    );
  },
  get categories_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.categories_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.categories_on_conflict, true);
        },
      },
      { name: 'categories_arr_rel_insert_input' }
    );
  },
  get categories_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_avg_fields',
        extension: ((extensions as any) || {}).categories_avg_fields,
      }
    );
  },
  get categories_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_avg_order_by' }
    );
  },
  get categories_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.categories_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.categories_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.categories_bool_exp, true),
            true
          );
        },
        get category() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'categories_bool_exp' }
    );
  },
  get categories_constraint() {
    return new EnumNode({ name: 'categories_constraint' });
  },
  get categories_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'categories_inc_input' }
    );
  },
  get categories_insert_input() {
    return new InputNode(
      {
        get category() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'categories_insert_input' }
    );
  },
  get categories_max_fields() {
    return new ObjectNode(
      {
        get category() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'categories_max_fields',
        extension: ((extensions as any) || {}).categories_max_fields,
      }
    );
  },
  get categories_max_order_by() {
    return new InputNode(
      {
        get category() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_max_order_by' }
    );
  },
  get categories_min_fields() {
    return new ObjectNode(
      {
        get category() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'categories_min_fields',
        extension: ((extensions as any) || {}).categories_min_fields,
      }
    );
  },
  get categories_min_order_by() {
    return new InputNode(
      {
        get category() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_min_order_by' }
    );
  },
  get categories_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.categories, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'categories_mutation_response',
        extension: ((extensions as any) || {}).categories_mutation_response,
      }
    );
  },
  get categories_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.categories_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.categories_on_conflict, true);
        },
      },
      { name: 'categories_obj_rel_insert_input' }
    );
  },
  get categories_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.categories_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.categories_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.categories_bool_exp, true);
        },
      },
      { name: 'categories_on_conflict' }
    );
  },
  get categories_order_by() {
    return new InputNode(
      {
        get category() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_order_by' }
    );
  },
  get categories_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'categories_pk_columns_input' }
    );
  },
  get categories_select_column() {
    return new EnumNode({ name: 'categories_select_column' });
  },
  get categories_set_input() {
    return new InputNode(
      {
        get category() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'categories_set_input' }
    );
  },
  get categories_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_stddev_fields',
        extension: ((extensions as any) || {}).categories_stddev_fields,
      }
    );
  },
  get categories_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_stddev_order_by' }
    );
  },
  get categories_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_stddev_pop_fields',
        extension: ((extensions as any) || {}).categories_stddev_pop_fields,
      }
    );
  },
  get categories_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_stddev_pop_order_by' }
    );
  },
  get categories_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_stddev_samp_fields',
        extension: ((extensions as any) || {}).categories_stddev_samp_fields,
      }
    );
  },
  get categories_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_stddev_samp_order_by' }
    );
  },
  get categories_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'categories_sum_fields',
        extension: ((extensions as any) || {}).categories_sum_fields,
      }
    );
  },
  get categories_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_sum_order_by' }
    );
  },
  get categories_update_column() {
    return new EnumNode({ name: 'categories_update_column' });
  },
  get categories_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_var_pop_fields',
        extension: ((extensions as any) || {}).categories_var_pop_fields,
      }
    );
  },
  get categories_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_var_pop_order_by' }
    );
  },
  get categories_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_var_samp_fields',
        extension: ((extensions as any) || {}).categories_var_samp_fields,
      }
    );
  },
  get categories_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_var_samp_order_by' }
    );
  },
  get categories_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'categories_variance_fields',
        extension: ((extensions as any) || {}).categories_variance_fields,
      }
    );
  },
  get categories_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'categories_variance_order_by' }
    );
  },
  get charge_account_records() {
    return new ObjectNode(
      {
        get address() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'charge_account_records',
        extension: ((extensions as any) || {}).charge_account_records,
      }
    );
  },
  get charge_account_records_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.charge_account_records_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.charge_account_records, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charge_account_records_aggregate',
        extension: ((extensions as any) || {}).charge_account_records_aggregate,
      }
    );
  },
  get charge_account_records_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.charge_account_records_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.charge_account_records_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.charge_account_records_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.charge_account_records_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.charge_account_records_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.charge_account_records_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.charge_account_records_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.charge_account_records_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.charge_account_records_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.charge_account_records_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'charge_account_records_aggregate_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_aggregate_fields,
      }
    );
  },
  get charge_account_records_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.charge_account_records_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.charge_account_records_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.charge_account_records_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.charge_account_records_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.charge_account_records_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.charge_account_records_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.charge_account_records_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.charge_account_records_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.charge_account_records_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.charge_account_records_variance_order_by,
            true
          );
        },
      },
      { name: 'charge_account_records_aggregate_order_by' }
    );
  },
  get charge_account_records_append_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'charge_account_records_append_input' }
    );
  },
  get charge_account_records_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.charge_account_records_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.charge_account_records_on_conflict,
            true
          );
        },
      },
      { name: 'charge_account_records_arr_rel_insert_input' }
    );
  },
  get charge_account_records_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_avg_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_avg_fields,
      }
    );
  },
  get charge_account_records_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_avg_order_by' }
    );
  },
  get charge_account_records_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.charge_account_records_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.charge_account_records_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.charge_account_records_bool_exp, true),
            true
          );
        },
        get address() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get brand() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get customer_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get funding() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'charge_account_records_bool_exp' }
    );
  },
  get charge_account_records_constraint() {
    return new EnumNode({ name: 'charge_account_records_constraint' });
  },
  get charge_account_records_delete_at_path_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'charge_account_records_delete_at_path_input' }
    );
  },
  get charge_account_records_delete_elem_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_account_records_delete_elem_input' }
    );
  },
  get charge_account_records_delete_key_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'charge_account_records_delete_key_input' }
    );
  },
  get charge_account_records_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'charge_account_records_inc_input' }
    );
  },
  get charge_account_records_insert_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get customer_id() {
          return new InputNodeField(schema.String, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'charge_account_records_insert_input' }
    );
  },
  get charge_account_records_max_fields() {
    return new ObjectNode(
      {
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'charge_account_records_max_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_max_fields,
      }
    );
  },
  get charge_account_records_max_order_by() {
    return new InputNode(
      {
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_max_order_by' }
    );
  },
  get charge_account_records_min_fields() {
    return new ObjectNode(
      {
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'charge_account_records_min_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_min_fields,
      }
    );
  },
  get charge_account_records_min_order_by() {
    return new InputNode(
      {
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_min_order_by' }
    );
  },
  get charge_account_records_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.charge_account_records, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charge_account_records_mutation_response',
        extension: ((extensions as any) || {})
          .charge_account_records_mutation_response,
      }
    );
  },
  get charge_account_records_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.charge_account_records_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.charge_account_records_on_conflict,
            true
          );
        },
      },
      { name: 'charge_account_records_obj_rel_insert_input' }
    );
  },
  get charge_account_records_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.charge_account_records_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.charge_account_records_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.charge_account_records_bool_exp,
            true
          );
        },
      },
      { name: 'charge_account_records_on_conflict' }
    );
  },
  get charge_account_records_order_by() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_order_by' }
    );
  },
  get charge_account_records_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'charge_account_records_pk_columns_input' }
    );
  },
  get charge_account_records_prepend_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'charge_account_records_prepend_input' }
    );
  },
  get charge_account_records_select_column() {
    return new EnumNode({ name: 'charge_account_records_select_column' });
  },
  get charge_account_records_set_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get customer_id() {
          return new InputNodeField(schema.String, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'charge_account_records_set_input' }
    );
  },
  get charge_account_records_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_stddev_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_stddev_fields,
      }
    );
  },
  get charge_account_records_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_stddev_order_by' }
    );
  },
  get charge_account_records_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_stddev_pop_fields,
      }
    );
  },
  get charge_account_records_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_stddev_pop_order_by' }
    );
  },
  get charge_account_records_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_stddev_samp_fields,
      }
    );
  },
  get charge_account_records_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_stddev_samp_order_by' }
    );
  },
  get charge_account_records_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'charge_account_records_sum_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_sum_fields,
      }
    );
  },
  get charge_account_records_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_sum_order_by' }
    );
  },
  get charge_account_records_update_column() {
    return new EnumNode({ name: 'charge_account_records_update_column' });
  },
  get charge_account_records_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_var_pop_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_var_pop_fields,
      }
    );
  },
  get charge_account_records_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_var_pop_order_by' }
    );
  },
  get charge_account_records_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_var_samp_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_var_samp_fields,
      }
    );
  },
  get charge_account_records_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_var_samp_order_by' }
    );
  },
  get charge_account_records_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_account_records_variance_fields',
        extension: ((extensions as any) || {})
          .charge_account_records_variance_fields,
      }
    );
  },
  get charge_account_records_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_account_records_variance_order_by' }
    );
  },
  get charge_accounts() {
    return new ObjectNode(
      {
        get address() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get charges() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_aggregate() {
          return new FieldNode(
            schema.charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get customer_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get external_account() {
          return new FieldNode(schema.external_accounts, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_charges() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_aggregate() {
          return new FieldNode(
            schema.general_charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charge_accounts',
        extension: ((extensions as any) || {}).charge_accounts,
      }
    );
  },
  get charge_accounts_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.charge_accounts_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.charge_accounts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charge_accounts_aggregate',
        extension: ((extensions as any) || {}).charge_accounts_aggregate,
      }
    );
  },
  get charge_accounts_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.charge_accounts_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.charge_accounts_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.charge_accounts_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.charge_accounts_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.charge_accounts_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.charge_accounts_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.charge_accounts_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.charge_accounts_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.charge_accounts_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.charge_accounts_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'charge_accounts_aggregate_fields',
        extension: ((extensions as any) || {}).charge_accounts_aggregate_fields,
      }
    );
  },
  get charge_accounts_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.charge_accounts_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.charge_accounts_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.charge_accounts_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.charge_accounts_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.charge_accounts_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.charge_accounts_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.charge_accounts_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.charge_accounts_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.charge_accounts_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.charge_accounts_variance_order_by,
            true
          );
        },
      },
      { name: 'charge_accounts_aggregate_order_by' }
    );
  },
  get charge_accounts_append_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'charge_accounts_append_input' }
    );
  },
  get charge_accounts_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.charge_accounts_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.charge_accounts_on_conflict, true);
        },
      },
      { name: 'charge_accounts_arr_rel_insert_input' }
    );
  },
  get charge_accounts_avg_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_avg_fields',
        extension: ((extensions as any) || {}).charge_accounts_avg_fields,
      }
    );
  },
  get charge_accounts_avg_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_avg_order_by' }
    );
  },
  get charge_accounts_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.charge_accounts_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.charge_accounts_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.charge_accounts_bool_exp, true),
            true
          );
        },
        get address() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get brand() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get charges() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get customer_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get external_account() {
          return new InputNodeField(schema.external_accounts_bool_exp, true);
        },
        get first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get funding() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get general_charges() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get object() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'charge_accounts_bool_exp' }
    );
  },
  get charge_accounts_constraint() {
    return new EnumNode({ name: 'charge_accounts_constraint' });
  },
  get charge_accounts_delete_at_path_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'charge_accounts_delete_at_path_input' }
    );
  },
  get charge_accounts_delete_elem_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_accounts_delete_elem_input' }
    );
  },
  get charge_accounts_delete_key_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'charge_accounts_delete_key_input' }
    );
  },
  get charge_accounts_inc_input() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_accounts_inc_input' }
    );
  },
  get charge_accounts_insert_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get charges() {
          return new InputNodeField(schema.charges_arr_rel_insert_input, true);
        },
        get customer_id() {
          return new InputNodeField(schema.String, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get external_account() {
          return new InputNodeField(
            schema.external_accounts_obj_rel_insert_input,
            true
          );
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get general_charges() {
          return new InputNodeField(
            schema.general_charges_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get object() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_accounts_insert_input' }
    );
  },
  get charge_accounts_max_fields() {
    return new ObjectNode(
      {
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charge_accounts_max_fields',
        extension: ((extensions as any) || {}).charge_accounts_max_fields,
      }
    );
  },
  get charge_accounts_max_order_by() {
    return new InputNode(
      {
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_max_order_by' }
    );
  },
  get charge_accounts_min_fields() {
    return new ObjectNode(
      {
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charge_accounts_min_fields',
        extension: ((extensions as any) || {}).charge_accounts_min_fields,
      }
    );
  },
  get charge_accounts_min_order_by() {
    return new InputNode(
      {
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_min_order_by' }
    );
  },
  get charge_accounts_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.charge_accounts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charge_accounts_mutation_response',
        extension: ((extensions as any) || {})
          .charge_accounts_mutation_response,
      }
    );
  },
  get charge_accounts_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.charge_accounts_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.charge_accounts_on_conflict, true);
        },
      },
      { name: 'charge_accounts_obj_rel_insert_input' }
    );
  },
  get charge_accounts_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.charge_accounts_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.charge_accounts_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.charge_accounts_bool_exp, true);
        },
      },
      { name: 'charge_accounts_on_conflict' }
    );
  },
  get charge_accounts_order_by() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get charges_aggregate() {
          return new InputNodeField(schema.charges_aggregate_order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get external_account() {
          return new InputNodeField(schema.external_accounts_order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charges_aggregate() {
          return new InputNodeField(
            schema.general_charges_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_order_by' }
    );
  },
  get charge_accounts_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'charge_accounts_pk_columns_input' }
    );
  },
  get charge_accounts_prepend_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'charge_accounts_prepend_input' }
    );
  },
  get charge_accounts_select_column() {
    return new EnumNode({ name: 'charge_accounts_select_column' });
  },
  get charge_accounts_set_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get customer_id() {
          return new InputNodeField(schema.String, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get object() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_accounts_set_input' }
    );
  },
  get charge_accounts_stddev_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_stddev_fields',
        extension: ((extensions as any) || {}).charge_accounts_stddev_fields,
      }
    );
  },
  get charge_accounts_stddev_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_stddev_order_by' }
    );
  },
  get charge_accounts_stddev_pop_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .charge_accounts_stddev_pop_fields,
      }
    );
  },
  get charge_accounts_stddev_pop_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_stddev_pop_order_by' }
    );
  },
  get charge_accounts_stddev_samp_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .charge_accounts_stddev_samp_fields,
      }
    );
  },
  get charge_accounts_stddev_samp_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_stddev_samp_order_by' }
    );
  },
  get charge_accounts_sum_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charge_accounts_sum_fields',
        extension: ((extensions as any) || {}).charge_accounts_sum_fields,
      }
    );
  },
  get charge_accounts_sum_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_sum_order_by' }
    );
  },
  get charge_accounts_update_column() {
    return new EnumNode({ name: 'charge_accounts_update_column' });
  },
  get charge_accounts_var_pop_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_var_pop_fields',
        extension: ((extensions as any) || {}).charge_accounts_var_pop_fields,
      }
    );
  },
  get charge_accounts_var_pop_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_var_pop_order_by' }
    );
  },
  get charge_accounts_var_samp_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_var_samp_fields',
        extension: ((extensions as any) || {}).charge_accounts_var_samp_fields,
      }
    );
  },
  get charge_accounts_var_samp_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_var_samp_order_by' }
    );
  },
  get charge_accounts_variance_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_accounts_variance_fields',
        extension: ((extensions as any) || {}).charge_accounts_variance_fields,
      }
    );
  },
  get charge_accounts_variance_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_accounts_variance_order_by' }
    );
  },
  get charge_line_items() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge() {
          return new FieldNode(schema.charges, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'charge_line_items',
        extension: ((extensions as any) || {}).charge_line_items,
      }
    );
  },
  get charge_line_items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.charge_line_items_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.charge_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charge_line_items_aggregate',
        extension: ((extensions as any) || {}).charge_line_items_aggregate,
      }
    );
  },
  get charge_line_items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.charge_line_items_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.charge_line_items_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.charge_line_items_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.charge_line_items_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.charge_line_items_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.charge_line_items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.charge_line_items_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.charge_line_items_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.charge_line_items_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.charge_line_items_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'charge_line_items_aggregate_fields',
        extension: ((extensions as any) || {})
          .charge_line_items_aggregate_fields,
      }
    );
  },
  get charge_line_items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.charge_line_items_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.charge_line_items_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.charge_line_items_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.charge_line_items_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.charge_line_items_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.charge_line_items_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.charge_line_items_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.charge_line_items_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.charge_line_items_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.charge_line_items_variance_order_by,
            true
          );
        },
      },
      { name: 'charge_line_items_aggregate_order_by' }
    );
  },
  get charge_line_items_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'charge_line_items_append_input' }
    );
  },
  get charge_line_items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.charge_line_items_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.charge_line_items_on_conflict, true);
        },
      },
      { name: 'charge_line_items_arr_rel_insert_input' }
    );
  },
  get charge_line_items_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_avg_fields',
        extension: ((extensions as any) || {}).charge_line_items_avg_fields,
      }
    );
  },
  get charge_line_items_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_avg_order_by' }
    );
  },
  get charge_line_items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.charge_line_items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.charge_line_items_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.charge_line_items_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'charge_line_items_bool_exp' }
    );
  },
  get charge_line_items_constraint() {
    return new EnumNode({ name: 'charge_line_items_constraint' });
  },
  get charge_line_items_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'charge_line_items_delete_at_path_input' }
    );
  },
  get charge_line_items_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_line_items_delete_elem_input' }
    );
  },
  get charge_line_items_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'charge_line_items_delete_key_input' }
    );
  },
  get charge_line_items_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charge_line_items_inc_input' }
    );
  },
  get charge_line_items_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_obj_rel_insert_input, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'charge_line_items_insert_input' }
    );
  },
  get charge_line_items_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'charge_line_items_max_fields',
        extension: ((extensions as any) || {}).charge_line_items_max_fields,
      }
    );
  },
  get charge_line_items_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_max_order_by' }
    );
  },
  get charge_line_items_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'charge_line_items_min_fields',
        extension: ((extensions as any) || {}).charge_line_items_min_fields,
      }
    );
  },
  get charge_line_items_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_min_order_by' }
    );
  },
  get charge_line_items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.charge_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charge_line_items_mutation_response',
        extension: ((extensions as any) || {})
          .charge_line_items_mutation_response,
      }
    );
  },
  get charge_line_items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.charge_line_items_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.charge_line_items_on_conflict, true);
        },
      },
      { name: 'charge_line_items_obj_rel_insert_input' }
    );
  },
  get charge_line_items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.charge_line_items_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.charge_line_items_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.charge_line_items_bool_exp, true);
        },
      },
      { name: 'charge_line_items_on_conflict' }
    );
  },
  get charge_line_items_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_order_by' }
    );
  },
  get charge_line_items_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'charge_line_items_pk_columns_input' }
    );
  },
  get charge_line_items_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'charge_line_items_prepend_input' }
    );
  },
  get charge_line_items_select_column() {
    return new EnumNode({ name: 'charge_line_items_select_column' });
  },
  get charge_line_items_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'charge_line_items_set_input' }
    );
  },
  get charge_line_items_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_stddev_fields',
        extension: ((extensions as any) || {}).charge_line_items_stddev_fields,
      }
    );
  },
  get charge_line_items_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_stddev_order_by' }
    );
  },
  get charge_line_items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .charge_line_items_stddev_pop_fields,
      }
    );
  },
  get charge_line_items_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_stddev_pop_order_by' }
    );
  },
  get charge_line_items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .charge_line_items_stddev_samp_fields,
      }
    );
  },
  get charge_line_items_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_stddev_samp_order_by' }
    );
  },
  get charge_line_items_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charge_line_items_sum_fields',
        extension: ((extensions as any) || {}).charge_line_items_sum_fields,
      }
    );
  },
  get charge_line_items_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_sum_order_by' }
    );
  },
  get charge_line_items_update_column() {
    return new EnumNode({ name: 'charge_line_items_update_column' });
  },
  get charge_line_items_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_var_pop_fields',
        extension: ((extensions as any) || {}).charge_line_items_var_pop_fields,
      }
    );
  },
  get charge_line_items_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_var_pop_order_by' }
    );
  },
  get charge_line_items_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_var_samp_fields',
        extension: ((extensions as any) || {})
          .charge_line_items_var_samp_fields,
      }
    );
  },
  get charge_line_items_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_var_samp_order_by' }
    );
  },
  get charge_line_items_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charge_line_items_variance_fields',
        extension: ((extensions as any) || {})
          .charge_line_items_variance_fields,
      }
    );
  },
  get charge_line_items_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charge_line_items_variance_order_by' }
    );
  },
  get charges() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get capturable() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get captured() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get charge_account() {
          return new FieldNode(schema.charge_accounts, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_line_items() {
          return new FieldNode(
            new ArrayNode(schema.charge_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_line_items_aggregate() {
          return new FieldNode(
            schema.charge_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get refunds() {
          return new FieldNode(
            new ArrayNode(schema.refunds, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get refunds_aggregate() {
          return new FieldNode(
            schema.refunds_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements() {
          return new FieldNode(
            new ArrayNode(schema.reimbursements, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements_aggregate() {
          return new FieldNode(
            schema.reimbursements_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfers_v2s() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      { name: 'charges', extension: ((extensions as any) || {}).charges }
    );
  },
  get charges_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.charges_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charges_aggregate',
        extension: ((extensions as any) || {}).charges_aggregate,
      }
    );
  },
  get charges_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.charges_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.charges_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.charges_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.charges_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.charges_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.charges_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.charges_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.charges_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.charges_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.charges_variance_fields, undefined, true);
        },
      },
      {
        name: 'charges_aggregate_fields',
        extension: ((extensions as any) || {}).charges_aggregate_fields,
      }
    );
  },
  get charges_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.charges_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.charges_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.charges_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.charges_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.charges_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.charges_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.charges_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.charges_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.charges_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.charges_variance_order_by, true);
        },
      },
      { name: 'charges_aggregate_order_by' }
    );
  },
  get charges_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.charges_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.charges_on_conflict, true);
        },
      },
      { name: 'charges_arr_rel_insert_input' }
    );
  },
  get charges_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_avg_fields',
        extension: ((extensions as any) || {}).charges_avg_fields,
      }
    );
  },
  get charges_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_avg_order_by' }
    );
  },
  get charges_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.charges_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.charges_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get capturable() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get captured() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get charge_account() {
          return new InputNodeField(schema.charge_accounts_bool_exp, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get charge_line_items() {
          return new InputNodeField(schema.charge_line_items_bool_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get refunds() {
          return new InputNodeField(schema.refunds_bool_exp, true);
        },
        get reimbursements() {
          return new InputNodeField(schema.reimbursements_bool_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get transfers_v2s() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'charges_bool_exp' }
    );
  },
  get charges_constraint() {
    return new EnumNode({ name: 'charges_constraint' });
  },
  get charges_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charges_inc_input' }
    );
  },
  get charges_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get capturable() {
          return new InputNodeField(schema.Boolean, true);
        },
        get captured() {
          return new InputNodeField(schema.Boolean, true);
        },
        get charge_account() {
          return new InputNodeField(
            schema.charge_accounts_obj_rel_insert_input,
            true
          );
        },
        get charge_account_id() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_line_items() {
          return new InputNodeField(
            schema.charge_line_items_arr_rel_insert_input,
            true
          );
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get refunds() {
          return new InputNodeField(schema.refunds_arr_rel_insert_input, true);
        },
        get reimbursements() {
          return new InputNodeField(
            schema.reimbursements_arr_rel_insert_input,
            true
          );
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transfers_v2s() {
          return new InputNodeField(
            schema.transfers_v2_arr_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charges_insert_input' }
    );
  },
  get charges_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charges_max_fields',
        extension: ((extensions as any) || {}).charges_max_fields,
      }
    );
  },
  get charges_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_max_order_by' }
    );
  },
  get charges_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charges_min_fields',
        extension: ((extensions as any) || {}).charges_min_fields,
      }
    );
  },
  get charges_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_min_order_by' }
    );
  },
  get charges_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'charges_mutation_response',
        extension: ((extensions as any) || {}).charges_mutation_response,
      }
    );
  },
  get charges_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.charges_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.charges_on_conflict, true);
        },
      },
      { name: 'charges_obj_rel_insert_input' }
    );
  },
  get charges_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.charges_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.charges_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
      },
      { name: 'charges_on_conflict' }
    );
  },
  get charges_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get capturable() {
          return new InputNodeField(schema.order_by, true);
        },
        get captured() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account() {
          return new InputNodeField(schema.charge_accounts_order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_line_items_aggregate() {
          return new InputNodeField(
            schema.charge_line_items_aggregate_order_by,
            true
          );
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunds_aggregate() {
          return new InputNodeField(schema.refunds_aggregate_order_by, true);
        },
        get reimbursements_aggregate() {
          return new InputNodeField(
            schema.reimbursements_aggregate_order_by,
            true
          );
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_v2s_aggregate() {
          return new InputNodeField(
            schema.transfers_v2_aggregate_order_by,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_order_by' }
    );
  },
  get charges_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'charges_pk_columns_input' }
    );
  },
  get charges_select_column() {
    return new EnumNode({ name: 'charges_select_column' });
  },
  get charges_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get capturable() {
          return new InputNodeField(schema.Boolean, true);
        },
        get captured() {
          return new InputNodeField(schema.Boolean, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.Int, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'charges_set_input' }
    );
  },
  get charges_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_stddev_fields',
        extension: ((extensions as any) || {}).charges_stddev_fields,
      }
    );
  },
  get charges_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_stddev_order_by' }
    );
  },
  get charges_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_stddev_pop_fields',
        extension: ((extensions as any) || {}).charges_stddev_pop_fields,
      }
    );
  },
  get charges_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_stddev_pop_order_by' }
    );
  },
  get charges_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_stddev_samp_fields',
        extension: ((extensions as any) || {}).charges_stddev_samp_fields,
      }
    );
  },
  get charges_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_stddev_samp_order_by' }
    );
  },
  get charges_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'charges_sum_fields',
        extension: ((extensions as any) || {}).charges_sum_fields,
      }
    );
  },
  get charges_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_sum_order_by' }
    );
  },
  get charges_update_column() {
    return new EnumNode({ name: 'charges_update_column' });
  },
  get charges_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_var_pop_fields',
        extension: ((extensions as any) || {}).charges_var_pop_fields,
      }
    );
  },
  get charges_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_var_pop_order_by' }
    );
  },
  get charges_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_var_samp_fields',
        extension: ((extensions as any) || {}).charges_var_samp_fields,
      }
    );
  },
  get charges_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_var_samp_order_by' }
    );
  },
  get charges_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'charges_variance_fields',
        extension: ((extensions as any) || {}).charges_variance_fields,
      }
    );
  },
  get charges_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'charges_variance_order_by' }
    );
  },
  get chats() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get participant_ids() {
          return new FieldNode(schema._int4, undefined, true);
        },
      },
      { name: 'chats', extension: ((extensions as any) || {}).chats }
    );
  },
  get chats_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.chats_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.chats, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'chats_aggregate',
        extension: ((extensions as any) || {}).chats_aggregate,
      }
    );
  },
  get chats_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.chats_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.chats_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.chats_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.chats_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.chats_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(
            schema.chats_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.chats_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.chats_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.chats_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.chats_variance_fields, undefined, true);
        },
      },
      {
        name: 'chats_aggregate_fields',
        extension: ((extensions as any) || {}).chats_aggregate_fields,
      }
    );
  },
  get chats_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.chats_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.chats_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.chats_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.chats_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.chats_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.chats_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.chats_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.chats_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.chats_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.chats_variance_order_by, true);
        },
      },
      { name: 'chats_aggregate_order_by' }
    );
  },
  get chats_avg_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_avg_fields',
        extension: ((extensions as any) || {}).chats_avg_fields,
      }
    );
  },
  get chats_avg_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_avg_order_by' }
    );
  },
  get chats_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.chats_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.chats_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.chats_bool_exp, true),
            true
          );
        },
        get latest_message_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get participant_ids() {
          return new InputNodeField(schema._int4_comparison_exp, true);
        },
      },
      { name: 'chats_bool_exp' }
    );
  },
  get chats_max_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'chats_max_fields',
        extension: ((extensions as any) || {}).chats_max_fields,
      }
    );
  },
  get chats_max_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_max_order_by' }
    );
  },
  get chats_min_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'chats_min_fields',
        extension: ((extensions as any) || {}).chats_min_fields,
      }
    );
  },
  get chats_min_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_min_order_by' }
    );
  },
  get chats_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get participant_ids() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_order_by' }
    );
  },
  get chats_select_column() {
    return new EnumNode({ name: 'chats_select_column' });
  },
  get chats_stddev_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_stddev_fields',
        extension: ((extensions as any) || {}).chats_stddev_fields,
      }
    );
  },
  get chats_stddev_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_stddev_order_by' }
    );
  },
  get chats_stddev_pop_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_stddev_pop_fields',
        extension: ((extensions as any) || {}).chats_stddev_pop_fields,
      }
    );
  },
  get chats_stddev_pop_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_stddev_pop_order_by' }
    );
  },
  get chats_stddev_samp_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_stddev_samp_fields',
        extension: ((extensions as any) || {}).chats_stddev_samp_fields,
      }
    );
  },
  get chats_stddev_samp_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_stddev_samp_order_by' }
    );
  },
  get chats_sum_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'chats_sum_fields',
        extension: ((extensions as any) || {}).chats_sum_fields,
      }
    );
  },
  get chats_sum_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_sum_order_by' }
    );
  },
  get chats_var_pop_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_var_pop_fields',
        extension: ((extensions as any) || {}).chats_var_pop_fields,
      }
    );
  },
  get chats_var_pop_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_var_pop_order_by' }
    );
  },
  get chats_var_samp_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_var_samp_fields',
        extension: ((extensions as any) || {}).chats_var_samp_fields,
      }
    );
  },
  get chats_var_samp_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_var_samp_order_by' }
    );
  },
  get chats_variance_fields() {
    return new ObjectNode(
      {
        get latest_message_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'chats_variance_fields',
        extension: ((extensions as any) || {}).chats_variance_fields,
      }
    );
  },
  get chats_variance_order_by() {
    return new InputNode(
      {
        get latest_message_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'chats_variance_order_by' }
    );
  },
  get credit_transactions() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get credit_transaction() {
          return new FieldNode(schema.credit_transactions, undefined, true);
        },
        get credit_transactions() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expires_on() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get referralCodeByReferredByCodeId() {
          return new FieldNode(schema.referral_codes, undefined, true);
        },
        get referral_code() {
          return new FieldNode(schema.referral_codes, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservationByReservationId() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, false);
        },
      },
      {
        name: 'credit_transactions',
        extension: ((extensions as any) || {}).credit_transactions,
      }
    );
  },
  get credit_transactions_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'credit_transactions_aggregate',
        extension: ((extensions as any) || {}).credit_transactions_aggregate,
      }
    );
  },
  get credit_transactions_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.credit_transactions_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.credit_transactions_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.credit_transactions_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.credit_transactions_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.credit_transactions_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.credit_transactions_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.credit_transactions_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.credit_transactions_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.credit_transactions_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.credit_transactions_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'credit_transactions_aggregate_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_aggregate_fields,
      }
    );
  },
  get credit_transactions_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.credit_transactions_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.credit_transactions_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.credit_transactions_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.credit_transactions_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.credit_transactions_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.credit_transactions_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.credit_transactions_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.credit_transactions_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.credit_transactions_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.credit_transactions_variance_order_by,
            true
          );
        },
      },
      { name: 'credit_transactions_aggregate_order_by' }
    );
  },
  get credit_transactions_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.credit_transactions_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.credit_transactions_on_conflict,
            true
          );
        },
      },
      { name: 'credit_transactions_arr_rel_insert_input' }
    );
  },
  get credit_transactions_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_avg_fields',
        extension: ((extensions as any) || {}).credit_transactions_avg_fields,
      }
    );
  },
  get credit_transactions_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_avg_order_by' }
    );
  },
  get credit_transactions_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.credit_transactions_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.credit_transactions_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get credit_transaction() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get credit_transactions() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get expires_on() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get referralCodeByReferredByCodeId() {
          return new InputNodeField(schema.referral_codes_bool_exp, true);
        },
        get referral_code() {
          return new InputNodeField(schema.referral_codes_bool_exp, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservationByReservationId() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'credit_transactions_bool_exp' }
    );
  },
  get credit_transactions_constraint() {
    return new EnumNode({ name: 'credit_transactions_constraint' });
  },
  get credit_transactions_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'credit_transactions_inc_input' }
    );
  },
  get credit_transactions_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get code() {
          return new InputNodeField(schema.String, true);
        },
        get credit_transaction() {
          return new InputNodeField(
            schema.credit_transactions_obj_rel_insert_input,
            true
          );
        },
        get credit_transactions() {
          return new InputNodeField(
            schema.credit_transactions_arr_rel_insert_input,
            true
          );
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get expires_on() {
          return new InputNodeField(schema.date, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get referralCodeByReferredByCodeId() {
          return new InputNodeField(
            schema.referral_codes_obj_rel_insert_input,
            true
          );
        },
        get referral_code() {
          return new InputNodeField(
            schema.referral_codes_obj_rel_insert_input,
            true
          );
        },
        get referral_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservationByReservationId() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'credit_transactions_insert_input' }
    );
  },
  get credit_transactions_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expires_on() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'credit_transactions_max_fields',
        extension: ((extensions as any) || {}).credit_transactions_max_fields,
      }
    );
  },
  get credit_transactions_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expires_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_max_order_by' }
    );
  },
  get credit_transactions_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expires_on() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'credit_transactions_min_fields',
        extension: ((extensions as any) || {}).credit_transactions_min_fields,
      }
    );
  },
  get credit_transactions_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expires_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_min_order_by' }
    );
  },
  get credit_transactions_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'credit_transactions_mutation_response',
        extension: ((extensions as any) || {})
          .credit_transactions_mutation_response,
      }
    );
  },
  get credit_transactions_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.credit_transactions_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.credit_transactions_on_conflict,
            true
          );
        },
      },
      { name: 'credit_transactions_obj_rel_insert_input' }
    );
  },
  get credit_transactions_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.credit_transactions_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.credit_transactions_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
      },
      { name: 'credit_transactions_on_conflict' }
    );
  },
  get credit_transactions_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_transaction() {
          return new InputNodeField(schema.credit_transactions_order_by, true);
        },
        get credit_transactions_aggregate() {
          return new InputNodeField(
            schema.credit_transactions_aggregate_order_by,
            true
          );
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expires_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get referralCodeByReferredByCodeId() {
          return new InputNodeField(schema.referral_codes_order_by, true);
        },
        get referral_code() {
          return new InputNodeField(schema.referral_codes_order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservationByReservationId() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_order_by' }
    );
  },
  get credit_transactions_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'credit_transactions_pk_columns_input' }
    );
  },
  get credit_transactions_select_column() {
    return new EnumNode({ name: 'credit_transactions_select_column' });
  },
  get credit_transactions_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get code() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get expires_on() {
          return new InputNodeField(schema.date, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'credit_transactions_set_input' }
    );
  },
  get credit_transactions_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_stddev_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_stddev_fields,
      }
    );
  },
  get credit_transactions_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_stddev_order_by' }
    );
  },
  get credit_transactions_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_stddev_pop_fields,
      }
    );
  },
  get credit_transactions_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_stddev_pop_order_by' }
    );
  },
  get credit_transactions_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_stddev_samp_fields,
      }
    );
  },
  get credit_transactions_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_stddev_samp_order_by' }
    );
  },
  get credit_transactions_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'credit_transactions_sum_fields',
        extension: ((extensions as any) || {}).credit_transactions_sum_fields,
      }
    );
  },
  get credit_transactions_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_sum_order_by' }
    );
  },
  get credit_transactions_update_column() {
    return new EnumNode({ name: 'credit_transactions_update_column' });
  },
  get credit_transactions_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_var_pop_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_var_pop_fields,
      }
    );
  },
  get credit_transactions_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_var_pop_order_by' }
    );
  },
  get credit_transactions_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_var_samp_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_var_samp_fields,
      }
    );
  },
  get credit_transactions_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_var_samp_order_by' }
    );
  },
  get credit_transactions_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referral_reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get referred_by_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get refunded_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'credit_transactions_variance_fields',
        extension: ((extensions as any) || {})
          .credit_transactions_variance_fields,
      }
    );
  },
  get credit_transactions_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get referred_by_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunded_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'credit_transactions_variance_order_by' }
    );
  },
  get daily_statistics() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get earned_on() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get stats_approved_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_approved_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_approved_reservations_aggregate() {
          return new FieldNode(
            schema.stats_approved_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_cancelled_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations_aggregate() {
          return new FieldNode(
            schema.stats_cancelled_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_completed_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations_aggregate() {
          return new FieldNode(
            schema.stats_completed_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_denied_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations_aggregate() {
          return new FieldNode(
            schema.stats_denied_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_items() {
          return new FieldNode(
            new ArrayNode(schema.stats_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_items_aggregate() {
          return new FieldNode(
            schema.stats_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_requested_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_requested_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_requested_reservations_aggregate() {
          return new FieldNode(
            schema.stats_requested_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_returned_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations_aggregate() {
          return new FieldNode(
            schema.stats_returned_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers() {
          return new FieldNode(
            new ArrayNode(schema.stats_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers_aggregate() {
          return new FieldNode(
            schema.stats_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'daily_statistics',
        extension: ((extensions as any) || {}).daily_statistics,
      }
    );
  },
  get daily_statistics_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.daily_statistics_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.daily_statistics, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'daily_statistics_aggregate',
        extension: ((extensions as any) || {}).daily_statistics_aggregate,
      }
    );
  },
  get daily_statistics_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.daily_statistics_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.daily_statistics_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.daily_statistics_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.daily_statistics_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.daily_statistics_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.daily_statistics_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.daily_statistics_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.daily_statistics_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.daily_statistics_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.daily_statistics_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'daily_statistics_aggregate_fields',
        extension: ((extensions as any) || {})
          .daily_statistics_aggregate_fields,
      }
    );
  },
  get daily_statistics_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.daily_statistics_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.daily_statistics_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.daily_statistics_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.daily_statistics_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.daily_statistics_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.daily_statistics_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.daily_statistics_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.daily_statistics_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.daily_statistics_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.daily_statistics_variance_order_by,
            true
          );
        },
      },
      { name: 'daily_statistics_aggregate_order_by' }
    );
  },
  get daily_statistics_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.daily_statistics_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.daily_statistics_on_conflict, true);
        },
      },
      { name: 'daily_statistics_arr_rel_insert_input' }
    );
  },
  get daily_statistics_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_avg_fields',
        extension: ((extensions as any) || {}).daily_statistics_avg_fields,
      }
    );
  },
  get daily_statistics_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_avg_order_by' }
    );
  },
  get daily_statistics_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.daily_statistics_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.daily_statistics_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get earned_on() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get stats_approved_reservations() {
          return new InputNodeField(
            schema.stats_approved_reservations_bool_exp,
            true
          );
        },
        get stats_cancelled_reservations() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_bool_exp,
            true
          );
        },
        get stats_completed_reservations() {
          return new InputNodeField(
            schema.stats_completed_reservations_bool_exp,
            true
          );
        },
        get stats_denied_reservations() {
          return new InputNodeField(
            schema.stats_denied_reservations_bool_exp,
            true
          );
        },
        get stats_items() {
          return new InputNodeField(schema.stats_items_bool_exp, true);
        },
        get stats_requested_reservations() {
          return new InputNodeField(
            schema.stats_requested_reservations_bool_exp,
            true
          );
        },
        get stats_returned_reservations() {
          return new InputNodeField(
            schema.stats_returned_reservations_bool_exp,
            true
          );
        },
        get stats_transfers() {
          return new InputNodeField(schema.stats_transfers_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'daily_statistics_bool_exp' }
    );
  },
  get daily_statistics_constraint() {
    return new EnumNode({ name: 'daily_statistics_constraint' });
  },
  get daily_statistics_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'daily_statistics_inc_input' }
    );
  },
  get daily_statistics_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get earned_on() {
          return new InputNodeField(schema.date, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get stats_approved_reservations() {
          return new InputNodeField(
            schema.stats_approved_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_cancelled_reservations() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_completed_reservations() {
          return new InputNodeField(
            schema.stats_completed_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_denied_reservations() {
          return new InputNodeField(
            schema.stats_denied_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_items() {
          return new InputNodeField(
            schema.stats_items_arr_rel_insert_input,
            true
          );
        },
        get stats_requested_reservations() {
          return new InputNodeField(
            schema.stats_requested_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_returned_reservations() {
          return new InputNodeField(
            schema.stats_returned_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_transfers() {
          return new InputNodeField(
            schema.stats_transfers_arr_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'daily_statistics_insert_input' }
    );
  },
  get daily_statistics_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get earned_on() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'daily_statistics_max_fields',
        extension: ((extensions as any) || {}).daily_statistics_max_fields,
      }
    );
  },
  get daily_statistics_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get earned_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_max_order_by' }
    );
  },
  get daily_statistics_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get earned_on() {
          return new FieldNode(schema.date, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'daily_statistics_min_fields',
        extension: ((extensions as any) || {}).daily_statistics_min_fields,
      }
    );
  },
  get daily_statistics_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get earned_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_min_order_by' }
    );
  },
  get daily_statistics_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.daily_statistics, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'daily_statistics_mutation_response',
        extension: ((extensions as any) || {})
          .daily_statistics_mutation_response,
      }
    );
  },
  get daily_statistics_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.daily_statistics_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.daily_statistics_on_conflict, true);
        },
      },
      { name: 'daily_statistics_obj_rel_insert_input' }
    );
  },
  get daily_statistics_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.daily_statistics_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.daily_statistics_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
      },
      { name: 'daily_statistics_on_conflict' }
    );
  },
  get daily_statistics_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get earned_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get stats_approved_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_approved_reservations_aggregate_order_by,
            true
          );
        },
        get stats_cancelled_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_aggregate_order_by,
            true
          );
        },
        get stats_completed_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_completed_reservations_aggregate_order_by,
            true
          );
        },
        get stats_denied_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_denied_reservations_aggregate_order_by,
            true
          );
        },
        get stats_items_aggregate() {
          return new InputNodeField(
            schema.stats_items_aggregate_order_by,
            true
          );
        },
        get stats_requested_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_requested_reservations_aggregate_order_by,
            true
          );
        },
        get stats_returned_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_returned_reservations_aggregate_order_by,
            true
          );
        },
        get stats_transfers_aggregate() {
          return new InputNodeField(
            schema.stats_transfers_aggregate_order_by,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_order_by' }
    );
  },
  get daily_statistics_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'daily_statistics_pk_columns_input' }
    );
  },
  get daily_statistics_select_column() {
    return new EnumNode({ name: 'daily_statistics_select_column' });
  },
  get daily_statistics_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get earned_on() {
          return new InputNodeField(schema.date, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'daily_statistics_set_input' }
    );
  },
  get daily_statistics_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_stddev_fields',
        extension: ((extensions as any) || {}).daily_statistics_stddev_fields,
      }
    );
  },
  get daily_statistics_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_stddev_order_by' }
    );
  },
  get daily_statistics_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .daily_statistics_stddev_pop_fields,
      }
    );
  },
  get daily_statistics_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_stddev_pop_order_by' }
    );
  },
  get daily_statistics_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .daily_statistics_stddev_samp_fields,
      }
    );
  },
  get daily_statistics_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_stddev_samp_order_by' }
    );
  },
  get daily_statistics_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'daily_statistics_sum_fields',
        extension: ((extensions as any) || {}).daily_statistics_sum_fields,
      }
    );
  },
  get daily_statistics_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_sum_order_by' }
    );
  },
  get daily_statistics_update_column() {
    return new EnumNode({ name: 'daily_statistics_update_column' });
  },
  get daily_statistics_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_var_pop_fields',
        extension: ((extensions as any) || {}).daily_statistics_var_pop_fields,
      }
    );
  },
  get daily_statistics_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_var_pop_order_by' }
    );
  },
  get daily_statistics_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_var_samp_fields',
        extension: ((extensions as any) || {}).daily_statistics_var_samp_fields,
      }
    );
  },
  get daily_statistics_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_var_samp_order_by' }
    );
  },
  get daily_statistics_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get approved_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get completed_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get denied_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requested_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get returned_reservation_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'daily_statistics_variance_fields',
        extension: ((extensions as any) || {}).daily_statistics_variance_fields,
      }
    );
  },
  get daily_statistics_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requested_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_reservation_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'daily_statistics_variance_order_by' }
    );
  },
  get date() {
    return new ScalarNode({
      name: 'date',
      extension: ((extensions as any) || {}).date,
    });
  },
  get date_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.date, true);
        },
        get _gt() {
          return new InputNodeField(schema.date, true);
        },
        get _gte() {
          return new InputNodeField(schema.date, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.date, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.date, true);
        },
        get _lte() {
          return new InputNodeField(schema.date, true);
        },
        get _neq() {
          return new InputNodeField(schema.date, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.date, true), true);
        },
      },
      { name: 'date_comparison_exp' }
    );
  },
  get dodge_fleet_orders() {
    return new ObjectNode(
      {
        get body_model() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get customer_fleet_account_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estimated_delivery_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fmc_fleet_account_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get kzx_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get order_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get order_dealer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ship_dealer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get updated_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vin() {
          return new FieldNode(schema.String, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Int, undefined, false);
        },
      },
      {
        name: 'dodge_fleet_orders',
        extension: ((extensions as any) || {}).dodge_fleet_orders,
      }
    );
  },
  get dodge_fleet_orders_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.dodge_fleet_orders_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.dodge_fleet_orders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'dodge_fleet_orders_aggregate',
        extension: ((extensions as any) || {}).dodge_fleet_orders_aggregate,
      }
    );
  },
  get dodge_fleet_orders_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.dodge_fleet_orders_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.dodge_fleet_orders_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.dodge_fleet_orders_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.dodge_fleet_orders_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.dodge_fleet_orders_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.dodge_fleet_orders_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.dodge_fleet_orders_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.dodge_fleet_orders_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.dodge_fleet_orders_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.dodge_fleet_orders_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'dodge_fleet_orders_aggregate_fields',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_aggregate_fields,
      }
    );
  },
  get dodge_fleet_orders_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.dodge_fleet_orders_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.dodge_fleet_orders_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.dodge_fleet_orders_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.dodge_fleet_orders_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.dodge_fleet_orders_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.dodge_fleet_orders_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.dodge_fleet_orders_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.dodge_fleet_orders_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.dodge_fleet_orders_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.dodge_fleet_orders_variance_order_by,
            true
          );
        },
      },
      { name: 'dodge_fleet_orders_aggregate_order_by' }
    );
  },
  get dodge_fleet_orders_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.dodge_fleet_orders_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.dodge_fleet_orders_on_conflict,
            true
          );
        },
      },
      { name: 'dodge_fleet_orders_arr_rel_insert_input' }
    );
  },
  get dodge_fleet_orders_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_avg_fields',
        extension: ((extensions as any) || {}).dodge_fleet_orders_avg_fields,
      }
    );
  },
  get dodge_fleet_orders_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_avg_order_by' }
    );
  },
  get dodge_fleet_orders_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.dodge_fleet_orders_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.dodge_fleet_orders_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.dodge_fleet_orders_bool_exp, true),
            true
          );
        },
        get body_model() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get created_on() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get customer_fleet_account_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get estimated_delivery_date() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get fmc_fleet_account_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get kzx_date() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get model_year() {
          return new InputNodeField(schema.smallint_comparison_exp, true);
        },
        get order_date() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get order_dealer() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ship_dealer() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status_date() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get updated_on() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get vin() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get von() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'dodge_fleet_orders_bool_exp' }
    );
  },
  get dodge_fleet_orders_constraint() {
    return new EnumNode({ name: 'dodge_fleet_orders_constraint' });
  },
  get dodge_fleet_orders_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get model_year() {
          return new InputNodeField(schema.smallint, true);
        },
        get von() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'dodge_fleet_orders_inc_input' }
    );
  },
  get dodge_fleet_orders_insert_input() {
    return new InputNode(
      {
        get body_model() {
          return new InputNodeField(schema.String, true);
        },
        get created_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get customer_fleet_account_number() {
          return new InputNodeField(schema.String, true);
        },
        get estimated_delivery_date() {
          return new InputNodeField(schema.date, true);
        },
        get fmc_fleet_account_number() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get kzx_date() {
          return new InputNodeField(schema.date, true);
        },
        get model_year() {
          return new InputNodeField(schema.smallint, true);
        },
        get order_date() {
          return new InputNodeField(schema.date, true);
        },
        get order_dealer() {
          return new InputNodeField(schema.String, true);
        },
        get ship_dealer() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get status_date() {
          return new InputNodeField(schema.date, true);
        },
        get updated_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get vin() {
          return new InputNodeField(schema.String, true);
        },
        get von() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'dodge_fleet_orders_insert_input' }
    );
  },
  get dodge_fleet_orders_max_fields() {
    return new ObjectNode(
      {
        get body_model() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get customer_fleet_account_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estimated_delivery_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fmc_fleet_account_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get kzx_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get order_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get order_dealer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ship_dealer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get updated_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vin() {
          return new FieldNode(schema.String, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_max_fields',
        extension: ((extensions as any) || {}).dodge_fleet_orders_max_fields,
      }
    );
  },
  get dodge_fleet_orders_max_order_by() {
    return new InputNode(
      {
        get body_model() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_fleet_account_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_delivery_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get fmc_fleet_account_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get kzx_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get order_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get order_dealer() {
          return new InputNodeField(schema.order_by, true);
        },
        get ship_dealer() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get status_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get vin() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_max_order_by' }
    );
  },
  get dodge_fleet_orders_min_fields() {
    return new ObjectNode(
      {
        get body_model() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get customer_fleet_account_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get estimated_delivery_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get fmc_fleet_account_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get kzx_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get order_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get order_dealer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ship_dealer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get updated_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vin() {
          return new FieldNode(schema.String, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_min_fields',
        extension: ((extensions as any) || {}).dodge_fleet_orders_min_fields,
      }
    );
  },
  get dodge_fleet_orders_min_order_by() {
    return new InputNode(
      {
        get body_model() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_fleet_account_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_delivery_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get fmc_fleet_account_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get kzx_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get order_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get order_dealer() {
          return new InputNodeField(schema.order_by, true);
        },
        get ship_dealer() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get status_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get vin() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_min_order_by' }
    );
  },
  get dodge_fleet_orders_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.dodge_fleet_orders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'dodge_fleet_orders_mutation_response',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_mutation_response,
      }
    );
  },
  get dodge_fleet_orders_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.dodge_fleet_orders_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.dodge_fleet_orders_on_conflict,
            true
          );
        },
      },
      { name: 'dodge_fleet_orders_obj_rel_insert_input' }
    );
  },
  get dodge_fleet_orders_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.dodge_fleet_orders_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.dodge_fleet_orders_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.dodge_fleet_orders_bool_exp, true);
        },
      },
      { name: 'dodge_fleet_orders_on_conflict' }
    );
  },
  get dodge_fleet_orders_order_by() {
    return new InputNode(
      {
        get body_model() {
          return new InputNodeField(schema.order_by, true);
        },
        get created_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_fleet_account_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_delivery_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get fmc_fleet_account_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get kzx_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get order_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get order_dealer() {
          return new InputNodeField(schema.order_by, true);
        },
        get ship_dealer() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get status_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get vin() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_order_by' }
    );
  },
  get dodge_fleet_orders_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'dodge_fleet_orders_pk_columns_input' }
    );
  },
  get dodge_fleet_orders_select_column() {
    return new EnumNode({ name: 'dodge_fleet_orders_select_column' });
  },
  get dodge_fleet_orders_set_input() {
    return new InputNode(
      {
        get body_model() {
          return new InputNodeField(schema.String, true);
        },
        get created_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get customer_fleet_account_number() {
          return new InputNodeField(schema.String, true);
        },
        get estimated_delivery_date() {
          return new InputNodeField(schema.date, true);
        },
        get fmc_fleet_account_number() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get kzx_date() {
          return new InputNodeField(schema.date, true);
        },
        get model_year() {
          return new InputNodeField(schema.smallint, true);
        },
        get order_date() {
          return new InputNodeField(schema.date, true);
        },
        get order_dealer() {
          return new InputNodeField(schema.String, true);
        },
        get ship_dealer() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get status_date() {
          return new InputNodeField(schema.date, true);
        },
        get updated_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get vin() {
          return new InputNodeField(schema.String, true);
        },
        get von() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'dodge_fleet_orders_set_input' }
    );
  },
  get dodge_fleet_orders_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_stddev_fields',
        extension: ((extensions as any) || {}).dodge_fleet_orders_stddev_fields,
      }
    );
  },
  get dodge_fleet_orders_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_stddev_order_by' }
    );
  },
  get dodge_fleet_orders_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_stddev_pop_fields,
      }
    );
  },
  get dodge_fleet_orders_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_stddev_pop_order_by' }
    );
  },
  get dodge_fleet_orders_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_stddev_samp_fields,
      }
    );
  },
  get dodge_fleet_orders_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_stddev_samp_order_by' }
    );
  },
  get dodge_fleet_orders_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.smallint, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_sum_fields',
        extension: ((extensions as any) || {}).dodge_fleet_orders_sum_fields,
      }
    );
  },
  get dodge_fleet_orders_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_sum_order_by' }
    );
  },
  get dodge_fleet_orders_update_column() {
    return new EnumNode({ name: 'dodge_fleet_orders_update_column' });
  },
  get dodge_fleet_orders_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_var_pop_fields',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_var_pop_fields,
      }
    );
  },
  get dodge_fleet_orders_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_var_pop_order_by' }
    );
  },
  get dodge_fleet_orders_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_var_samp_fields',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_var_samp_fields,
      }
    );
  },
  get dodge_fleet_orders_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_var_samp_order_by' }
    );
  },
  get dodge_fleet_orders_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get model_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get von() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'dodge_fleet_orders_variance_fields',
        extension: ((extensions as any) || {})
          .dodge_fleet_orders_variance_fields,
      }
    );
  },
  get dodge_fleet_orders_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get von() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'dodge_fleet_orders_variance_order_by' }
    );
  },
  get external_accounts() {
    return new ObjectNode(
      {
        get account() {
          return new FieldNode(schema.String, undefined, true);
        },
        get account_holder_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get account_holder_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line1_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_zip() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_zip_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get charge_accounts() {
          return new FieldNode(
            new ArrayNode(schema.charge_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts_aggregate() {
          return new FieldNode(
            schema.charge_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cvc_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get dynamic_last4() {
          return new FieldNode(schema.String, undefined, true);
        },
        get exp_month() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fingerprint() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get last4() {
          return new FieldNode(schema.String, undefined, true);
        },
        get metadata() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payment_account() {
          return new FieldNode(schema.payment_accounts, undefined, true);
        },
        get payment_accounts() {
          return new FieldNode(
            new ArrayNode(schema.payment_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payment_accounts_aggregate() {
          return new FieldNode(
            schema.payment_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payouts() {
          return new FieldNode(
            new ArrayNode(schema.payouts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, true);
              },
            }),
            false
          );
        },
        get payouts_aggregate() {
          return new FieldNode(
            schema.payouts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, true);
              },
            }),
            false
          );
        },
        get routing_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tokenization_method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'external_accounts',
        extension: ((extensions as any) || {}).external_accounts,
      }
    );
  },
  get external_accounts_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.external_accounts_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.external_accounts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'external_accounts_aggregate',
        extension: ((extensions as any) || {}).external_accounts_aggregate,
      }
    );
  },
  get external_accounts_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.external_accounts_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.external_accounts_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.external_accounts_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.external_accounts_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.external_accounts_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.external_accounts_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.external_accounts_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.external_accounts_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.external_accounts_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.external_accounts_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'external_accounts_aggregate_fields',
        extension: ((extensions as any) || {})
          .external_accounts_aggregate_fields,
      }
    );
  },
  get external_accounts_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.external_accounts_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.external_accounts_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.external_accounts_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.external_accounts_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.external_accounts_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.external_accounts_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.external_accounts_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.external_accounts_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.external_accounts_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.external_accounts_variance_order_by,
            true
          );
        },
      },
      { name: 'external_accounts_aggregate_order_by' }
    );
  },
  get external_accounts_append_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'external_accounts_append_input' }
    );
  },
  get external_accounts_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.external_accounts_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.external_accounts_on_conflict, true);
        },
      },
      { name: 'external_accounts_arr_rel_insert_input' }
    );
  },
  get external_accounts_avg_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_avg_fields',
        extension: ((extensions as any) || {}).external_accounts_avg_fields,
      }
    );
  },
  get external_accounts_avg_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_avg_order_by' }
    );
  },
  get external_accounts_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.external_accounts_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.external_accounts_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.external_accounts_bool_exp, true),
            true
          );
        },
        get account() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get account_holder_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get account_holder_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_city() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_country() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_line1() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_line1_check() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_line2() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_state() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_zip() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address_zip_check() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get brand() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get charge_accounts() {
          return new InputNodeField(schema.charge_accounts_bool_exp, true);
        },
        get country() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get currency() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cvc_check() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get dynamic_last4() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get exp_month() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get exp_year() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get fingerprint() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get funding() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get last4() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get metadata() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get object() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payment_account() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
        get payment_accounts() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
        get payouts() {
          return new InputNodeField(schema.payouts_bool_exp, true);
        },
        get routing_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get tokenization_method() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'external_accounts_bool_exp' }
    );
  },
  get external_accounts_constraint() {
    return new EnumNode({ name: 'external_accounts_constraint' });
  },
  get external_accounts_delete_at_path_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'external_accounts_delete_at_path_input' }
    );
  },
  get external_accounts_delete_elem_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'external_accounts_delete_elem_input' }
    );
  },
  get external_accounts_delete_key_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'external_accounts_delete_key_input' }
    );
  },
  get external_accounts_inc_input() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.Int, true);
        },
        get exp_year() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'external_accounts_inc_input' }
    );
  },
  get external_accounts_insert_input() {
    return new InputNode(
      {
        get account() {
          return new InputNodeField(schema.String, true);
        },
        get account_holder_name() {
          return new InputNodeField(schema.String, true);
        },
        get account_holder_type() {
          return new InputNodeField(schema.String, true);
        },
        get address_city() {
          return new InputNodeField(schema.String, true);
        },
        get address_country() {
          return new InputNodeField(schema.String, true);
        },
        get address_line1() {
          return new InputNodeField(schema.String, true);
        },
        get address_line1_check() {
          return new InputNodeField(schema.String, true);
        },
        get address_line2() {
          return new InputNodeField(schema.String, true);
        },
        get address_state() {
          return new InputNodeField(schema.String, true);
        },
        get address_zip() {
          return new InputNodeField(schema.String, true);
        },
        get address_zip_check() {
          return new InputNodeField(schema.String, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get charge_accounts() {
          return new InputNodeField(
            schema.charge_accounts_arr_rel_insert_input,
            true
          );
        },
        get country() {
          return new InputNodeField(schema.String, true);
        },
        get currency() {
          return new InputNodeField(schema.String, true);
        },
        get cvc_check() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get dynamic_last4() {
          return new InputNodeField(schema.String, true);
        },
        get exp_month() {
          return new InputNodeField(schema.Int, true);
        },
        get exp_year() {
          return new InputNodeField(schema.Int, true);
        },
        get fingerprint() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last4() {
          return new InputNodeField(schema.String, true);
        },
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get object() {
          return new InputNodeField(schema.String, true);
        },
        get payment_account() {
          return new InputNodeField(
            schema.payment_accounts_obj_rel_insert_input,
            true
          );
        },
        get payment_accounts() {
          return new InputNodeField(
            schema.payment_accounts_arr_rel_insert_input,
            true
          );
        },
        get payouts() {
          return new InputNodeField(schema.payouts_arr_rel_insert_input, true);
        },
        get routing_number() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get tokenization_method() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'external_accounts_insert_input' }
    );
  },
  get external_accounts_max_fields() {
    return new ObjectNode(
      {
        get account() {
          return new FieldNode(schema.String, undefined, true);
        },
        get account_holder_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get account_holder_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line1_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_zip() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_zip_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cvc_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get dynamic_last4() {
          return new FieldNode(schema.String, undefined, true);
        },
        get exp_month() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fingerprint() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last4() {
          return new FieldNode(schema.String, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get routing_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tokenization_method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'external_accounts_max_fields',
        extension: ((extensions as any) || {}).external_accounts_max_fields,
      }
    );
  },
  get external_accounts_max_order_by() {
    return new InputNode(
      {
        get account() {
          return new InputNodeField(schema.order_by, true);
        },
        get account_holder_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get account_holder_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_city() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line1() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line1_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line2() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_state() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_zip() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_zip_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get country() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get cvc_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get dynamic_last4() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get fingerprint() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last4() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get routing_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get tokenization_method() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_max_order_by' }
    );
  },
  get external_accounts_min_fields() {
    return new ObjectNode(
      {
        get account() {
          return new FieldNode(schema.String, undefined, true);
        },
        get account_holder_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get account_holder_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line1() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line1_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_line2() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_zip() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address_zip_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get country() {
          return new FieldNode(schema.String, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cvc_check() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get dynamic_last4() {
          return new FieldNode(schema.String, undefined, true);
        },
        get exp_month() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fingerprint() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last4() {
          return new FieldNode(schema.String, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get routing_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get tokenization_method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'external_accounts_min_fields',
        extension: ((extensions as any) || {}).external_accounts_min_fields,
      }
    );
  },
  get external_accounts_min_order_by() {
    return new InputNode(
      {
        get account() {
          return new InputNodeField(schema.order_by, true);
        },
        get account_holder_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get account_holder_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_city() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line1() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line1_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line2() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_state() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_zip() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_zip_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get country() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get cvc_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get dynamic_last4() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get fingerprint() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last4() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get routing_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get tokenization_method() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_min_order_by' }
    );
  },
  get external_accounts_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.external_accounts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'external_accounts_mutation_response',
        extension: ((extensions as any) || {})
          .external_accounts_mutation_response,
      }
    );
  },
  get external_accounts_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.external_accounts_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.external_accounts_on_conflict, true);
        },
      },
      { name: 'external_accounts_obj_rel_insert_input' }
    );
  },
  get external_accounts_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.external_accounts_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.external_accounts_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.external_accounts_bool_exp, true);
        },
      },
      { name: 'external_accounts_on_conflict' }
    );
  },
  get external_accounts_order_by() {
    return new InputNode(
      {
        get account() {
          return new InputNodeField(schema.order_by, true);
        },
        get account_holder_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get account_holder_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_city() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_country() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line1() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line1_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_line2() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_state() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_zip() {
          return new InputNodeField(schema.order_by, true);
        },
        get address_zip_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_accounts_aggregate() {
          return new InputNodeField(
            schema.charge_accounts_aggregate_order_by,
            true
          );
        },
        get country() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get cvc_check() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get dynamic_last4() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get fingerprint() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last4() {
          return new InputNodeField(schema.order_by, true);
        },
        get metadata() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account() {
          return new InputNodeField(schema.payment_accounts_order_by, true);
        },
        get payment_accounts_aggregate() {
          return new InputNodeField(
            schema.payment_accounts_aggregate_order_by,
            true
          );
        },
        get payouts_aggregate() {
          return new InputNodeField(schema.payouts_aggregate_order_by, true);
        },
        get routing_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get tokenization_method() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_order_by' }
    );
  },
  get external_accounts_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'external_accounts_pk_columns_input' }
    );
  },
  get external_accounts_prepend_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'external_accounts_prepend_input' }
    );
  },
  get external_accounts_select_column() {
    return new EnumNode({ name: 'external_accounts_select_column' });
  },
  get external_accounts_set_input() {
    return new InputNode(
      {
        get account() {
          return new InputNodeField(schema.String, true);
        },
        get account_holder_name() {
          return new InputNodeField(schema.String, true);
        },
        get account_holder_type() {
          return new InputNodeField(schema.String, true);
        },
        get address_city() {
          return new InputNodeField(schema.String, true);
        },
        get address_country() {
          return new InputNodeField(schema.String, true);
        },
        get address_line1() {
          return new InputNodeField(schema.String, true);
        },
        get address_line1_check() {
          return new InputNodeField(schema.String, true);
        },
        get address_line2() {
          return new InputNodeField(schema.String, true);
        },
        get address_state() {
          return new InputNodeField(schema.String, true);
        },
        get address_zip() {
          return new InputNodeField(schema.String, true);
        },
        get address_zip_check() {
          return new InputNodeField(schema.String, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get country() {
          return new InputNodeField(schema.String, true);
        },
        get currency() {
          return new InputNodeField(schema.String, true);
        },
        get cvc_check() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get dynamic_last4() {
          return new InputNodeField(schema.String, true);
        },
        get exp_month() {
          return new InputNodeField(schema.Int, true);
        },
        get exp_year() {
          return new InputNodeField(schema.Int, true);
        },
        get fingerprint() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last4() {
          return new InputNodeField(schema.String, true);
        },
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get object() {
          return new InputNodeField(schema.String, true);
        },
        get routing_number() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get tokenization_method() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'external_accounts_set_input' }
    );
  },
  get external_accounts_stddev_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_stddev_fields',
        extension: ((extensions as any) || {}).external_accounts_stddev_fields,
      }
    );
  },
  get external_accounts_stddev_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_stddev_order_by' }
    );
  },
  get external_accounts_stddev_pop_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .external_accounts_stddev_pop_fields,
      }
    );
  },
  get external_accounts_stddev_pop_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_stddev_pop_order_by' }
    );
  },
  get external_accounts_stddev_samp_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .external_accounts_stddev_samp_fields,
      }
    );
  },
  get external_accounts_stddev_samp_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_stddev_samp_order_by' }
    );
  },
  get external_accounts_sum_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'external_accounts_sum_fields',
        extension: ((extensions as any) || {}).external_accounts_sum_fields,
      }
    );
  },
  get external_accounts_sum_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_sum_order_by' }
    );
  },
  get external_accounts_update_column() {
    return new EnumNode({ name: 'external_accounts_update_column' });
  },
  get external_accounts_var_pop_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_var_pop_fields',
        extension: ((extensions as any) || {}).external_accounts_var_pop_fields,
      }
    );
  },
  get external_accounts_var_pop_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_var_pop_order_by' }
    );
  },
  get external_accounts_var_samp_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_var_samp_fields',
        extension: ((extensions as any) || {})
          .external_accounts_var_samp_fields,
      }
    );
  },
  get external_accounts_var_samp_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_var_samp_order_by' }
    );
  },
  get external_accounts_variance_fields() {
    return new ObjectNode(
      {
        get exp_month() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get exp_year() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'external_accounts_variance_fields',
        extension: ((extensions as any) || {})
          .external_accounts_variance_fields,
      }
    );
  },
  get external_accounts_variance_order_by() {
    return new InputNode(
      {
        get exp_month() {
          return new InputNodeField(schema.order_by, true);
        },
        get exp_year() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'external_accounts_variance_order_by' }
    );
  },
  get float8() {
    return new ScalarNode({
      name: 'float8',
      extension: ((extensions as any) || {}).float8,
    });
  },
  get float8_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.float8, true);
        },
        get _gt() {
          return new InputNodeField(schema.float8, true);
        },
        get _gte() {
          return new InputNodeField(schema.float8, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.float8, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.float8, true);
        },
        get _lte() {
          return new InputNodeField(schema.float8, true);
        },
        get _neq() {
          return new InputNodeField(schema.float8, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.float8, true), true);
        },
      },
      { name: 'float8_comparison_exp' }
    );
  },
  get fluid_ledger() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get credit_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByCreditUserId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByDebitUserId() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'fluid_ledger',
        extension: ((extensions as any) || {}).fluid_ledger,
      }
    );
  },
  get fluid_ledger_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'fluid_ledger_aggregate',
        extension: ((extensions as any) || {}).fluid_ledger_aggregate,
      }
    );
  },
  get fluid_ledger_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.fluid_ledger_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.fluid_ledger_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.fluid_ledger_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.fluid_ledger_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.fluid_ledger_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.fluid_ledger_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.fluid_ledger_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.fluid_ledger_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.fluid_ledger_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.fluid_ledger_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'fluid_ledger_aggregate_fields',
        extension: ((extensions as any) || {}).fluid_ledger_aggregate_fields,
      }
    );
  },
  get fluid_ledger_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.fluid_ledger_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.fluid_ledger_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.fluid_ledger_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.fluid_ledger_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.fluid_ledger_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.fluid_ledger_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.fluid_ledger_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.fluid_ledger_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.fluid_ledger_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.fluid_ledger_variance_order_by,
            true
          );
        },
      },
      { name: 'fluid_ledger_aggregate_order_by' }
    );
  },
  get fluid_ledger_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'fluid_ledger_append_input' }
    );
  },
  get fluid_ledger_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_ledger_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.fluid_ledger_on_conflict, true);
        },
      },
      { name: 'fluid_ledger_arr_rel_insert_input' }
    );
  },
  get fluid_ledger_avg_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_avg_fields',
        extension: ((extensions as any) || {}).fluid_ledger_avg_fields,
      }
    );
  },
  get fluid_ledger_avg_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_avg_order_by' }
    );
  },
  get fluid_ledger_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_ledger_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.fluid_ledger_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_ledger_bool_exp, true),
            true
          );
        },
        get approved_by_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get credit_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByCreditUserId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByDebitUserId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'fluid_ledger_bool_exp' }
    );
  },
  get fluid_ledger_constraint() {
    return new EnumNode({ name: 'fluid_ledger_constraint' });
  },
  get fluid_ledger_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'fluid_ledger_delete_at_path_input' }
    );
  },
  get fluid_ledger_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'fluid_ledger_delete_elem_input' }
    );
  },
  get fluid_ledger_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'fluid_ledger_delete_key_input' }
    );
  },
  get fluid_ledger_inc_input() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'fluid_ledger_inc_input' }
    );
  },
  get fluid_ledger_insert_input() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get credit_type() {
          return new InputNodeField(schema.String, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByCreditUserId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByDebitUserId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'fluid_ledger_insert_input' }
    );
  },
  get fluid_ledger_max_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get credit_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_max_fields',
        extension: ((extensions as any) || {}).fluid_ledger_max_fields,
      }
    );
  },
  get fluid_ledger_max_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_max_order_by' }
    );
  },
  get fluid_ledger_min_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get credit_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_min_fields',
        extension: ((extensions as any) || {}).fluid_ledger_min_fields,
      }
    );
  },
  get fluid_ledger_min_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_min_order_by' }
    );
  },
  get fluid_ledger_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'fluid_ledger_mutation_response',
        extension: ((extensions as any) || {}).fluid_ledger_mutation_response,
      }
    );
  },
  get fluid_ledger_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.fluid_ledger_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.fluid_ledger_on_conflict, true);
        },
      },
      { name: 'fluid_ledger_obj_rel_insert_input' }
    );
  },
  get fluid_ledger_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.fluid_ledger_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_ledger_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.fluid_ledger_bool_exp, true);
        },
      },
      { name: 'fluid_ledger_on_conflict' }
    );
  },
  get fluid_ledger_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByCreditUserId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByDebitUserId() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'fluid_ledger_order_by' }
    );
  },
  get fluid_ledger_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'fluid_ledger_pk_columns_input' }
    );
  },
  get fluid_ledger_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'fluid_ledger_prepend_input' }
    );
  },
  get fluid_ledger_select_column() {
    return new EnumNode({ name: 'fluid_ledger_select_column' });
  },
  get fluid_ledger_set_input() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get credit_type() {
          return new InputNodeField(schema.String, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'fluid_ledger_set_input' }
    );
  },
  get fluid_ledger_stddev_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_stddev_fields',
        extension: ((extensions as any) || {}).fluid_ledger_stddev_fields,
      }
    );
  },
  get fluid_ledger_stddev_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_stddev_order_by' }
    );
  },
  get fluid_ledger_stddev_pop_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_stddev_pop_fields',
        extension: ((extensions as any) || {}).fluid_ledger_stddev_pop_fields,
      }
    );
  },
  get fluid_ledger_stddev_pop_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_stddev_pop_order_by' }
    );
  },
  get fluid_ledger_stddev_samp_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_stddev_samp_fields',
        extension: ((extensions as any) || {}).fluid_ledger_stddev_samp_fields,
      }
    );
  },
  get fluid_ledger_stddev_samp_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_stddev_samp_order_by' }
    );
  },
  get fluid_ledger_sum_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_sum_fields',
        extension: ((extensions as any) || {}).fluid_ledger_sum_fields,
      }
    );
  },
  get fluid_ledger_sum_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_sum_order_by' }
    );
  },
  get fluid_ledger_update_column() {
    return new EnumNode({ name: 'fluid_ledger_update_column' });
  },
  get fluid_ledger_var_pop_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_var_pop_fields',
        extension: ((extensions as any) || {}).fluid_ledger_var_pop_fields,
      }
    );
  },
  get fluid_ledger_var_pop_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_var_pop_order_by' }
    );
  },
  get fluid_ledger_var_samp_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_var_samp_fields',
        extension: ((extensions as any) || {}).fluid_ledger_var_samp_fields,
      }
    );
  },
  get fluid_ledger_var_samp_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_var_samp_order_by' }
    );
  },
  get fluid_ledger_variance_fields() {
    return new ObjectNode(
      {
        get approved_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get debit_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_balance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_ledger_variance_fields',
        extension: ((extensions as any) || {}).fluid_ledger_variance_fields,
      }
    );
  },
  get fluid_ledger_variance_order_by() {
    return new InputNode(
      {
        get approved_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_balance() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_ledger_variance_order_by' }
    );
  },
  get fluid_transactions() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_charges() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_aggregate() {
          return new FieldNode(
            schema.general_charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByVendorId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'fluid_transactions',
        extension: ((extensions as any) || {}).fluid_transactions,
      }
    );
  },
  get fluid_transactions_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'fluid_transactions_aggregate',
        extension: ((extensions as any) || {}).fluid_transactions_aggregate,
      }
    );
  },
  get fluid_transactions_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.fluid_transactions_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.fluid_transactions_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.fluid_transactions_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.fluid_transactions_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.fluid_transactions_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.fluid_transactions_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.fluid_transactions_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.fluid_transactions_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.fluid_transactions_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.fluid_transactions_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'fluid_transactions_aggregate_fields',
        extension: ((extensions as any) || {})
          .fluid_transactions_aggregate_fields,
      }
    );
  },
  get fluid_transactions_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.fluid_transactions_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.fluid_transactions_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.fluid_transactions_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.fluid_transactions_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.fluid_transactions_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.fluid_transactions_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.fluid_transactions_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.fluid_transactions_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.fluid_transactions_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.fluid_transactions_variance_order_by,
            true
          );
        },
      },
      { name: 'fluid_transactions_aggregate_order_by' }
    );
  },
  get fluid_transactions_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_transactions_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.fluid_transactions_on_conflict,
            true
          );
        },
      },
      { name: 'fluid_transactions_arr_rel_insert_input' }
    );
  },
  get fluid_transactions_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_avg_fields',
        extension: ((extensions as any) || {}).fluid_transactions_avg_fields,
      }
    );
  },
  get fluid_transactions_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_avg_order_by' }
    );
  },
  get fluid_transactions_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_transactions_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_transactions_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get customer_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get general_charges() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
        get general_transfers() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByVendorId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'fluid_transactions_bool_exp' }
    );
  },
  get fluid_transactions_constraint() {
    return new EnumNode({ name: 'fluid_transactions_constraint' });
  },
  get fluid_transactions_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get customer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'fluid_transactions_inc_input' }
    );
  },
  get fluid_transactions_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get customer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get general_charges() {
          return new InputNodeField(
            schema.general_charges_arr_rel_insert_input,
            true
          );
        },
        get general_transfers() {
          return new InputNodeField(
            schema.general_transfers_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByVendorId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'fluid_transactions_insert_input' }
    );
  },
  get fluid_transactions_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_max_fields',
        extension: ((extensions as any) || {}).fluid_transactions_max_fields,
      }
    );
  },
  get fluid_transactions_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_max_order_by' }
    );
  },
  get fluid_transactions_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_min_fields',
        extension: ((extensions as any) || {}).fluid_transactions_min_fields,
      }
    );
  },
  get fluid_transactions_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_min_order_by' }
    );
  },
  get fluid_transactions_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'fluid_transactions_mutation_response',
        extension: ((extensions as any) || {})
          .fluid_transactions_mutation_response,
      }
    );
  },
  get fluid_transactions_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.fluid_transactions_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.fluid_transactions_on_conflict,
            true
          );
        },
      },
      { name: 'fluid_transactions_obj_rel_insert_input' }
    );
  },
  get fluid_transactions_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.fluid_transactions_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.fluid_transactions_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
      },
      { name: 'fluid_transactions_on_conflict' }
    );
  },
  get fluid_transactions_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charges_aggregate() {
          return new InputNodeField(
            schema.general_charges_aggregate_order_by,
            true
          );
        },
        get general_transfers_aggregate() {
          return new InputNodeField(
            schema.general_transfers_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByVendorId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_order_by' }
    );
  },
  get fluid_transactions_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'fluid_transactions_pk_columns_input' }
    );
  },
  get fluid_transactions_select_column() {
    return new EnumNode({ name: 'fluid_transactions_select_column' });
  },
  get fluid_transactions_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get customer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'fluid_transactions_set_input' }
    );
  },
  get fluid_transactions_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_stddev_fields',
        extension: ((extensions as any) || {}).fluid_transactions_stddev_fields,
      }
    );
  },
  get fluid_transactions_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_stddev_order_by' }
    );
  },
  get fluid_transactions_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .fluid_transactions_stddev_pop_fields,
      }
    );
  },
  get fluid_transactions_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_stddev_pop_order_by' }
    );
  },
  get fluid_transactions_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .fluid_transactions_stddev_samp_fields,
      }
    );
  },
  get fluid_transactions_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_stddev_samp_order_by' }
    );
  },
  get fluid_transactions_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_sum_fields',
        extension: ((extensions as any) || {}).fluid_transactions_sum_fields,
      }
    );
  },
  get fluid_transactions_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_sum_order_by' }
    );
  },
  get fluid_transactions_update_column() {
    return new EnumNode({ name: 'fluid_transactions_update_column' });
  },
  get fluid_transactions_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_var_pop_fields',
        extension: ((extensions as any) || {})
          .fluid_transactions_var_pop_fields,
      }
    );
  },
  get fluid_transactions_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_var_pop_order_by' }
    );
  },
  get fluid_transactions_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_var_samp_fields',
        extension: ((extensions as any) || {})
          .fluid_transactions_var_samp_fields,
      }
    );
  },
  get fluid_transactions_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_var_samp_order_by' }
    );
  },
  get fluid_transactions_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get customer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vendor_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'fluid_transactions_variance_fields',
        extension: ((extensions as any) || {})
          .fluid_transactions_variance_fields,
      }
    );
  },
  get fluid_transactions_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get customer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vendor_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'fluid_transactions_variance_order_by' }
    );
  },
  get general_charge_line_items() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get general_charge() {
          return new FieldNode(schema.general_charges, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'general_charge_line_items',
        extension: ((extensions as any) || {}).general_charge_line_items,
      }
    );
  },
  get general_charge_line_items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.general_charge_line_items_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.general_charge_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_charge_line_items_aggregate',
        extension: ((extensions as any) || {})
          .general_charge_line_items_aggregate,
      }
    );
  },
  get general_charge_line_items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.general_charge_line_items_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.general_charge_line_items_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.general_charge_line_items_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.general_charge_line_items_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.general_charge_line_items_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.general_charge_line_items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.general_charge_line_items_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.general_charge_line_items_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.general_charge_line_items_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.general_charge_line_items_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'general_charge_line_items_aggregate_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_aggregate_fields,
      }
    );
  },
  get general_charge_line_items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.general_charge_line_items_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.general_charge_line_items_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.general_charge_line_items_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.general_charge_line_items_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.general_charge_line_items_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.general_charge_line_items_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.general_charge_line_items_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.general_charge_line_items_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.general_charge_line_items_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.general_charge_line_items_variance_order_by,
            true
          );
        },
      },
      { name: 'general_charge_line_items_aggregate_order_by' }
    );
  },
  get general_charge_line_items_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'general_charge_line_items_append_input' }
    );
  },
  get general_charge_line_items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.general_charge_line_items_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.general_charge_line_items_on_conflict,
            true
          );
        },
      },
      { name: 'general_charge_line_items_arr_rel_insert_input' }
    );
  },
  get general_charge_line_items_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_avg_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_avg_fields,
      }
    );
  },
  get general_charge_line_items_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_avg_order_by' }
    );
  },
  get general_charge_line_items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.general_charge_line_items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.general_charge_line_items_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.general_charge_line_items_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get general_charge() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'general_charge_line_items_bool_exp' }
    );
  },
  get general_charge_line_items_constraint() {
    return new EnumNode({ name: 'general_charge_line_items_constraint' });
  },
  get general_charge_line_items_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'general_charge_line_items_delete_at_path_input' }
    );
  },
  get general_charge_line_items_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'general_charge_line_items_delete_elem_input' }
    );
  },
  get general_charge_line_items_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'general_charge_line_items_delete_key_input' }
    );
  },
  get general_charge_line_items_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_charge_line_items_inc_input' }
    );
  },
  get general_charge_line_items_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get general_charge() {
          return new InputNodeField(
            schema.general_charges_obj_rel_insert_input,
            true
          );
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'general_charge_line_items_insert_input' }
    );
  },
  get general_charge_line_items_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_max_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_max_fields,
      }
    );
  },
  get general_charge_line_items_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_max_order_by' }
    );
  },
  get general_charge_line_items_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_min_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_min_fields,
      }
    );
  },
  get general_charge_line_items_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_min_order_by' }
    );
  },
  get general_charge_line_items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.general_charge_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_charge_line_items_mutation_response',
        extension: ((extensions as any) || {})
          .general_charge_line_items_mutation_response,
      }
    );
  },
  get general_charge_line_items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.general_charge_line_items_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.general_charge_line_items_on_conflict,
            true
          );
        },
      },
      { name: 'general_charge_line_items_obj_rel_insert_input' }
    );
  },
  get general_charge_line_items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.general_charge_line_items_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.general_charge_line_items_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.general_charge_line_items_bool_exp,
            true
          );
        },
      },
      { name: 'general_charge_line_items_on_conflict' }
    );
  },
  get general_charge_line_items_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge() {
          return new InputNodeField(schema.general_charges_order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_order_by' }
    );
  },
  get general_charge_line_items_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'general_charge_line_items_pk_columns_input' }
    );
  },
  get general_charge_line_items_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'general_charge_line_items_prepend_input' }
    );
  },
  get general_charge_line_items_select_column() {
    return new EnumNode({ name: 'general_charge_line_items_select_column' });
  },
  get general_charge_line_items_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'general_charge_line_items_set_input' }
    );
  },
  get general_charge_line_items_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_stddev_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_stddev_fields,
      }
    );
  },
  get general_charge_line_items_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_stddev_order_by' }
    );
  },
  get general_charge_line_items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_stddev_pop_fields,
      }
    );
  },
  get general_charge_line_items_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_stddev_pop_order_by' }
    );
  },
  get general_charge_line_items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_stddev_samp_fields,
      }
    );
  },
  get general_charge_line_items_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_stddev_samp_order_by' }
    );
  },
  get general_charge_line_items_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_sum_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_sum_fields,
      }
    );
  },
  get general_charge_line_items_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_sum_order_by' }
    );
  },
  get general_charge_line_items_update_column() {
    return new EnumNode({ name: 'general_charge_line_items_update_column' });
  },
  get general_charge_line_items_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_var_pop_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_var_pop_fields,
      }
    );
  },
  get general_charge_line_items_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_var_pop_order_by' }
    );
  },
  get general_charge_line_items_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_var_samp_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_var_samp_fields,
      }
    );
  },
  get general_charge_line_items_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_var_samp_order_by' }
    );
  },
  get general_charge_line_items_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charge_line_items_variance_fields',
        extension: ((extensions as any) || {})
          .general_charge_line_items_variance_fields,
      }
    );
  },
  get general_charge_line_items_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charge_line_items_variance_order_by' }
    );
  },
  get general_charges() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get capturable() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get captured() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get charge_account() {
          return new FieldNode(schema.charge_accounts, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transaction() {
          return new FieldNode(schema.fluid_transactions, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get general_charge_line_items() {
          return new FieldNode(
            new ArrayNode(schema.general_charge_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charge_line_items_aggregate() {
          return new FieldNode(
            schema.general_charge_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_charges',
        extension: ((extensions as any) || {}).general_charges,
      }
    );
  },
  get general_charges_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.general_charges_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_charges_aggregate',
        extension: ((extensions as any) || {}).general_charges_aggregate,
      }
    );
  },
  get general_charges_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.general_charges_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.general_charges_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.general_charges_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.general_charges_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.general_charges_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.general_charges_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.general_charges_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.general_charges_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.general_charges_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.general_charges_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'general_charges_aggregate_fields',
        extension: ((extensions as any) || {}).general_charges_aggregate_fields,
      }
    );
  },
  get general_charges_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.general_charges_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.general_charges_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.general_charges_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.general_charges_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.general_charges_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.general_charges_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.general_charges_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.general_charges_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.general_charges_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.general_charges_variance_order_by,
            true
          );
        },
      },
      { name: 'general_charges_aggregate_order_by' }
    );
  },
  get general_charges_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.general_charges_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.general_charges_on_conflict, true);
        },
      },
      { name: 'general_charges_arr_rel_insert_input' }
    );
  },
  get general_charges_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_avg_fields',
        extension: ((extensions as any) || {}).general_charges_avg_fields,
      }
    );
  },
  get general_charges_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_avg_order_by' }
    );
  },
  get general_charges_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.general_charges_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.general_charges_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get capturable() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get captured() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get charge_account() {
          return new InputNodeField(schema.charge_accounts_bool_exp, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fluid_transaction() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get general_charge_line_items() {
          return new InputNodeField(
            schema.general_charge_line_items_bool_exp,
            true
          );
        },
        get general_transfers() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'general_charges_bool_exp' }
    );
  },
  get general_charges_constraint() {
    return new EnumNode({ name: 'general_charges_constraint' });
  },
  get general_charges_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_charges_inc_input' }
    );
  },
  get general_charges_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get capturable() {
          return new InputNodeField(schema.Boolean, true);
        },
        get captured() {
          return new InputNodeField(schema.Boolean, true);
        },
        get charge_account() {
          return new InputNodeField(
            schema.charge_accounts_obj_rel_insert_input,
            true
          );
        },
        get charge_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_transaction() {
          return new InputNodeField(
            schema.fluid_transactions_obj_rel_insert_input,
            true
          );
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get general_charge_line_items() {
          return new InputNodeField(
            schema.general_charge_line_items_arr_rel_insert_input,
            true
          );
        },
        get general_transfers() {
          return new InputNodeField(
            schema.general_transfers_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_charges_insert_input' }
    );
  },
  get general_charges_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_charges_max_fields',
        extension: ((extensions as any) || {}).general_charges_max_fields,
      }
    );
  },
  get general_charges_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_max_order_by' }
    );
  },
  get general_charges_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_charges_min_fields',
        extension: ((extensions as any) || {}).general_charges_min_fields,
      }
    );
  },
  get general_charges_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_min_order_by' }
    );
  },
  get general_charges_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_charges_mutation_response',
        extension: ((extensions as any) || {})
          .general_charges_mutation_response,
      }
    );
  },
  get general_charges_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.general_charges_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.general_charges_on_conflict, true);
        },
      },
      { name: 'general_charges_obj_rel_insert_input' }
    );
  },
  get general_charges_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.general_charges_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.general_charges_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
      },
      { name: 'general_charges_on_conflict' }
    );
  },
  get general_charges_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get capturable() {
          return new InputNodeField(schema.order_by, true);
        },
        get captured() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account() {
          return new InputNodeField(schema.charge_accounts_order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction() {
          return new InputNodeField(schema.fluid_transactions_order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_line_items_aggregate() {
          return new InputNodeField(
            schema.general_charge_line_items_aggregate_order_by,
            true
          );
        },
        get general_transfers_aggregate() {
          return new InputNodeField(
            schema.general_transfers_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_order_by' }
    );
  },
  get general_charges_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'general_charges_pk_columns_input' }
    );
  },
  get general_charges_select_column() {
    return new EnumNode({ name: 'general_charges_select_column' });
  },
  get general_charges_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get capturable() {
          return new InputNodeField(schema.Boolean, true);
        },
        get captured() {
          return new InputNodeField(schema.Boolean, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_charges_set_input' }
    );
  },
  get general_charges_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_stddev_fields',
        extension: ((extensions as any) || {}).general_charges_stddev_fields,
      }
    );
  },
  get general_charges_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_stddev_order_by' }
    );
  },
  get general_charges_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .general_charges_stddev_pop_fields,
      }
    );
  },
  get general_charges_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_stddev_pop_order_by' }
    );
  },
  get general_charges_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .general_charges_stddev_samp_fields,
      }
    );
  },
  get general_charges_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_stddev_samp_order_by' }
    );
  },
  get general_charges_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_charges_sum_fields',
        extension: ((extensions as any) || {}).general_charges_sum_fields,
      }
    );
  },
  get general_charges_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_sum_order_by' }
    );
  },
  get general_charges_update_column() {
    return new EnumNode({ name: 'general_charges_update_column' });
  },
  get general_charges_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_var_pop_fields',
        extension: ((extensions as any) || {}).general_charges_var_pop_fields,
      }
    );
  },
  get general_charges_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_var_pop_order_by' }
    );
  },
  get general_charges_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_var_samp_fields',
        extension: ((extensions as any) || {}).general_charges_var_samp_fields,
      }
    );
  },
  get general_charges_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_var_samp_order_by' }
    );
  },
  get general_charges_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_charges_variance_fields',
        extension: ((extensions as any) || {}).general_charges_variance_fields,
      }
    );
  },
  get general_charges_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_charges_variance_order_by' }
    );
  },
  get general_images() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'general_images',
        extension: ((extensions as any) || {}).general_images,
      }
    );
  },
  get general_images_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.general_images_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.general_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_images_aggregate',
        extension: ((extensions as any) || {}).general_images_aggregate,
      }
    );
  },
  get general_images_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.general_images_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.general_images_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.general_images_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.general_images_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.general_images_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.general_images_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.general_images_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.general_images_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.general_images_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.general_images_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'general_images_aggregate_fields',
        extension: ((extensions as any) || {}).general_images_aggregate_fields,
      }
    );
  },
  get general_images_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.general_images_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.general_images_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.general_images_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.general_images_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.general_images_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.general_images_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.general_images_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.general_images_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.general_images_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.general_images_variance_order_by,
            true
          );
        },
      },
      { name: 'general_images_aggregate_order_by' }
    );
  },
  get general_images_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.general_images_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.general_images_on_conflict, true);
        },
      },
      { name: 'general_images_arr_rel_insert_input' }
    );
  },
  get general_images_avg_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_avg_fields',
        extension: ((extensions as any) || {}).general_images_avg_fields,
      }
    );
  },
  get general_images_avg_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_avg_order_by' }
    );
  },
  get general_images_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.general_images_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.general_images_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.general_images_bool_exp, true),
            true
          );
        },
        get height() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get label() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get quality() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get uuid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get width() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'general_images_bool_exp' }
    );
  },
  get general_images_constraint() {
    return new EnumNode({ name: 'general_images_constraint' });
  },
  get general_images_inc_input() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'general_images_inc_input' }
    );
  },
  get general_images_insert_input() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'general_images_insert_input' }
    );
  },
  get general_images_max_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'general_images_max_fields',
        extension: ((extensions as any) || {}).general_images_max_fields,
      }
    );
  },
  get general_images_max_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_max_order_by' }
    );
  },
  get general_images_min_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'general_images_min_fields',
        extension: ((extensions as any) || {}).general_images_min_fields,
      }
    );
  },
  get general_images_min_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_min_order_by' }
    );
  },
  get general_images_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.general_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_images_mutation_response',
        extension: ((extensions as any) || {}).general_images_mutation_response,
      }
    );
  },
  get general_images_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.general_images_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.general_images_on_conflict, true);
        },
      },
      { name: 'general_images_obj_rel_insert_input' }
    );
  },
  get general_images_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.general_images_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.general_images_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.general_images_bool_exp, true);
        },
      },
      { name: 'general_images_on_conflict' }
    );
  },
  get general_images_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_order_by' }
    );
  },
  get general_images_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'general_images_pk_columns_input' }
    );
  },
  get general_images_select_column() {
    return new EnumNode({ name: 'general_images_select_column' });
  },
  get general_images_set_input() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'general_images_set_input' }
    );
  },
  get general_images_stddev_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_stddev_fields',
        extension: ((extensions as any) || {}).general_images_stddev_fields,
      }
    );
  },
  get general_images_stddev_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_stddev_order_by' }
    );
  },
  get general_images_stddev_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_stddev_pop_fields',
        extension: ((extensions as any) || {}).general_images_stddev_pop_fields,
      }
    );
  },
  get general_images_stddev_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_stddev_pop_order_by' }
    );
  },
  get general_images_stddev_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .general_images_stddev_samp_fields,
      }
    );
  },
  get general_images_stddev_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_stddev_samp_order_by' }
    );
  },
  get general_images_sum_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'general_images_sum_fields',
        extension: ((extensions as any) || {}).general_images_sum_fields,
      }
    );
  },
  get general_images_sum_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_sum_order_by' }
    );
  },
  get general_images_update_column() {
    return new EnumNode({ name: 'general_images_update_column' });
  },
  get general_images_var_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_var_pop_fields',
        extension: ((extensions as any) || {}).general_images_var_pop_fields,
      }
    );
  },
  get general_images_var_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_var_pop_order_by' }
    );
  },
  get general_images_var_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_var_samp_fields',
        extension: ((extensions as any) || {}).general_images_var_samp_fields,
      }
    );
  },
  get general_images_var_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_var_samp_order_by' }
    );
  },
  get general_images_variance_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_images_variance_fields',
        extension: ((extensions as any) || {}).general_images_variance_fields,
      }
    );
  },
  get general_images_variance_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_images_variance_order_by' }
    );
  },
  get general_transfer_line_items() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get general_transfer() {
          return new FieldNode(schema.general_transfers, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'general_transfer_line_items',
        extension: ((extensions as any) || {}).general_transfer_line_items,
      }
    );
  },
  get general_transfer_line_items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.general_transfer_line_items_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.general_transfer_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_transfer_line_items_aggregate',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_aggregate,
      }
    );
  },
  get general_transfer_line_items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.general_transfer_line_items_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.general_transfer_line_items_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.general_transfer_line_items_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.general_transfer_line_items_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.general_transfer_line_items_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.general_transfer_line_items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.general_transfer_line_items_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.general_transfer_line_items_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.general_transfer_line_items_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.general_transfer_line_items_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'general_transfer_line_items_aggregate_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_aggregate_fields,
      }
    );
  },
  get general_transfer_line_items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.general_transfer_line_items_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.general_transfer_line_items_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.general_transfer_line_items_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.general_transfer_line_items_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.general_transfer_line_items_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.general_transfer_line_items_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.general_transfer_line_items_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.general_transfer_line_items_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.general_transfer_line_items_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.general_transfer_line_items_variance_order_by,
            true
          );
        },
      },
      { name: 'general_transfer_line_items_aggregate_order_by' }
    );
  },
  get general_transfer_line_items_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'general_transfer_line_items_append_input' }
    );
  },
  get general_transfer_line_items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.general_transfer_line_items_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.general_transfer_line_items_on_conflict,
            true
          );
        },
      },
      { name: 'general_transfer_line_items_arr_rel_insert_input' }
    );
  },
  get general_transfer_line_items_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_avg_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_avg_fields,
      }
    );
  },
  get general_transfer_line_items_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_avg_order_by' }
    );
  },
  get general_transfer_line_items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.general_transfer_line_items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.general_transfer_line_items_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.general_transfer_line_items_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get general_transfer() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'general_transfer_line_items_bool_exp' }
    );
  },
  get general_transfer_line_items_constraint() {
    return new EnumNode({ name: 'general_transfer_line_items_constraint' });
  },
  get general_transfer_line_items_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'general_transfer_line_items_delete_at_path_input' }
    );
  },
  get general_transfer_line_items_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'general_transfer_line_items_delete_elem_input' }
    );
  },
  get general_transfer_line_items_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'general_transfer_line_items_delete_key_input' }
    );
  },
  get general_transfer_line_items_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
      },
      { name: 'general_transfer_line_items_inc_input' }
    );
  },
  get general_transfer_line_items_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get general_transfer() {
          return new InputNodeField(
            schema.general_transfers_obj_rel_insert_input,
            true
          );
        },
        get general_transfer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'general_transfer_line_items_insert_input' }
    );
  },
  get general_transfer_line_items_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_max_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_max_fields,
      }
    );
  },
  get general_transfer_line_items_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_max_order_by' }
    );
  },
  get general_transfer_line_items_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_min_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_min_fields,
      }
    );
  },
  get general_transfer_line_items_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_min_order_by' }
    );
  },
  get general_transfer_line_items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.general_transfer_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_transfer_line_items_mutation_response',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_mutation_response,
      }
    );
  },
  get general_transfer_line_items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.general_transfer_line_items_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.general_transfer_line_items_on_conflict,
            true
          );
        },
      },
      { name: 'general_transfer_line_items_obj_rel_insert_input' }
    );
  },
  get general_transfer_line_items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.general_transfer_line_items_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.general_transfer_line_items_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.general_transfer_line_items_bool_exp,
            true
          );
        },
      },
      { name: 'general_transfer_line_items_on_conflict' }
    );
  },
  get general_transfer_line_items_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer() {
          return new InputNodeField(schema.general_transfers_order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_order_by' }
    );
  },
  get general_transfer_line_items_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'general_transfer_line_items_pk_columns_input' }
    );
  },
  get general_transfer_line_items_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'general_transfer_line_items_prepend_input' }
    );
  },
  get general_transfer_line_items_select_column() {
    return new EnumNode({ name: 'general_transfer_line_items_select_column' });
  },
  get general_transfer_line_items_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'general_transfer_line_items_set_input' }
    );
  },
  get general_transfer_line_items_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_stddev_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_stddev_fields,
      }
    );
  },
  get general_transfer_line_items_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_stddev_order_by' }
    );
  },
  get general_transfer_line_items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_stddev_pop_fields,
      }
    );
  },
  get general_transfer_line_items_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_stddev_pop_order_by' }
    );
  },
  get general_transfer_line_items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_stddev_samp_fields,
      }
    );
  },
  get general_transfer_line_items_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_stddev_samp_order_by' }
    );
  },
  get general_transfer_line_items_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_sum_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_sum_fields,
      }
    );
  },
  get general_transfer_line_items_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_sum_order_by' }
    );
  },
  get general_transfer_line_items_update_column() {
    return new EnumNode({ name: 'general_transfer_line_items_update_column' });
  },
  get general_transfer_line_items_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_var_pop_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_var_pop_fields,
      }
    );
  },
  get general_transfer_line_items_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_var_pop_order_by' }
    );
  },
  get general_transfer_line_items_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_var_samp_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_var_samp_fields,
      }
    );
  },
  get general_transfer_line_items_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_var_samp_order_by' }
    );
  },
  get general_transfer_line_items_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfer_line_items_variance_fields',
        extension: ((extensions as any) || {})
          .general_transfer_line_items_variance_fields,
      }
    );
  },
  get general_transfer_line_items_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfer_line_items_variance_order_by' }
    );
  },
  get general_transfers() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transaction() {
          return new FieldNode(schema.fluid_transactions, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get general_charge() {
          return new FieldNode(schema.general_charges, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get general_transfer_line_items() {
          return new FieldNode(
            new ArrayNode(schema.general_transfer_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfer_line_items_aggregate() {
          return new FieldNode(
            schema.general_transfer_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get hold_until() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get payment_account() {
          return new FieldNode(schema.payment_accounts, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payment_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_transfers',
        extension: ((extensions as any) || {}).general_transfers,
      }
    );
  },
  get general_transfers_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_transfers_aggregate',
        extension: ((extensions as any) || {}).general_transfers_aggregate,
      }
    );
  },
  get general_transfers_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.general_transfers_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.general_transfers_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.general_transfers_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.general_transfers_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.general_transfers_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.general_transfers_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.general_transfers_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.general_transfers_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.general_transfers_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.general_transfers_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'general_transfers_aggregate_fields',
        extension: ((extensions as any) || {})
          .general_transfers_aggregate_fields,
      }
    );
  },
  get general_transfers_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.general_transfers_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.general_transfers_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.general_transfers_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.general_transfers_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.general_transfers_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.general_transfers_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.general_transfers_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.general_transfers_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.general_transfers_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.general_transfers_variance_order_by,
            true
          );
        },
      },
      { name: 'general_transfers_aggregate_order_by' }
    );
  },
  get general_transfers_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.general_transfers_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.general_transfers_on_conflict, true);
        },
      },
      { name: 'general_transfers_arr_rel_insert_input' }
    );
  },
  get general_transfers_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_avg_fields',
        extension: ((extensions as any) || {}).general_transfers_avg_fields,
      }
    );
  },
  get general_transfers_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_avg_order_by' }
    );
  },
  get general_transfers_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.general_transfers_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.general_transfers_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fluid_transaction() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get general_charge() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get general_transfer_line_items() {
          return new InputNodeField(
            schema.general_transfer_line_items_bool_exp,
            true
          );
        },
        get hold_until() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get payment_account() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get payment_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'general_transfers_bool_exp' }
    );
  },
  get general_transfers_constraint() {
    return new EnumNode({ name: 'general_transfers_constraint' });
  },
  get general_transfers_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_transfers_inc_input' }
    );
  },
  get general_transfers_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_transaction() {
          return new InputNodeField(
            schema.fluid_transactions_obj_rel_insert_input,
            true
          );
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get general_charge() {
          return new InputNodeField(
            schema.general_charges_obj_rel_insert_input,
            true
          );
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get general_transfer_line_items() {
          return new InputNodeField(
            schema.general_transfer_line_items_arr_rel_insert_input,
            true
          );
        },
        get hold_until() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get payment_account() {
          return new InputNodeField(
            schema.payment_accounts_obj_rel_insert_input,
            true
          );
        },
        get payment_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payment_id() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_transfers_insert_input' }
    );
  },
  get general_transfers_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get hold_until() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payment_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_transfers_max_fields',
        extension: ((extensions as any) || {}).general_transfers_max_fields,
      }
    );
  },
  get general_transfers_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get hold_until() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_max_order_by' }
    );
  },
  get general_transfers_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get hold_until() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payment_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_transfers_min_fields',
        extension: ((extensions as any) || {}).general_transfers_min_fields,
      }
    );
  },
  get general_transfers_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get hold_until() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_min_order_by' }
    );
  },
  get general_transfers_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'general_transfers_mutation_response',
        extension: ((extensions as any) || {})
          .general_transfers_mutation_response,
      }
    );
  },
  get general_transfers_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.general_transfers_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.general_transfers_on_conflict, true);
        },
      },
      { name: 'general_transfers_obj_rel_insert_input' }
    );
  },
  get general_transfers_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.general_transfers_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.general_transfers_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
      },
      { name: 'general_transfers_on_conflict' }
    );
  },
  get general_transfers_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction() {
          return new InputNodeField(schema.fluid_transactions_order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge() {
          return new InputNodeField(schema.general_charges_order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfer_line_items_aggregate() {
          return new InputNodeField(
            schema.general_transfer_line_items_aggregate_order_by,
            true
          );
        },
        get hold_until() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account() {
          return new InputNodeField(schema.payment_accounts_order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_order_by' }
    );
  },
  get general_transfers_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'general_transfers_pk_columns_input' }
    );
  },
  get general_transfers_select_column() {
    return new EnumNode({ name: 'general_transfers_select_column' });
  },
  get general_transfers_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get hold_until() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payment_id() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'general_transfers_set_input' }
    );
  },
  get general_transfers_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_stddev_fields',
        extension: ((extensions as any) || {}).general_transfers_stddev_fields,
      }
    );
  },
  get general_transfers_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_stddev_order_by' }
    );
  },
  get general_transfers_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .general_transfers_stddev_pop_fields,
      }
    );
  },
  get general_transfers_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_stddev_pop_order_by' }
    );
  },
  get general_transfers_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .general_transfers_stddev_samp_fields,
      }
    );
  },
  get general_transfers_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_stddev_samp_order_by' }
    );
  },
  get general_transfers_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'general_transfers_sum_fields',
        extension: ((extensions as any) || {}).general_transfers_sum_fields,
      }
    );
  },
  get general_transfers_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_sum_order_by' }
    );
  },
  get general_transfers_update_column() {
    return new EnumNode({ name: 'general_transfers_update_column' });
  },
  get general_transfers_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_var_pop_fields',
        extension: ((extensions as any) || {}).general_transfers_var_pop_fields,
      }
    );
  },
  get general_transfers_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_var_pop_order_by' }
    );
  },
  get general_transfers_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_var_samp_fields',
        extension: ((extensions as any) || {})
          .general_transfers_var_samp_fields,
      }
    );
  },
  get general_transfers_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_var_samp_order_by' }
    );
  },
  get general_transfers_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get general_charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'general_transfers_variance_fields',
        extension: ((extensions as any) || {})
          .general_transfers_variance_fields,
      }
    );
  },
  get general_transfers_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'general_transfers_variance_order_by' }
    );
  },
  get geography() {
    return new ScalarNode({
      name: 'geography',
      extension: ((extensions as any) || {}).geography,
    });
  },
  get geography_cast_exp() {
    return new InputNode(
      {
        get geometry() {
          return new InputNodeField(schema.geometry_comparison_exp, true);
        },
      },
      { name: 'geography_cast_exp' }
    );
  },
  get geography_columns() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get f_geography_column() {
          return new FieldNode(schema.name, undefined, true);
        },
        get f_table_catalog() {
          return new FieldNode(schema.name, undefined, true);
        },
        get f_table_name() {
          return new FieldNode(schema.name, undefined, true);
        },
        get f_table_schema() {
          return new FieldNode(schema.name, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'geography_columns',
        extension: ((extensions as any) || {}).geography_columns,
      }
    );
  },
  get geography_columns_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.geography_columns_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.geography_columns, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'geography_columns_aggregate',
        extension: ((extensions as any) || {}).geography_columns_aggregate,
      }
    );
  },
  get geography_columns_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.geography_columns_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.geography_columns_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.geography_columns_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.geography_columns_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.geography_columns_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.geography_columns_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.geography_columns_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.geography_columns_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.geography_columns_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.geography_columns_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'geography_columns_aggregate_fields',
        extension: ((extensions as any) || {})
          .geography_columns_aggregate_fields,
      }
    );
  },
  get geography_columns_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.geography_columns_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.geography_columns_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.geography_columns_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.geography_columns_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.geography_columns_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.geography_columns_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.geography_columns_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.geography_columns_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.geography_columns_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.geography_columns_variance_order_by,
            true
          );
        },
      },
      { name: 'geography_columns_aggregate_order_by' }
    );
  },
  get geography_columns_avg_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_avg_fields',
        extension: ((extensions as any) || {}).geography_columns_avg_fields,
      }
    );
  },
  get geography_columns_avg_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_avg_order_by' }
    );
  },
  get geography_columns_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.geography_columns_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.geography_columns_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.geography_columns_bool_exp, true),
            true
          );
        },
        get coord_dimension() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get f_geography_column() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get f_table_name() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get f_table_schema() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get srid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'geography_columns_bool_exp' }
    );
  },
  get geography_columns_max_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'geography_columns_max_fields',
        extension: ((extensions as any) || {}).geography_columns_max_fields,
      }
    );
  },
  get geography_columns_max_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_max_order_by' }
    );
  },
  get geography_columns_min_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'geography_columns_min_fields',
        extension: ((extensions as any) || {}).geography_columns_min_fields,
      }
    );
  },
  get geography_columns_min_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_min_order_by' }
    );
  },
  get geography_columns_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_geography_column() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_schema() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_order_by' }
    );
  },
  get geography_columns_select_column() {
    return new EnumNode({ name: 'geography_columns_select_column' });
  },
  get geography_columns_stddev_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_stddev_fields',
        extension: ((extensions as any) || {}).geography_columns_stddev_fields,
      }
    );
  },
  get geography_columns_stddev_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_stddev_order_by' }
    );
  },
  get geography_columns_stddev_pop_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .geography_columns_stddev_pop_fields,
      }
    );
  },
  get geography_columns_stddev_pop_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_stddev_pop_order_by' }
    );
  },
  get geography_columns_stddev_samp_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .geography_columns_stddev_samp_fields,
      }
    );
  },
  get geography_columns_stddev_samp_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_stddev_samp_order_by' }
    );
  },
  get geography_columns_sum_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'geography_columns_sum_fields',
        extension: ((extensions as any) || {}).geography_columns_sum_fields,
      }
    );
  },
  get geography_columns_sum_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_sum_order_by' }
    );
  },
  get geography_columns_var_pop_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_var_pop_fields',
        extension: ((extensions as any) || {}).geography_columns_var_pop_fields,
      }
    );
  },
  get geography_columns_var_pop_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_var_pop_order_by' }
    );
  },
  get geography_columns_var_samp_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_var_samp_fields',
        extension: ((extensions as any) || {})
          .geography_columns_var_samp_fields,
      }
    );
  },
  get geography_columns_var_samp_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_var_samp_order_by' }
    );
  },
  get geography_columns_variance_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geography_columns_variance_fields',
        extension: ((extensions as any) || {})
          .geography_columns_variance_fields,
      }
    );
  },
  get geography_columns_variance_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geography_columns_variance_order_by' }
    );
  },
  get geography_comparison_exp() {
    return new InputNode(
      {
        get _cast() {
          return new InputNodeField(schema.geography_cast_exp, true);
        },
        get _eq() {
          return new InputNodeField(schema.geography, true);
        },
        get _gt() {
          return new InputNodeField(schema.geography, true);
        },
        get _gte() {
          return new InputNodeField(schema.geography, true);
        },
        get _in() {
          return new InputNodeField(
            new ArrayNode(schema.geography, true),
            true
          );
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.geography, true);
        },
        get _lte() {
          return new InputNodeField(schema.geography, true);
        },
        get _neq() {
          return new InputNodeField(schema.geography, true);
        },
        get _nin() {
          return new InputNodeField(
            new ArrayNode(schema.geography, true),
            true
          );
        },
        get _st_d_within() {
          return new InputNodeField(schema.st_d_within_geography_input, true);
        },
        get _st_intersects() {
          return new InputNodeField(schema.geography, true);
        },
      },
      { name: 'geography_comparison_exp' }
    );
  },
  get geometry() {
    return new ScalarNode({
      name: 'geometry',
      extension: ((extensions as any) || {}).geometry,
    });
  },
  get geometry_cast_exp() {
    return new InputNode(
      {
        get geography() {
          return new InputNodeField(schema.geography_comparison_exp, true);
        },
      },
      { name: 'geometry_cast_exp' }
    );
  },
  get geometry_columns() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get f_geometry_column() {
          return new FieldNode(schema.name, undefined, true);
        },
        get f_table_catalog() {
          return new FieldNode(schema.String, undefined, true);
        },
        get f_table_name() {
          return new FieldNode(schema.name, undefined, true);
        },
        get f_table_schema() {
          return new FieldNode(schema.name, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'geometry_columns',
        extension: ((extensions as any) || {}).geometry_columns,
      }
    );
  },
  get geometry_columns_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.geometry_columns_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.geometry_columns, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'geometry_columns_aggregate',
        extension: ((extensions as any) || {}).geometry_columns_aggregate,
      }
    );
  },
  get geometry_columns_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.geometry_columns_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.geometry_columns_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.geometry_columns_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.geometry_columns_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.geometry_columns_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.geometry_columns_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.geometry_columns_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.geometry_columns_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.geometry_columns_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.geometry_columns_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'geometry_columns_aggregate_fields',
        extension: ((extensions as any) || {})
          .geometry_columns_aggregate_fields,
      }
    );
  },
  get geometry_columns_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.geometry_columns_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.geometry_columns_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.geometry_columns_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.geometry_columns_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.geometry_columns_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.geometry_columns_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.geometry_columns_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.geometry_columns_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.geometry_columns_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.geometry_columns_variance_order_by,
            true
          );
        },
      },
      { name: 'geometry_columns_aggregate_order_by' }
    );
  },
  get geometry_columns_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.geometry_columns_insert_input, false),
            false
          );
        },
      },
      { name: 'geometry_columns_arr_rel_insert_input' }
    );
  },
  get geometry_columns_avg_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_avg_fields',
        extension: ((extensions as any) || {}).geometry_columns_avg_fields,
      }
    );
  },
  get geometry_columns_avg_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_avg_order_by' }
    );
  },
  get geometry_columns_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.geometry_columns_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.geometry_columns_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.geometry_columns_bool_exp, true),
            true
          );
        },
        get coord_dimension() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get f_geometry_column() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get f_table_name() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get f_table_schema() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get srid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'geometry_columns_bool_exp' }
    );
  },
  get geometry_columns_inc_input() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.Int, true);
        },
        get srid() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'geometry_columns_inc_input' }
    );
  },
  get geometry_columns_insert_input() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.Int, true);
        },
        get f_geometry_column() {
          return new InputNodeField(schema.name, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.String, true);
        },
        get f_table_name() {
          return new InputNodeField(schema.name, true);
        },
        get f_table_schema() {
          return new InputNodeField(schema.name, true);
        },
        get srid() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'geometry_columns_insert_input' }
    );
  },
  get geometry_columns_max_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get f_table_catalog() {
          return new FieldNode(schema.String, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'geometry_columns_max_fields',
        extension: ((extensions as any) || {}).geometry_columns_max_fields,
      }
    );
  },
  get geometry_columns_max_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_max_order_by' }
    );
  },
  get geometry_columns_min_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get f_table_catalog() {
          return new FieldNode(schema.String, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'geometry_columns_min_fields',
        extension: ((extensions as any) || {}).geometry_columns_min_fields,
      }
    );
  },
  get geometry_columns_min_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_min_order_by' }
    );
  },
  get geometry_columns_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.geometry_columns, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'geometry_columns_mutation_response',
        extension: ((extensions as any) || {})
          .geometry_columns_mutation_response,
      }
    );
  },
  get geometry_columns_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.geometry_columns_insert_input,
            false
          );
        },
      },
      { name: 'geometry_columns_obj_rel_insert_input' }
    );
  },
  get geometry_columns_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_geometry_column() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get f_table_schema() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_order_by' }
    );
  },
  get geometry_columns_select_column() {
    return new EnumNode({ name: 'geometry_columns_select_column' });
  },
  get geometry_columns_set_input() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.Int, true);
        },
        get f_geometry_column() {
          return new InputNodeField(schema.name, true);
        },
        get f_table_catalog() {
          return new InputNodeField(schema.String, true);
        },
        get f_table_name() {
          return new InputNodeField(schema.name, true);
        },
        get f_table_schema() {
          return new InputNodeField(schema.name, true);
        },
        get srid() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'geometry_columns_set_input' }
    );
  },
  get geometry_columns_stddev_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_stddev_fields',
        extension: ((extensions as any) || {}).geometry_columns_stddev_fields,
      }
    );
  },
  get geometry_columns_stddev_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_stddev_order_by' }
    );
  },
  get geometry_columns_stddev_pop_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .geometry_columns_stddev_pop_fields,
      }
    );
  },
  get geometry_columns_stddev_pop_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_stddev_pop_order_by' }
    );
  },
  get geometry_columns_stddev_samp_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .geometry_columns_stddev_samp_fields,
      }
    );
  },
  get geometry_columns_stddev_samp_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_stddev_samp_order_by' }
    );
  },
  get geometry_columns_sum_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'geometry_columns_sum_fields',
        extension: ((extensions as any) || {}).geometry_columns_sum_fields,
      }
    );
  },
  get geometry_columns_sum_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_sum_order_by' }
    );
  },
  get geometry_columns_var_pop_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_var_pop_fields',
        extension: ((extensions as any) || {}).geometry_columns_var_pop_fields,
      }
    );
  },
  get geometry_columns_var_pop_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_var_pop_order_by' }
    );
  },
  get geometry_columns_var_samp_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_var_samp_fields',
        extension: ((extensions as any) || {}).geometry_columns_var_samp_fields,
      }
    );
  },
  get geometry_columns_var_samp_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_var_samp_order_by' }
    );
  },
  get geometry_columns_variance_fields() {
    return new ObjectNode(
      {
        get coord_dimension() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'geometry_columns_variance_fields',
        extension: ((extensions as any) || {}).geometry_columns_variance_fields,
      }
    );
  },
  get geometry_columns_variance_order_by() {
    return new InputNode(
      {
        get coord_dimension() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'geometry_columns_variance_order_by' }
    );
  },
  get geometry_comparison_exp() {
    return new InputNode(
      {
        get _cast() {
          return new InputNodeField(schema.geometry_cast_exp, true);
        },
        get _eq() {
          return new InputNodeField(schema.geometry, true);
        },
        get _gt() {
          return new InputNodeField(schema.geometry, true);
        },
        get _gte() {
          return new InputNodeField(schema.geometry, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.geometry, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.geometry, true);
        },
        get _lte() {
          return new InputNodeField(schema.geometry, true);
        },
        get _neq() {
          return new InputNodeField(schema.geometry, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.geometry, true), true);
        },
        get _st_contains() {
          return new InputNodeField(schema.geometry, true);
        },
        get _st_crosses() {
          return new InputNodeField(schema.geometry, true);
        },
        get _st_d_within() {
          return new InputNodeField(schema.st_d_within_input, true);
        },
        get _st_equals() {
          return new InputNodeField(schema.geometry, true);
        },
        get _st_intersects() {
          return new InputNodeField(schema.geometry, true);
        },
        get _st_overlaps() {
          return new InputNodeField(schema.geometry, true);
        },
        get _st_touches() {
          return new InputNodeField(schema.geometry, true);
        },
        get _st_within() {
          return new InputNodeField(schema.geometry, true);
        },
      },
      { name: 'geometry_comparison_exp' }
    );
  },
  get goose_db_version() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get is_applied() {
          return new FieldNode(schema.Boolean, undefined, false);
        },
        get tstamp() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
      },
      {
        name: 'goose_db_version',
        extension: ((extensions as any) || {}).goose_db_version,
      }
    );
  },
  get goose_db_version_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.goose_db_version_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.goose_db_version, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'goose_db_version_aggregate',
        extension: ((extensions as any) || {}).goose_db_version_aggregate,
      }
    );
  },
  get goose_db_version_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.goose_db_version_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.goose_db_version_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.goose_db_version_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.goose_db_version_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.goose_db_version_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.goose_db_version_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.goose_db_version_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.goose_db_version_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.goose_db_version_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.goose_db_version_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'goose_db_version_aggregate_fields',
        extension: ((extensions as any) || {})
          .goose_db_version_aggregate_fields,
      }
    );
  },
  get goose_db_version_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.goose_db_version_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.goose_db_version_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.goose_db_version_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.goose_db_version_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.goose_db_version_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.goose_db_version_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.goose_db_version_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.goose_db_version_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.goose_db_version_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.goose_db_version_variance_order_by,
            true
          );
        },
      },
      { name: 'goose_db_version_aggregate_order_by' }
    );
  },
  get goose_db_version_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.goose_db_version_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.goose_db_version_on_conflict, true);
        },
      },
      { name: 'goose_db_version_arr_rel_insert_input' }
    );
  },
  get goose_db_version_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_avg_fields',
        extension: ((extensions as any) || {}).goose_db_version_avg_fields,
      }
    );
  },
  get goose_db_version_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_avg_order_by' }
    );
  },
  get goose_db_version_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.goose_db_version_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.goose_db_version_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.goose_db_version_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get is_applied() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get tstamp() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get version_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'goose_db_version_bool_exp' }
    );
  },
  get goose_db_version_constraint() {
    return new EnumNode({ name: 'goose_db_version_constraint' });
  },
  get goose_db_version_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get version_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'goose_db_version_inc_input' }
    );
  },
  get goose_db_version_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get is_applied() {
          return new InputNodeField(schema.Boolean, true);
        },
        get tstamp() {
          return new InputNodeField(schema.timestamp, true);
        },
        get version_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'goose_db_version_insert_input' }
    );
  },
  get goose_db_version_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get tstamp() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'goose_db_version_max_fields',
        extension: ((extensions as any) || {}).goose_db_version_max_fields,
      }
    );
  },
  get goose_db_version_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get tstamp() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_max_order_by' }
    );
  },
  get goose_db_version_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get tstamp() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'goose_db_version_min_fields',
        extension: ((extensions as any) || {}).goose_db_version_min_fields,
      }
    );
  },
  get goose_db_version_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get tstamp() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_min_order_by' }
    );
  },
  get goose_db_version_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.goose_db_version, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'goose_db_version_mutation_response',
        extension: ((extensions as any) || {})
          .goose_db_version_mutation_response,
      }
    );
  },
  get goose_db_version_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.goose_db_version_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.goose_db_version_on_conflict, true);
        },
      },
      { name: 'goose_db_version_obj_rel_insert_input' }
    );
  },
  get goose_db_version_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.goose_db_version_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.goose_db_version_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.goose_db_version_bool_exp, true);
        },
      },
      { name: 'goose_db_version_on_conflict' }
    );
  },
  get goose_db_version_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get is_applied() {
          return new InputNodeField(schema.order_by, true);
        },
        get tstamp() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_order_by' }
    );
  },
  get goose_db_version_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'goose_db_version_pk_columns_input' }
    );
  },
  get goose_db_version_select_column() {
    return new EnumNode({ name: 'goose_db_version_select_column' });
  },
  get goose_db_version_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get is_applied() {
          return new InputNodeField(schema.Boolean, true);
        },
        get tstamp() {
          return new InputNodeField(schema.timestamp, true);
        },
        get version_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'goose_db_version_set_input' }
    );
  },
  get goose_db_version_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_stddev_fields',
        extension: ((extensions as any) || {}).goose_db_version_stddev_fields,
      }
    );
  },
  get goose_db_version_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_stddev_order_by' }
    );
  },
  get goose_db_version_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .goose_db_version_stddev_pop_fields,
      }
    );
  },
  get goose_db_version_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_stddev_pop_order_by' }
    );
  },
  get goose_db_version_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .goose_db_version_stddev_samp_fields,
      }
    );
  },
  get goose_db_version_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_stddev_samp_order_by' }
    );
  },
  get goose_db_version_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'goose_db_version_sum_fields',
        extension: ((extensions as any) || {}).goose_db_version_sum_fields,
      }
    );
  },
  get goose_db_version_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_sum_order_by' }
    );
  },
  get goose_db_version_update_column() {
    return new EnumNode({ name: 'goose_db_version_update_column' });
  },
  get goose_db_version_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_var_pop_fields',
        extension: ((extensions as any) || {}).goose_db_version_var_pop_fields,
      }
    );
  },
  get goose_db_version_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_var_pop_order_by' }
    );
  },
  get goose_db_version_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_var_samp_fields',
        extension: ((extensions as any) || {}).goose_db_version_var_samp_fields,
      }
    );
  },
  get goose_db_version_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_var_samp_order_by' }
    );
  },
  get goose_db_version_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get version_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'goose_db_version_variance_fields',
        extension: ((extensions as any) || {}).goose_db_version_variance_fields,
      }
    );
  },
  get goose_db_version_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get version_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'goose_db_version_variance_order_by' }
    );
  },
  get identification_images() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get identification() {
          return new FieldNode(schema.identifications, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'identification_images',
        extension: ((extensions as any) || {}).identification_images,
      }
    );
  },
  get identification_images_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.identification_images_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.identification_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'identification_images_aggregate',
        extension: ((extensions as any) || {}).identification_images_aggregate,
      }
    );
  },
  get identification_images_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.identification_images_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.identification_images_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.identification_images_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.identification_images_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.identification_images_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.identification_images_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.identification_images_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.identification_images_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.identification_images_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.identification_images_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'identification_images_aggregate_fields',
        extension: ((extensions as any) || {})
          .identification_images_aggregate_fields,
      }
    );
  },
  get identification_images_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.identification_images_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.identification_images_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.identification_images_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.identification_images_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.identification_images_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.identification_images_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.identification_images_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.identification_images_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.identification_images_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.identification_images_variance_order_by,
            true
          );
        },
      },
      { name: 'identification_images_aggregate_order_by' }
    );
  },
  get identification_images_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.identification_images_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.identification_images_on_conflict,
            true
          );
        },
      },
      { name: 'identification_images_arr_rel_insert_input' }
    );
  },
  get identification_images_avg_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_avg_fields',
        extension: ((extensions as any) || {}).identification_images_avg_fields,
      }
    );
  },
  get identification_images_avg_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_avg_order_by' }
    );
  },
  get identification_images_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.identification_images_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.identification_images_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.identification_images_bool_exp, true),
            true
          );
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get height() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get identification() {
          return new InputNodeField(schema.identifications_bool_exp, true);
        },
        get identification_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get label() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get quality() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get uuid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get width() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'identification_images_bool_exp' }
    );
  },
  get identification_images_constraint() {
    return new EnumNode({ name: 'identification_images_constraint' });
  },
  get identification_images_inc_input() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get identification_id() {
          return new InputNodeField(schema.Int, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'identification_images_inc_input' }
    );
  },
  get identification_images_insert_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get identification() {
          return new InputNodeField(
            schema.identifications_obj_rel_insert_input,
            true
          );
        },
        get identification_id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'identification_images_insert_input' }
    );
  },
  get identification_images_max_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'identification_images_max_fields',
        extension: ((extensions as any) || {}).identification_images_max_fields,
      }
    );
  },
  get identification_images_max_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_max_order_by' }
    );
  },
  get identification_images_min_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'identification_images_min_fields',
        extension: ((extensions as any) || {}).identification_images_min_fields,
      }
    );
  },
  get identification_images_min_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_min_order_by' }
    );
  },
  get identification_images_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.identification_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'identification_images_mutation_response',
        extension: ((extensions as any) || {})
          .identification_images_mutation_response,
      }
    );
  },
  get identification_images_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.identification_images_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.identification_images_on_conflict,
            true
          );
        },
      },
      { name: 'identification_images_obj_rel_insert_input' }
    );
  },
  get identification_images_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.identification_images_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.identification_images_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.identification_images_bool_exp,
            true
          );
        },
      },
      { name: 'identification_images_on_conflict' }
    );
  },
  get identification_images_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification() {
          return new InputNodeField(schema.identifications_order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_order_by' }
    );
  },
  get identification_images_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'identification_images_pk_columns_input' }
    );
  },
  get identification_images_select_column() {
    return new EnumNode({ name: 'identification_images_select_column' });
  },
  get identification_images_set_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get identification_id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'identification_images_set_input' }
    );
  },
  get identification_images_stddev_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_stddev_fields',
        extension: ((extensions as any) || {})
          .identification_images_stddev_fields,
      }
    );
  },
  get identification_images_stddev_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_stddev_order_by' }
    );
  },
  get identification_images_stddev_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .identification_images_stddev_pop_fields,
      }
    );
  },
  get identification_images_stddev_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_stddev_pop_order_by' }
    );
  },
  get identification_images_stddev_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .identification_images_stddev_samp_fields,
      }
    );
  },
  get identification_images_stddev_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_stddev_samp_order_by' }
    );
  },
  get identification_images_sum_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'identification_images_sum_fields',
        extension: ((extensions as any) || {}).identification_images_sum_fields,
      }
    );
  },
  get identification_images_sum_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_sum_order_by' }
    );
  },
  get identification_images_update_column() {
    return new EnumNode({ name: 'identification_images_update_column' });
  },
  get identification_images_var_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_var_pop_fields',
        extension: ((extensions as any) || {})
          .identification_images_var_pop_fields,
      }
    );
  },
  get identification_images_var_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_var_pop_order_by' }
    );
  },
  get identification_images_var_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_var_samp_fields',
        extension: ((extensions as any) || {})
          .identification_images_var_samp_fields,
      }
    );
  },
  get identification_images_var_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_var_samp_order_by' }
    );
  },
  get identification_images_variance_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get identification_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identification_images_variance_fields',
        extension: ((extensions as any) || {})
          .identification_images_variance_fields,
      }
    );
  },
  get identification_images_variance_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identification_images_variance_order_by' }
    );
  },
  get identifications() {
    return new ObjectNode(
      {
        get access_level_requested() {
          return new FieldNode(schema.String, undefined, true);
        },
        get auto_approved() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get auto_approved_identity() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get auto_approved_vehicle_usage() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get candidate_report() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get checkr_report() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get checkr_report_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get date_of_birth() {
          return new FieldNode(schema.date, undefined, true);
        },
        get expiration_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get identification_images() {
          return new FieldNode(
            new ArrayNode(schema.identification_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identification_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identification_images_aggregate() {
          return new FieldNode(
            schema.identification_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identification_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identity_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get image_url_back() {
          return new FieldNode(schema.String, undefined, true);
        },
        get image_url_front() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get middle_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get motor_vehicle_report() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ocr_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ownership_validation_image_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pictures() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get postal_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rejected_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scan_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_address() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get valid_for_identity_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_identity_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_vehicles_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_vehicles_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get vehicle_status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'identifications',
        extension: ((extensions as any) || {}).identifications,
      }
    );
  },
  get identifications_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.identifications_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.identifications, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'identifications_aggregate',
        extension: ((extensions as any) || {}).identifications_aggregate,
      }
    );
  },
  get identifications_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.identifications_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.identifications_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.identifications_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.identifications_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.identifications_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.identifications_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.identifications_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.identifications_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.identifications_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.identifications_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'identifications_aggregate_fields',
        extension: ((extensions as any) || {}).identifications_aggregate_fields,
      }
    );
  },
  get identifications_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.identifications_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.identifications_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.identifications_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.identifications_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.identifications_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.identifications_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.identifications_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.identifications_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.identifications_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.identifications_variance_order_by,
            true
          );
        },
      },
      { name: 'identifications_aggregate_order_by' }
    );
  },
  get identifications_append_input() {
    return new InputNode(
      {
        get candidate_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'identifications_append_input' }
    );
  },
  get identifications_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.identifications_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.identifications_on_conflict, true);
        },
      },
      { name: 'identifications_arr_rel_insert_input' }
    );
  },
  get identifications_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_avg_fields',
        extension: ((extensions as any) || {}).identifications_avg_fields,
      }
    );
  },
  get identifications_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_avg_order_by' }
    );
  },
  get identifications_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.identifications_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.identifications_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.identifications_bool_exp, true),
            true
          );
        },
        get access_level_requested() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get auto_approved() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get auto_approved_identity() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get auto_approved_vehicle_usage() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get candidate_report() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get checkr_report_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get city() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get date_of_birth() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get expiration_date() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get identification_images() {
          return new InputNodeField(
            schema.identification_images_bool_exp,
            true
          );
        },
        get identity_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get image_url_back() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get image_url_front() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get middle_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ocr_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ownership_validation_image_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get postal_code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get rejected_reason() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get scan_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get state() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get street_address() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get valid_for_identity_end() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get valid_for_identity_start() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get valid_for_vehicles_end() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get valid_for_vehicles_start() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get vehicle_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'identifications_bool_exp' }
    );
  },
  get identifications_constraint() {
    return new EnumNode({ name: 'identifications_constraint' });
  },
  get identifications_delete_at_path_input() {
    return new InputNode(
      {
        get candidate_report() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get checkr_report() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'identifications_delete_at_path_input' }
    );
  },
  get identifications_delete_elem_input() {
    return new InputNode(
      {
        get candidate_report() {
          return new InputNodeField(schema.Int, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.Int, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'identifications_delete_elem_input' }
    );
  },
  get identifications_delete_key_input() {
    return new InputNode(
      {
        get candidate_report() {
          return new InputNodeField(schema.String, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.String, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'identifications_delete_key_input' }
    );
  },
  get identifications_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'identifications_inc_input' }
    );
  },
  get identifications_insert_input() {
    return new InputNode(
      {
        get access_level_requested() {
          return new InputNodeField(schema.String, true);
        },
        get auto_approved() {
          return new InputNodeField(schema.Boolean, true);
        },
        get auto_approved_identity() {
          return new InputNodeField(schema.Boolean, true);
        },
        get auto_approved_vehicle_usage() {
          return new InputNodeField(schema.Boolean, true);
        },
        get candidate_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get checkr_report_id() {
          return new InputNodeField(schema.String, true);
        },
        get city() {
          return new InputNodeField(schema.String, true);
        },
        get date_of_birth() {
          return new InputNodeField(schema.date, true);
        },
        get expiration_date() {
          return new InputNodeField(schema.date, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get identification_images() {
          return new InputNodeField(
            schema.identification_images_arr_rel_insert_input,
            true
          );
        },
        get identity_status() {
          return new InputNodeField(schema.String, true);
        },
        get image_url_back() {
          return new InputNodeField(schema.String, true);
        },
        get image_url_front() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get middle_name() {
          return new InputNodeField(schema.String, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get number() {
          return new InputNodeField(schema.String, true);
        },
        get ocr_data() {
          return new InputNodeField(schema.String, true);
        },
        get ownership_validation_image_url() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get postal_code() {
          return new InputNodeField(schema.String, true);
        },
        get rejected_reason() {
          return new InputNodeField(schema.String, true);
        },
        get scan_data() {
          return new InputNodeField(schema.String, true);
        },
        get state() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get street_address() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get valid_for_identity_end() {
          return new InputNodeField(schema.date, true);
        },
        get valid_for_identity_start() {
          return new InputNodeField(schema.date, true);
        },
        get valid_for_vehicles_end() {
          return new InputNodeField(schema.date, true);
        },
        get valid_for_vehicles_start() {
          return new InputNodeField(schema.date, true);
        },
        get vehicle_status() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'identifications_insert_input' }
    );
  },
  get identifications_max_fields() {
    return new ObjectNode(
      {
        get access_level_requested() {
          return new FieldNode(schema.String, undefined, true);
        },
        get checkr_report_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get date_of_birth() {
          return new FieldNode(schema.date, undefined, true);
        },
        get expiration_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get identity_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get image_url_back() {
          return new FieldNode(schema.String, undefined, true);
        },
        get image_url_front() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get middle_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ocr_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ownership_validation_image_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get postal_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rejected_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scan_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_address() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get valid_for_identity_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_identity_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_vehicles_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_vehicles_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get vehicle_status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'identifications_max_fields',
        extension: ((extensions as any) || {}).identifications_max_fields,
      }
    );
  },
  get identifications_max_order_by() {
    return new InputNode(
      {
        get access_level_requested() {
          return new InputNodeField(schema.order_by, true);
        },
        get checkr_report_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get date_of_birth() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identity_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get image_url_back() {
          return new InputNodeField(schema.order_by, true);
        },
        get image_url_front() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get middle_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get number() {
          return new InputNodeField(schema.order_by, true);
        },
        get ocr_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get ownership_validation_image_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get postal_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get rejected_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get scan_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get state() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_address() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_identity_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_identity_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_vehicles_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_vehicles_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_max_order_by' }
    );
  },
  get identifications_min_fields() {
    return new ObjectNode(
      {
        get access_level_requested() {
          return new FieldNode(schema.String, undefined, true);
        },
        get checkr_report_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get date_of_birth() {
          return new FieldNode(schema.date, undefined, true);
        },
        get expiration_date() {
          return new FieldNode(schema.date, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get identity_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get image_url_back() {
          return new FieldNode(schema.String, undefined, true);
        },
        get image_url_front() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get middle_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ocr_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ownership_validation_image_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get postal_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get rejected_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get scan_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_address() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get valid_for_identity_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_identity_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_vehicles_end() {
          return new FieldNode(schema.date, undefined, true);
        },
        get valid_for_vehicles_start() {
          return new FieldNode(schema.date, undefined, true);
        },
        get vehicle_status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'identifications_min_fields',
        extension: ((extensions as any) || {}).identifications_min_fields,
      }
    );
  },
  get identifications_min_order_by() {
    return new InputNode(
      {
        get access_level_requested() {
          return new InputNodeField(schema.order_by, true);
        },
        get checkr_report_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get date_of_birth() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identity_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get image_url_back() {
          return new InputNodeField(schema.order_by, true);
        },
        get image_url_front() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get middle_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get number() {
          return new InputNodeField(schema.order_by, true);
        },
        get ocr_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get ownership_validation_image_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get postal_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get rejected_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get scan_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get state() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_address() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_identity_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_identity_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_vehicles_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_vehicles_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_min_order_by' }
    );
  },
  get identifications_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.identifications, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'identifications_mutation_response',
        extension: ((extensions as any) || {})
          .identifications_mutation_response,
      }
    );
  },
  get identifications_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.identifications_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.identifications_on_conflict, true);
        },
      },
      { name: 'identifications_obj_rel_insert_input' }
    );
  },
  get identifications_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.identifications_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.identifications_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.identifications_bool_exp, true);
        },
      },
      { name: 'identifications_on_conflict' }
    );
  },
  get identifications_order_by() {
    return new InputNode(
      {
        get access_level_requested() {
          return new InputNodeField(schema.order_by, true);
        },
        get auto_approved() {
          return new InputNodeField(schema.order_by, true);
        },
        get auto_approved_identity() {
          return new InputNodeField(schema.order_by, true);
        },
        get auto_approved_vehicle_usage() {
          return new InputNodeField(schema.order_by, true);
        },
        get candidate_report() {
          return new InputNodeField(schema.order_by, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.order_by, true);
        },
        get checkr_report_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get date_of_birth() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identification_images_aggregate() {
          return new InputNodeField(
            schema.identification_images_aggregate_order_by,
            true
          );
        },
        get identity_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get image_url_back() {
          return new InputNodeField(schema.order_by, true);
        },
        get image_url_front() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get middle_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get number() {
          return new InputNodeField(schema.order_by, true);
        },
        get ocr_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get ownership_validation_image_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get pictures() {
          return new InputNodeField(schema.order_by, true);
        },
        get postal_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get rejected_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get scan_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get state() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_address() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_identity_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_identity_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_vehicles_end() {
          return new InputNodeField(schema.order_by, true);
        },
        get valid_for_vehicles_start() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_order_by' }
    );
  },
  get identifications_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'identifications_pk_columns_input' }
    );
  },
  get identifications_prepend_input() {
    return new InputNode(
      {
        get candidate_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'identifications_prepend_input' }
    );
  },
  get identifications_select_column() {
    return new EnumNode({ name: 'identifications_select_column' });
  },
  get identifications_set_input() {
    return new InputNode(
      {
        get access_level_requested() {
          return new InputNodeField(schema.String, true);
        },
        get auto_approved() {
          return new InputNodeField(schema.Boolean, true);
        },
        get auto_approved_identity() {
          return new InputNodeField(schema.Boolean, true);
        },
        get auto_approved_vehicle_usage() {
          return new InputNodeField(schema.Boolean, true);
        },
        get candidate_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get checkr_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get checkr_report_id() {
          return new InputNodeField(schema.String, true);
        },
        get city() {
          return new InputNodeField(schema.String, true);
        },
        get date_of_birth() {
          return new InputNodeField(schema.date, true);
        },
        get expiration_date() {
          return new InputNodeField(schema.date, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get identity_status() {
          return new InputNodeField(schema.String, true);
        },
        get image_url_back() {
          return new InputNodeField(schema.String, true);
        },
        get image_url_front() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get middle_name() {
          return new InputNodeField(schema.String, true);
        },
        get motor_vehicle_report() {
          return new InputNodeField(schema.jsonb, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get number() {
          return new InputNodeField(schema.String, true);
        },
        get ocr_data() {
          return new InputNodeField(schema.String, true);
        },
        get ownership_validation_image_url() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get postal_code() {
          return new InputNodeField(schema.String, true);
        },
        get rejected_reason() {
          return new InputNodeField(schema.String, true);
        },
        get scan_data() {
          return new InputNodeField(schema.String, true);
        },
        get state() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get street_address() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get valid_for_identity_end() {
          return new InputNodeField(schema.date, true);
        },
        get valid_for_identity_start() {
          return new InputNodeField(schema.date, true);
        },
        get valid_for_vehicles_end() {
          return new InputNodeField(schema.date, true);
        },
        get valid_for_vehicles_start() {
          return new InputNodeField(schema.date, true);
        },
        get vehicle_status() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'identifications_set_input' }
    );
  },
  get identifications_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_stddev_fields',
        extension: ((extensions as any) || {}).identifications_stddev_fields,
      }
    );
  },
  get identifications_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_stddev_order_by' }
    );
  },
  get identifications_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .identifications_stddev_pop_fields,
      }
    );
  },
  get identifications_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_stddev_pop_order_by' }
    );
  },
  get identifications_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .identifications_stddev_samp_fields,
      }
    );
  },
  get identifications_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_stddev_samp_order_by' }
    );
  },
  get identifications_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'identifications_sum_fields',
        extension: ((extensions as any) || {}).identifications_sum_fields,
      }
    );
  },
  get identifications_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_sum_order_by' }
    );
  },
  get identifications_update_column() {
    return new EnumNode({ name: 'identifications_update_column' });
  },
  get identifications_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_var_pop_fields',
        extension: ((extensions as any) || {}).identifications_var_pop_fields,
      }
    );
  },
  get identifications_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_var_pop_order_by' }
    );
  },
  get identifications_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_var_samp_fields',
        extension: ((extensions as any) || {}).identifications_var_samp_fields,
      }
    );
  },
  get identifications_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_var_samp_order_by' }
    );
  },
  get identifications_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'identifications_variance_fields',
        extension: ((extensions as any) || {}).identifications_variance_fields,
      }
    );
  },
  get identifications_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'identifications_variance_order_by' }
    );
  },
  get interval() {
    return new ScalarNode({
      name: 'interval',
      extension: ((extensions as any) || {}).interval,
    });
  },
  get interval_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.interval, true);
        },
        get _gt() {
          return new InputNodeField(schema.interval, true);
        },
        get _gte() {
          return new InputNodeField(schema.interval, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.interval, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.interval, true);
        },
        get _lte() {
          return new InputNodeField(schema.interval, true);
        },
        get _neq() {
          return new InputNodeField(schema.interval, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.interval, true), true);
        },
      },
      { name: 'interval_comparison_exp' }
    );
  },
  get item_images() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'item_images',
        extension: ((extensions as any) || {}).item_images,
      }
    );
  },
  get item_images_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.item_images_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.item_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_images_aggregate',
        extension: ((extensions as any) || {}).item_images_aggregate,
      }
    );
  },
  get item_images_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.item_images_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.item_images_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.item_images_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.item_images_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.item_images_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.item_images_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.item_images_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.item_images_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.item_images_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.item_images_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'item_images_aggregate_fields',
        extension: ((extensions as any) || {}).item_images_aggregate_fields,
      }
    );
  },
  get item_images_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.item_images_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.item_images_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.item_images_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.item_images_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.item_images_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.item_images_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.item_images_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.item_images_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.item_images_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.item_images_variance_order_by, true);
        },
      },
      { name: 'item_images_aggregate_order_by' }
    );
  },
  get item_images_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.item_images_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.item_images_on_conflict, true);
        },
      },
      { name: 'item_images_arr_rel_insert_input' }
    );
  },
  get item_images_avg_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_avg_fields',
        extension: ((extensions as any) || {}).item_images_avg_fields,
      }
    );
  },
  get item_images_avg_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_avg_order_by' }
    );
  },
  get item_images_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.item_images_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.item_images_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.item_images_bool_exp, true),
            true
          );
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get height() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get label() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get quality() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get uuid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get width() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'item_images_bool_exp' }
    );
  },
  get item_images_constraint() {
    return new EnumNode({ name: 'item_images_constraint' });
  },
  get item_images_inc_input() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'item_images_inc_input' }
    );
  },
  get item_images_insert_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'item_images_insert_input' }
    );
  },
  get item_images_max_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'item_images_max_fields',
        extension: ((extensions as any) || {}).item_images_max_fields,
      }
    );
  },
  get item_images_max_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_max_order_by' }
    );
  },
  get item_images_min_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'item_images_min_fields',
        extension: ((extensions as any) || {}).item_images_min_fields,
      }
    );
  },
  get item_images_min_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_min_order_by' }
    );
  },
  get item_images_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.item_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_images_mutation_response',
        extension: ((extensions as any) || {}).item_images_mutation_response,
      }
    );
  },
  get item_images_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.item_images_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.item_images_on_conflict, true);
        },
      },
      { name: 'item_images_obj_rel_insert_input' }
    );
  },
  get item_images_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.item_images_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.item_images_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.item_images_bool_exp, true);
        },
      },
      { name: 'item_images_on_conflict' }
    );
  },
  get item_images_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_order_by' }
    );
  },
  get item_images_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'item_images_pk_columns_input' }
    );
  },
  get item_images_select_column() {
    return new EnumNode({ name: 'item_images_select_column' });
  },
  get item_images_set_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'item_images_set_input' }
    );
  },
  get item_images_stddev_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_stddev_fields',
        extension: ((extensions as any) || {}).item_images_stddev_fields,
      }
    );
  },
  get item_images_stddev_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_stddev_order_by' }
    );
  },
  get item_images_stddev_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_stddev_pop_fields',
        extension: ((extensions as any) || {}).item_images_stddev_pop_fields,
      }
    );
  },
  get item_images_stddev_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_stddev_pop_order_by' }
    );
  },
  get item_images_stddev_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_stddev_samp_fields',
        extension: ((extensions as any) || {}).item_images_stddev_samp_fields,
      }
    );
  },
  get item_images_stddev_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_stddev_samp_order_by' }
    );
  },
  get item_images_sum_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'item_images_sum_fields',
        extension: ((extensions as any) || {}).item_images_sum_fields,
      }
    );
  },
  get item_images_sum_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_sum_order_by' }
    );
  },
  get item_images_update_column() {
    return new EnumNode({ name: 'item_images_update_column' });
  },
  get item_images_var_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_var_pop_fields',
        extension: ((extensions as any) || {}).item_images_var_pop_fields,
      }
    );
  },
  get item_images_var_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_var_pop_order_by' }
    );
  },
  get item_images_var_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_var_samp_fields',
        extension: ((extensions as any) || {}).item_images_var_samp_fields,
      }
    );
  },
  get item_images_var_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_var_samp_order_by' }
    );
  },
  get item_images_variance_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_images_variance_fields',
        extension: ((extensions as any) || {}).item_images_variance_fields,
      }
    );
  },
  get item_images_variance_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_images_variance_order_by' }
    );
  },
  get item_inspection_steps() {
    return new ObjectNode(
      {
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get coordinates() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get itemInspectionStepByPreviousInspectionStepId() {
          return new FieldNode(schema.item_inspection_steps, undefined, true);
        },
        get itemInspectionStepsByPreviousInspectionStepId() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get itemInspectionStepsByPreviousInspectionStepId_aggregate() {
          return new FieldNode(
            schema.item_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_inspection_step() {
          return new FieldNode(schema.item_inspection_steps, undefined, true);
        },
        get item_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_inspection_steps_aggregate() {
          return new FieldNode(
            schema.item_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pictures() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'item_inspection_steps',
        extension: ((extensions as any) || {}).item_inspection_steps,
      }
    );
  },
  get item_inspection_steps_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.item_inspection_steps_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_inspection_steps_aggregate',
        extension: ((extensions as any) || {}).item_inspection_steps_aggregate,
      }
    );
  },
  get item_inspection_steps_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.item_inspection_steps_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.item_inspection_steps_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.item_inspection_steps_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.item_inspection_steps_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.item_inspection_steps_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.item_inspection_steps_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.item_inspection_steps_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.item_inspection_steps_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.item_inspection_steps_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.item_inspection_steps_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'item_inspection_steps_aggregate_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_aggregate_fields,
      }
    );
  },
  get item_inspection_steps_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.item_inspection_steps_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.item_inspection_steps_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.item_inspection_steps_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.item_inspection_steps_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.item_inspection_steps_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.item_inspection_steps_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.item_inspection_steps_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.item_inspection_steps_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.item_inspection_steps_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.item_inspection_steps_variance_order_by,
            true
          );
        },
      },
      { name: 'item_inspection_steps_aggregate_order_by' }
    );
  },
  get item_inspection_steps_append_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'item_inspection_steps_append_input' }
    );
  },
  get item_inspection_steps_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.item_inspection_steps_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.item_inspection_steps_on_conflict,
            true
          );
        },
      },
      { name: 'item_inspection_steps_arr_rel_insert_input' }
    );
  },
  get item_inspection_steps_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_avg_fields',
        extension: ((extensions as any) || {}).item_inspection_steps_avg_fields,
      }
    );
  },
  get item_inspection_steps_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_avg_order_by' }
    );
  },
  get item_inspection_steps_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.item_inspection_steps_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.item_inspection_steps_bool_exp, true),
            true
          );
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get itemInspectionStepByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
        get itemInspectionStepsByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
        get item_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get item_inspection_step() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
        get item_inspection_steps() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
        get label() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'item_inspection_steps_bool_exp' }
    );
  },
  get item_inspection_steps_constraint() {
    return new EnumNode({ name: 'item_inspection_steps_constraint' });
  },
  get item_inspection_steps_delete_at_path_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'item_inspection_steps_delete_at_path_input' }
    );
  },
  get item_inspection_steps_delete_elem_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'item_inspection_steps_delete_elem_input' }
    );
  },
  get item_inspection_steps_delete_key_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'item_inspection_steps_delete_key_input' }
    );
  },
  get item_inspection_steps_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'item_inspection_steps_inc_input' }
    );
  },
  get item_inspection_steps_insert_input() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get itemInspectionStepByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.item_inspection_steps_obj_rel_insert_input,
            true
          );
        },
        get itemInspectionStepsByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.item_inspection_steps_arr_rel_insert_input,
            true
          );
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_inspection_step() {
          return new InputNodeField(
            schema.item_inspection_steps_obj_rel_insert_input,
            true
          );
        },
        get item_inspection_steps() {
          return new InputNodeField(
            schema.item_inspection_steps_arr_rel_insert_input,
            true
          );
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'item_inspection_steps_insert_input' }
    );
  },
  get item_inspection_steps_max_fields() {
    return new ObjectNode(
      {
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_max_fields',
        extension: ((extensions as any) || {}).item_inspection_steps_max_fields,
      }
    );
  },
  get item_inspection_steps_max_order_by() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_max_order_by' }
    );
  },
  get item_inspection_steps_min_fields() {
    return new ObjectNode(
      {
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_min_fields',
        extension: ((extensions as any) || {}).item_inspection_steps_min_fields,
      }
    );
  },
  get item_inspection_steps_min_order_by() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_min_order_by' }
    );
  },
  get item_inspection_steps_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_inspection_steps_mutation_response',
        extension: ((extensions as any) || {})
          .item_inspection_steps_mutation_response,
      }
    );
  },
  get item_inspection_steps_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.item_inspection_steps_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.item_inspection_steps_on_conflict,
            true
          );
        },
      },
      { name: 'item_inspection_steps_obj_rel_insert_input' }
    );
  },
  get item_inspection_steps_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.item_inspection_steps_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.item_inspection_steps_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
      },
      { name: 'item_inspection_steps_on_conflict' }
    );
  },
  get item_inspection_steps_order_by() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get coordinates() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get itemInspectionStepByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.item_inspection_steps_order_by,
            true
          );
        },
        get itemInspectionStepsByPreviousInspectionStepId_aggregate() {
          return new InputNodeField(
            schema.item_inspection_steps_aggregate_order_by,
            true
          );
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_inspection_step() {
          return new InputNodeField(
            schema.item_inspection_steps_order_by,
            true
          );
        },
        get item_inspection_steps_aggregate() {
          return new InputNodeField(
            schema.item_inspection_steps_aggregate_order_by,
            true
          );
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get pictures() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_order_by' }
    );
  },
  get item_inspection_steps_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'item_inspection_steps_pk_columns_input' }
    );
  },
  get item_inspection_steps_prepend_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'item_inspection_steps_prepend_input' }
    );
  },
  get item_inspection_steps_select_column() {
    return new EnumNode({ name: 'item_inspection_steps_select_column' });
  },
  get item_inspection_steps_set_input() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'item_inspection_steps_set_input' }
    );
  },
  get item_inspection_steps_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_stddev_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_stddev_fields,
      }
    );
  },
  get item_inspection_steps_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_stddev_order_by' }
    );
  },
  get item_inspection_steps_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_stddev_pop_fields,
      }
    );
  },
  get item_inspection_steps_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_stddev_pop_order_by' }
    );
  },
  get item_inspection_steps_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_stddev_samp_fields,
      }
    );
  },
  get item_inspection_steps_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_stddev_samp_order_by' }
    );
  },
  get item_inspection_steps_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_sum_fields',
        extension: ((extensions as any) || {}).item_inspection_steps_sum_fields,
      }
    );
  },
  get item_inspection_steps_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_sum_order_by' }
    );
  },
  get item_inspection_steps_update_column() {
    return new EnumNode({ name: 'item_inspection_steps_update_column' });
  },
  get item_inspection_steps_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_var_pop_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_var_pop_fields,
      }
    );
  },
  get item_inspection_steps_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_var_pop_order_by' }
    );
  },
  get item_inspection_steps_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_var_samp_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_var_samp_fields,
      }
    );
  },
  get item_inspection_steps_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_var_samp_order_by' }
    );
  },
  get item_inspection_steps_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_inspection_steps_variance_fields',
        extension: ((extensions as any) || {})
          .item_inspection_steps_variance_fields,
      }
    );
  },
  get item_inspection_steps_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_inspection_steps_variance_order_by' }
    );
  },
  get item_reviews() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'item_reviews',
        extension: ((extensions as any) || {}).item_reviews,
      }
    );
  },
  get item_reviews_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.item_reviews_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_reviews_aggregate',
        extension: ((extensions as any) || {}).item_reviews_aggregate,
      }
    );
  },
  get item_reviews_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.item_reviews_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.item_reviews_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.item_reviews_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.item_reviews_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.item_reviews_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.item_reviews_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.item_reviews_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.item_reviews_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.item_reviews_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.item_reviews_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'item_reviews_aggregate_fields',
        extension: ((extensions as any) || {}).item_reviews_aggregate_fields,
      }
    );
  },
  get item_reviews_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.item_reviews_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.item_reviews_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.item_reviews_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.item_reviews_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.item_reviews_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.item_reviews_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.item_reviews_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.item_reviews_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.item_reviews_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.item_reviews_variance_order_by,
            true
          );
        },
      },
      { name: 'item_reviews_aggregate_order_by' }
    );
  },
  get item_reviews_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.item_reviews_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.item_reviews_on_conflict, true);
        },
      },
      { name: 'item_reviews_arr_rel_insert_input' }
    );
  },
  get item_reviews_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_avg_fields',
        extension: ((extensions as any) || {}).item_reviews_avg_fields,
      }
    );
  },
  get item_reviews_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_avg_order_by' }
    );
  },
  get item_reviews_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.item_reviews_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.item_reviews_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.item_reviews_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get rating() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'item_reviews_bool_exp' }
    );
  },
  get item_reviews_constraint() {
    return new EnumNode({ name: 'item_reviews_constraint' });
  },
  get item_reviews_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get rating() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'item_reviews_inc_input' }
    );
  },
  get item_reviews_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get rating() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'item_reviews_insert_input' }
    );
  },
  get item_reviews_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'item_reviews_max_fields',
        extension: ((extensions as any) || {}).item_reviews_max_fields,
      }
    );
  },
  get item_reviews_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_max_order_by' }
    );
  },
  get item_reviews_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'item_reviews_min_fields',
        extension: ((extensions as any) || {}).item_reviews_min_fields,
      }
    );
  },
  get item_reviews_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_min_order_by' }
    );
  },
  get item_reviews_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_reviews_mutation_response',
        extension: ((extensions as any) || {}).item_reviews_mutation_response,
      }
    );
  },
  get item_reviews_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.item_reviews_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.item_reviews_on_conflict, true);
        },
      },
      { name: 'item_reviews_obj_rel_insert_input' }
    );
  },
  get item_reviews_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.item_reviews_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.item_reviews_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.item_reviews_bool_exp, true);
        },
      },
      { name: 'item_reviews_on_conflict' }
    );
  },
  get item_reviews_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'item_reviews_order_by' }
    );
  },
  get item_reviews_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'item_reviews_pk_columns_input' }
    );
  },
  get item_reviews_select_column() {
    return new EnumNode({ name: 'item_reviews_select_column' });
  },
  get item_reviews_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get rating() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'item_reviews_set_input' }
    );
  },
  get item_reviews_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_stddev_fields',
        extension: ((extensions as any) || {}).item_reviews_stddev_fields,
      }
    );
  },
  get item_reviews_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_stddev_order_by' }
    );
  },
  get item_reviews_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_stddev_pop_fields',
        extension: ((extensions as any) || {}).item_reviews_stddev_pop_fields,
      }
    );
  },
  get item_reviews_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_stddev_pop_order_by' }
    );
  },
  get item_reviews_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_stddev_samp_fields',
        extension: ((extensions as any) || {}).item_reviews_stddev_samp_fields,
      }
    );
  },
  get item_reviews_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_stddev_samp_order_by' }
    );
  },
  get item_reviews_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'item_reviews_sum_fields',
        extension: ((extensions as any) || {}).item_reviews_sum_fields,
      }
    );
  },
  get item_reviews_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_sum_order_by' }
    );
  },
  get item_reviews_update_column() {
    return new EnumNode({ name: 'item_reviews_update_column' });
  },
  get item_reviews_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_var_pop_fields',
        extension: ((extensions as any) || {}).item_reviews_var_pop_fields,
      }
    );
  },
  get item_reviews_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_var_pop_order_by' }
    );
  },
  get item_reviews_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_var_samp_fields',
        extension: ((extensions as any) || {}).item_reviews_var_samp_fields,
      }
    );
  },
  get item_reviews_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_var_samp_order_by' }
    );
  },
  get item_reviews_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_variance_fields',
        extension: ((extensions as any) || {}).item_reviews_variance_fields,
      }
    );
  },
  get item_reviews_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_variance_order_by' }
    );
  },
  get item_reviews_view() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'item_reviews_view',
        extension: ((extensions as any) || {}).item_reviews_view,
      }
    );
  },
  get item_reviews_view_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.item_reviews_view_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews_view, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_reviews_view_aggregate',
        extension: ((extensions as any) || {}).item_reviews_view_aggregate,
      }
    );
  },
  get item_reviews_view_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.item_reviews_view_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.item_reviews_view_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.item_reviews_view_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.item_reviews_view_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.item_reviews_view_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.item_reviews_view_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.item_reviews_view_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.item_reviews_view_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.item_reviews_view_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.item_reviews_view_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'item_reviews_view_aggregate_fields',
        extension: ((extensions as any) || {})
          .item_reviews_view_aggregate_fields,
      }
    );
  },
  get item_reviews_view_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.item_reviews_view_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.item_reviews_view_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.item_reviews_view_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.item_reviews_view_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.item_reviews_view_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.item_reviews_view_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.item_reviews_view_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.item_reviews_view_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.item_reviews_view_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.item_reviews_view_variance_order_by,
            true
          );
        },
      },
      { name: 'item_reviews_view_aggregate_order_by' }
    );
  },
  get item_reviews_view_avg_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_avg_fields',
        extension: ((extensions as any) || {}).item_reviews_view_avg_fields,
      }
    );
  },
  get item_reviews_view_avg_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_avg_order_by' }
    );
  },
  get item_reviews_view_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.item_reviews_view_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.item_reviews_view_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.item_reviews_view_bool_exp, true),
            true
          );
        },
        get estimated_cost() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get final_cost() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get rating() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reviewer() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'item_reviews_view_bool_exp' }
    );
  },
  get item_reviews_view_max_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_max_fields',
        extension: ((extensions as any) || {}).item_reviews_view_max_fields,
      }
    );
  },
  get item_reviews_view_max_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_max_order_by' }
    );
  },
  get item_reviews_view_min_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_min_fields',
        extension: ((extensions as any) || {}).item_reviews_view_min_fields,
      }
    );
  },
  get item_reviews_view_min_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_min_order_by' }
    );
  },
  get item_reviews_view_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_order_by' }
    );
  },
  get item_reviews_view_select_column() {
    return new EnumNode({ name: 'item_reviews_view_select_column' });
  },
  get item_reviews_view_stddev_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_stddev_fields',
        extension: ((extensions as any) || {}).item_reviews_view_stddev_fields,
      }
    );
  },
  get item_reviews_view_stddev_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_stddev_order_by' }
    );
  },
  get item_reviews_view_stddev_pop_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .item_reviews_view_stddev_pop_fields,
      }
    );
  },
  get item_reviews_view_stddev_pop_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_stddev_pop_order_by' }
    );
  },
  get item_reviews_view_stddev_samp_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .item_reviews_view_stddev_samp_fields,
      }
    );
  },
  get item_reviews_view_stddev_samp_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_stddev_samp_order_by' }
    );
  },
  get item_reviews_view_sum_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_sum_fields',
        extension: ((extensions as any) || {}).item_reviews_view_sum_fields,
      }
    );
  },
  get item_reviews_view_sum_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_sum_order_by' }
    );
  },
  get item_reviews_view_var_pop_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_var_pop_fields',
        extension: ((extensions as any) || {}).item_reviews_view_var_pop_fields,
      }
    );
  },
  get item_reviews_view_var_pop_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_var_pop_order_by' }
    );
  },
  get item_reviews_view_var_samp_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_var_samp_fields',
        extension: ((extensions as any) || {})
          .item_reviews_view_var_samp_fields,
      }
    );
  },
  get item_reviews_view_var_samp_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_var_samp_order_by' }
    );
  },
  get item_reviews_view_variance_fields() {
    return new ObjectNode(
      {
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_reviews_view_variance_fields',
        extension: ((extensions as any) || {})
          .item_reviews_view_variance_fields,
      }
    );
  },
  get item_reviews_view_variance_order_by() {
    return new InputNode(
      {
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_reviews_view_variance_order_by' }
    );
  },
  get item_stakeholders() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'item_stakeholders',
        extension: ((extensions as any) || {}).item_stakeholders,
      }
    );
  },
  get item_stakeholders_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.item_stakeholders_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.item_stakeholders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_stakeholders_aggregate',
        extension: ((extensions as any) || {}).item_stakeholders_aggregate,
      }
    );
  },
  get item_stakeholders_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.item_stakeholders_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.item_stakeholders_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.item_stakeholders_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.item_stakeholders_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.item_stakeholders_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.item_stakeholders_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.item_stakeholders_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.item_stakeholders_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.item_stakeholders_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.item_stakeholders_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'item_stakeholders_aggregate_fields',
        extension: ((extensions as any) || {})
          .item_stakeholders_aggregate_fields,
      }
    );
  },
  get item_stakeholders_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.item_stakeholders_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.item_stakeholders_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.item_stakeholders_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.item_stakeholders_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.item_stakeholders_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.item_stakeholders_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.item_stakeholders_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.item_stakeholders_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.item_stakeholders_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.item_stakeholders_variance_order_by,
            true
          );
        },
      },
      { name: 'item_stakeholders_aggregate_order_by' }
    );
  },
  get item_stakeholders_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.item_stakeholders_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.item_stakeholders_on_conflict, true);
        },
      },
      { name: 'item_stakeholders_arr_rel_insert_input' }
    );
  },
  get item_stakeholders_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_avg_fields',
        extension: ((extensions as any) || {}).item_stakeholders_avg_fields,
      }
    );
  },
  get item_stakeholders_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_avg_order_by' }
    );
  },
  get item_stakeholders_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.item_stakeholders_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.item_stakeholders_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.item_stakeholders_bool_exp, true),
            true
          );
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'item_stakeholders_bool_exp' }
    );
  },
  get item_stakeholders_constraint() {
    return new EnumNode({ name: 'item_stakeholders_constraint' });
  },
  get item_stakeholders_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'item_stakeholders_inc_input' }
    );
  },
  get item_stakeholders_insert_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'item_stakeholders_insert_input' }
    );
  },
  get item_stakeholders_max_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_max_fields',
        extension: ((extensions as any) || {}).item_stakeholders_max_fields,
      }
    );
  },
  get item_stakeholders_max_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_max_order_by' }
    );
  },
  get item_stakeholders_min_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_min_fields',
        extension: ((extensions as any) || {}).item_stakeholders_min_fields,
      }
    );
  },
  get item_stakeholders_min_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_min_order_by' }
    );
  },
  get item_stakeholders_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.item_stakeholders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'item_stakeholders_mutation_response',
        extension: ((extensions as any) || {})
          .item_stakeholders_mutation_response,
      }
    );
  },
  get item_stakeholders_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.item_stakeholders_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.item_stakeholders_on_conflict, true);
        },
      },
      { name: 'item_stakeholders_obj_rel_insert_input' }
    );
  },
  get item_stakeholders_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.item_stakeholders_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.item_stakeholders_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.item_stakeholders_bool_exp, true);
        },
      },
      { name: 'item_stakeholders_on_conflict' }
    );
  },
  get item_stakeholders_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_order_by' }
    );
  },
  get item_stakeholders_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'item_stakeholders_pk_columns_input' }
    );
  },
  get item_stakeholders_select_column() {
    return new EnumNode({ name: 'item_stakeholders_select_column' });
  },
  get item_stakeholders_set_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'item_stakeholders_set_input' }
    );
  },
  get item_stakeholders_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_stddev_fields',
        extension: ((extensions as any) || {}).item_stakeholders_stddev_fields,
      }
    );
  },
  get item_stakeholders_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_stddev_order_by' }
    );
  },
  get item_stakeholders_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .item_stakeholders_stddev_pop_fields,
      }
    );
  },
  get item_stakeholders_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_stddev_pop_order_by' }
    );
  },
  get item_stakeholders_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .item_stakeholders_stddev_samp_fields,
      }
    );
  },
  get item_stakeholders_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_stddev_samp_order_by' }
    );
  },
  get item_stakeholders_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_sum_fields',
        extension: ((extensions as any) || {}).item_stakeholders_sum_fields,
      }
    );
  },
  get item_stakeholders_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_sum_order_by' }
    );
  },
  get item_stakeholders_update_column() {
    return new EnumNode({ name: 'item_stakeholders_update_column' });
  },
  get item_stakeholders_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_var_pop_fields',
        extension: ((extensions as any) || {}).item_stakeholders_var_pop_fields,
      }
    );
  },
  get item_stakeholders_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_var_pop_order_by' }
    );
  },
  get item_stakeholders_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_var_samp_fields',
        extension: ((extensions as any) || {})
          .item_stakeholders_var_samp_fields,
      }
    );
  },
  get item_stakeholders_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_var_samp_order_by' }
    );
  },
  get item_stakeholders_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'item_stakeholders_variance_fields',
        extension: ((extensions as any) || {})
          .item_stakeholders_variance_fields,
      }
    );
  },
  get item_stakeholders_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'item_stakeholders_variance_order_by' }
    );
  },
  get items() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get active() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get additional_charges() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_by_admin_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get categories() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get dropoff_instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get extra_vehicle_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get featured_image_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_published_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get flagged_for_moderation() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get fleet_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_transactions() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fvip_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get instabook() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get is_vehicle() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get item_images() {
          return new FieldNode(
            new ArrayNode(schema.item_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_images_aggregate() {
          return new FieldNode(
            schema.item_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_inspection_steps_aggregate() {
          return new FieldNode(
            schema.item_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_reviews() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_aggregate() {
          return new FieldNode(
            schema.item_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.item_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders_aggregate() {
          return new FieldNode(
            schema.item_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get itemsCommunityNeedsByItemId() {
          return new FieldNode(
            new ArrayNode(schema.items_community_needs, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get itemsCommunityNeedsByItemId_aggregate() {
          return new FieldNode(
            schema.items_community_needs_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items_community_needs() {
          return new FieldNode(
            new ArrayNode(schema.items_community_needs, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items_community_needs_aggregate() {
          return new FieldNode(
            schema.items_community_needs_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get list_items() {
          return new FieldNode(
            new ArrayNode(schema.list_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get list_items_aggregate() {
          return new FieldNode(
            schema.list_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get location() {
          return new FieldNode(schema.locations, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get market() {
          return new FieldNode(schema.markets, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get pickup_instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pictures() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get posted_to_craigslist_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get rates() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get reservation_reviews() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservations() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_aggregate() {
          return new FieldNode(
            schema.reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get search_vector() {
          return new FieldNode(schema.tsvector, undefined, true);
        },
        get seeded() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get stats_items() {
          return new FieldNode(
            new ArrayNode(schema.stats_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_items_aggregate() {
          return new FieldNode(
            schema.stats_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sub_category() {
          return new FieldNode(schema.String, undefined, true);
        },
        get telematic_devices() {
          return new FieldNode(
            new ArrayNode(schema.telematic_devices, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_devices_aggregate() {
          return new FieldNode(
            schema.telematic_devices_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get time_blocks() {
          return new FieldNode(
            new ArrayNode(schema.time_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get time_blocks_aggregate() {
          return new FieldNode(
            schema.time_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get upvote_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get upvotes() {
          return new FieldNode(
            new ArrayNode(schema.upvotes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get upvotes_aggregate() {
          return new FieldNode(
            schema.upvotes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByFvipId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByMaintenanceManagerId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByUserId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      { name: 'items', extension: ((extensions as any) || {}).items }
    );
  },
  get items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.items_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'items_aggregate',
        extension: ((extensions as any) || {}).items_aggregate,
      }
    );
  },
  get items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.items_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.items_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.items_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.items_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.items_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(
            schema.items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.items_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.items_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.items_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.items_variance_fields, undefined, true);
        },
      },
      {
        name: 'items_aggregate_fields',
        extension: ((extensions as any) || {}).items_aggregate_fields,
      }
    );
  },
  get items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.items_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.items_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.items_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.items_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.items_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.items_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.items_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.items_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.items_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.items_variance_order_by, true);
        },
      },
      { name: 'items_aggregate_order_by' }
    );
  },
  get items_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'items_append_input' }
    );
  },
  get items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.items_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.items_on_conflict, true);
        },
      },
      { name: 'items_arr_rel_insert_input' }
    );
  },
  get items_avg_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_avg_fields',
        extension: ((extensions as any) || {}).items_avg_fields,
      }
    );
  },
  get items_avg_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_avg_order_by' }
    );
  },
  get items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.items_bool_exp, true),
            true
          );
        },
        get account_manager_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get active() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get additional_charges() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get approved_by_admin_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get booking_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get categories() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get dropoff_instructions() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get extra_vehicle_data() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get featured_image_identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get first_published_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get fleet_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fluid_transactions() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get instabook() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get item_images() {
          return new InputNodeField(schema.item_images_bool_exp, true);
        },
        get item_inspection_steps() {
          return new InputNodeField(
            schema.item_inspection_steps_bool_exp,
            true
          );
        },
        get item_reviews() {
          return new InputNodeField(schema.item_reviews_bool_exp, true);
        },
        get item_stakeholders() {
          return new InputNodeField(schema.item_stakeholders_bool_exp, true);
        },
        get itemsCommunityNeedsByItemId() {
          return new InputNodeField(
            schema.items_community_needs_bool_exp,
            true
          );
        },
        get items_community_needs() {
          return new InputNodeField(
            schema.items_community_needs_bool_exp,
            true
          );
        },
        get list_items() {
          return new InputNodeField(schema.list_items_bool_exp, true);
        },
        get location() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
        get location_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get market() {
          return new InputNodeField(schema.markets_bool_exp, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get pickup_instructions() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get posted_to_craigslist_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get reservation_reviews() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get reservations() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get search_vector() {
          return new InputNodeField(schema.tsvector_comparison_exp, true);
        },
        get seeded() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get stats_items() {
          return new InputNodeField(schema.stats_items_bool_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get sub_category() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get telematic_devices() {
          return new InputNodeField(schema.telematic_devices_bool_exp, true);
        },
        get telematic_records() {
          return new InputNodeField(schema.telematic_records_bool_exp, true);
        },
        get time_blocks() {
          return new InputNodeField(schema.time_blocks_bool_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get upvotes() {
          return new InputNodeField(schema.upvotes_bool_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByFvipId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByMaintenanceManagerId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByUserId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'items_bool_exp' }
    );
  },
  get items_community_needs() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get itemByItemId() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'items_community_needs',
        extension: ((extensions as any) || {}).items_community_needs,
      }
    );
  },
  get items_community_needs_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.items_community_needs_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.items_community_needs, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'items_community_needs_aggregate',
        extension: ((extensions as any) || {}).items_community_needs_aggregate,
      }
    );
  },
  get items_community_needs_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.items_community_needs_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.items_community_needs_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.items_community_needs_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.items_community_needs_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.items_community_needs_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.items_community_needs_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.items_community_needs_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.items_community_needs_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.items_community_needs_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.items_community_needs_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'items_community_needs_aggregate_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_aggregate_fields,
      }
    );
  },
  get items_community_needs_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.items_community_needs_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.items_community_needs_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.items_community_needs_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.items_community_needs_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.items_community_needs_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.items_community_needs_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.items_community_needs_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.items_community_needs_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.items_community_needs_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.items_community_needs_variance_order_by,
            true
          );
        },
      },
      { name: 'items_community_needs_aggregate_order_by' }
    );
  },
  get items_community_needs_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.items_community_needs_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.items_community_needs_on_conflict,
            true
          );
        },
      },
      { name: 'items_community_needs_arr_rel_insert_input' }
    );
  },
  get items_community_needs_avg_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_avg_fields',
        extension: ((extensions as any) || {}).items_community_needs_avg_fields,
      }
    );
  },
  get items_community_needs_avg_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_avg_order_by' }
    );
  },
  get items_community_needs_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.items_community_needs_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.items_community_needs_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.items_community_needs_bool_exp, true),
            true
          );
        },
        get community_need_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get itemByItemId() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'items_community_needs_bool_exp' }
    );
  },
  get items_community_needs_constraint() {
    return new EnumNode({ name: 'items_community_needs_constraint' });
  },
  get items_community_needs_inc_input() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'items_community_needs_inc_input' }
    );
  },
  get items_community_needs_insert_input() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get itemByItemId() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'items_community_needs_insert_input' }
    );
  },
  get items_community_needs_max_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'items_community_needs_max_fields',
        extension: ((extensions as any) || {}).items_community_needs_max_fields,
      }
    );
  },
  get items_community_needs_max_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_max_order_by' }
    );
  },
  get items_community_needs_min_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'items_community_needs_min_fields',
        extension: ((extensions as any) || {}).items_community_needs_min_fields,
      }
    );
  },
  get items_community_needs_min_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_min_order_by' }
    );
  },
  get items_community_needs_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.items_community_needs, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'items_community_needs_mutation_response',
        extension: ((extensions as any) || {})
          .items_community_needs_mutation_response,
      }
    );
  },
  get items_community_needs_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.items_community_needs_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.items_community_needs_on_conflict,
            true
          );
        },
      },
      { name: 'items_community_needs_obj_rel_insert_input' }
    );
  },
  get items_community_needs_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.items_community_needs_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.items_community_needs_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.items_community_needs_bool_exp,
            true
          );
        },
      },
      { name: 'items_community_needs_on_conflict' }
    );
  },
  get items_community_needs_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get itemByItemId() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_order_by' }
    );
  },
  get items_community_needs_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'items_community_needs_pk_columns_input' }
    );
  },
  get items_community_needs_select_column() {
    return new EnumNode({ name: 'items_community_needs_select_column' });
  },
  get items_community_needs_set_input() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'items_community_needs_set_input' }
    );
  },
  get items_community_needs_stddev_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_stddev_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_stddev_fields,
      }
    );
  },
  get items_community_needs_stddev_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_stddev_order_by' }
    );
  },
  get items_community_needs_stddev_pop_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_stddev_pop_fields,
      }
    );
  },
  get items_community_needs_stddev_pop_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_stddev_pop_order_by' }
    );
  },
  get items_community_needs_stddev_samp_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_stddev_samp_fields,
      }
    );
  },
  get items_community_needs_stddev_samp_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_stddev_samp_order_by' }
    );
  },
  get items_community_needs_sum_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'items_community_needs_sum_fields',
        extension: ((extensions as any) || {}).items_community_needs_sum_fields,
      }
    );
  },
  get items_community_needs_sum_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_sum_order_by' }
    );
  },
  get items_community_needs_update_column() {
    return new EnumNode({ name: 'items_community_needs_update_column' });
  },
  get items_community_needs_var_pop_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_var_pop_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_var_pop_fields,
      }
    );
  },
  get items_community_needs_var_pop_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_var_pop_order_by' }
    );
  },
  get items_community_needs_var_samp_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_var_samp_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_var_samp_fields,
      }
    );
  },
  get items_community_needs_var_samp_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_var_samp_order_by' }
    );
  },
  get items_community_needs_variance_fields() {
    return new ObjectNode(
      {
        get community_need_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_community_needs_variance_fields',
        extension: ((extensions as any) || {})
          .items_community_needs_variance_fields,
      }
    );
  },
  get items_community_needs_variance_order_by() {
    return new InputNode(
      {
        get community_need_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_community_needs_variance_order_by' }
    );
  },
  get items_constraint() {
    return new EnumNode({ name: 'items_constraint' });
  },
  get items_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get rates() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'items_delete_at_path_input' }
    );
  },
  get items_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
        get rates() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'items_delete_elem_input' }
    );
  },
  get items_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
        get rates() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'items_delete_key_input' }
    );
  },
  get items_inc_input() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get booking_count() {
          return new InputNodeField(schema.Int, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.Int, true);
        },
        get location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'items_inc_input' }
    );
  },
  get items_insert_input() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get additional_charges() {
          return new InputNodeField(schema._jsonb, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_by_admin_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get booking_count() {
          return new InputNodeField(schema.Int, true);
        },
        get categories() {
          return new InputNodeField(schema._jsonb, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get dropoff_instructions() {
          return new InputNodeField(schema.String, true);
        },
        get extra_vehicle_data() {
          return new InputNodeField(schema.String, true);
        },
        get featured_image_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get first_published_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.Boolean, true);
        },
        get fleet_number() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_transactions() {
          return new InputNodeField(
            schema.fluid_transactions_arr_rel_insert_input,
            true
          );
        },
        get fvip_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get instabook() {
          return new InputNodeField(schema.Boolean, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.Int, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.Boolean, true);
        },
        get item_images() {
          return new InputNodeField(
            schema.item_images_arr_rel_insert_input,
            true
          );
        },
        get item_inspection_steps() {
          return new InputNodeField(
            schema.item_inspection_steps_arr_rel_insert_input,
            true
          );
        },
        get item_reviews() {
          return new InputNodeField(
            schema.item_reviews_arr_rel_insert_input,
            true
          );
        },
        get item_stakeholders() {
          return new InputNodeField(
            schema.item_stakeholders_arr_rel_insert_input,
            true
          );
        },
        get itemsCommunityNeedsByItemId() {
          return new InputNodeField(
            schema.items_community_needs_arr_rel_insert_input,
            true
          );
        },
        get items_community_needs() {
          return new InputNodeField(
            schema.items_community_needs_arr_rel_insert_input,
            true
          );
        },
        get list_items() {
          return new InputNodeField(
            schema.list_items_arr_rel_insert_input,
            true
          );
        },
        get location() {
          return new InputNodeField(
            schema.locations_obj_rel_insert_input,
            true
          );
        },
        get location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get market() {
          return new InputNodeField(schema.markets_obj_rel_insert_input, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get pickup_instructions() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get posted_to_craigslist_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get reservation_reviews() {
          return new InputNodeField(
            schema.reservation_reviews_arr_rel_insert_input,
            true
          );
        },
        get reservations() {
          return new InputNodeField(
            schema.reservations_arr_rel_insert_input,
            true
          );
        },
        get search_vector() {
          return new InputNodeField(schema.tsvector, true);
        },
        get seeded() {
          return new InputNodeField(schema.Boolean, true);
        },
        get stats_items() {
          return new InputNodeField(
            schema.stats_items_arr_rel_insert_input,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get sub_category() {
          return new InputNodeField(schema.String, true);
        },
        get telematic_devices() {
          return new InputNodeField(
            schema.telematic_devices_arr_rel_insert_input,
            true
          );
        },
        get telematic_records() {
          return new InputNodeField(
            schema.telematic_records_arr_rel_insert_input,
            true
          );
        },
        get time_blocks() {
          return new InputNodeField(
            schema.time_blocks_arr_rel_insert_input,
            true
          );
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.Int, true);
        },
        get upvotes() {
          return new InputNodeField(schema.upvotes_arr_rel_insert_input, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByFvipId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByMaintenanceManagerId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByUserId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'items_insert_input' }
    );
  },
  get items_max_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_by_admin_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dropoff_instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get extra_vehicle_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get featured_image_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_published_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get fleet_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get pickup_instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get posted_to_craigslist_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sub_category() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'items_max_fields',
        extension: ((extensions as any) || {}).items_max_fields,
      }
    );
  },
  get items_max_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_by_admin_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get dropoff_instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get extra_vehicle_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get featured_image_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_published_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get fleet_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get pickup_instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get posted_to_craigslist_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get sub_category() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_max_order_by' }
    );
  },
  get items_min_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_by_admin_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get dropoff_instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get extra_vehicle_data() {
          return new FieldNode(schema.String, undefined, true);
        },
        get featured_image_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_published_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get fleet_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get pickup_instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get posted_to_craigslist_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sub_category() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'items_min_fields',
        extension: ((extensions as any) || {}).items_min_fields,
      }
    );
  },
  get items_min_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_by_admin_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get dropoff_instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get extra_vehicle_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get featured_image_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_published_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get fleet_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get pickup_instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get posted_to_craigslist_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get sub_category() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_min_order_by' }
    );
  },
  get items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'items_mutation_response',
        extension: ((extensions as any) || {}).items_mutation_response,
      }
    );
  },
  get items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.items_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.items_on_conflict, true);
        },
      },
      { name: 'items_obj_rel_insert_input' }
    );
  },
  get items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.items_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.items_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
      },
      { name: 'items_on_conflict' }
    );
  },
  get items_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get active() {
          return new InputNodeField(schema.order_by, true);
        },
        get additional_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_by_admin_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get categories() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get dropoff_instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get extra_vehicle_data() {
          return new InputNodeField(schema.order_by, true);
        },
        get featured_image_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_published_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.order_by, true);
        },
        get fleet_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_transactions_aggregate() {
          return new InputNodeField(
            schema.fluid_transactions_aggregate_order_by,
            true
          );
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get instabook() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_images_aggregate() {
          return new InputNodeField(
            schema.item_images_aggregate_order_by,
            true
          );
        },
        get item_inspection_steps_aggregate() {
          return new InputNodeField(
            schema.item_inspection_steps_aggregate_order_by,
            true
          );
        },
        get item_reviews_aggregate() {
          return new InputNodeField(
            schema.item_reviews_aggregate_order_by,
            true
          );
        },
        get item_stakeholders_aggregate() {
          return new InputNodeField(
            schema.item_stakeholders_aggregate_order_by,
            true
          );
        },
        get itemsCommunityNeedsByItemId_aggregate() {
          return new InputNodeField(
            schema.items_community_needs_aggregate_order_by,
            true
          );
        },
        get items_community_needs_aggregate() {
          return new InputNodeField(
            schema.items_community_needs_aggregate_order_by,
            true
          );
        },
        get list_items_aggregate() {
          return new InputNodeField(schema.list_items_aggregate_order_by, true);
        },
        get location() {
          return new InputNodeField(schema.locations_order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market() {
          return new InputNodeField(schema.markets_order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get pickup_instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get pictures() {
          return new InputNodeField(schema.order_by, true);
        },
        get posted_to_craigslist_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get rates() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_reviews_aggregate() {
          return new InputNodeField(
            schema.reservation_reviews_aggregate_order_by,
            true
          );
        },
        get reservations_aggregate() {
          return new InputNodeField(
            schema.reservations_aggregate_order_by,
            true
          );
        },
        get search_vector() {
          return new InputNodeField(schema.order_by, true);
        },
        get seeded() {
          return new InputNodeField(schema.order_by, true);
        },
        get stats_items_aggregate() {
          return new InputNodeField(
            schema.stats_items_aggregate_order_by,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get sub_category() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_devices_aggregate() {
          return new InputNodeField(
            schema.telematic_devices_aggregate_order_by,
            true
          );
        },
        get telematic_records_aggregate() {
          return new InputNodeField(
            schema.telematic_records_aggregate_order_by,
            true
          );
        },
        get time_blocks_aggregate() {
          return new InputNodeField(
            schema.time_blocks_aggregate_order_by,
            true
          );
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvotes_aggregate() {
          return new InputNodeField(schema.upvotes_aggregate_order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByFvipId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByMaintenanceManagerId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByUserId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_order_by' }
    );
  },
  get items_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'items_pk_columns_input' }
    );
  },
  get items_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'items_prepend_input' }
    );
  },
  get items_select_column() {
    return new EnumNode({ name: 'items_select_column' });
  },
  get items_set_input() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get active() {
          return new InputNodeField(schema.Boolean, true);
        },
        get additional_charges() {
          return new InputNodeField(schema._jsonb, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_by_admin_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get booking_count() {
          return new InputNodeField(schema.Int, true);
        },
        get categories() {
          return new InputNodeField(schema._jsonb, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get dropoff_instructions() {
          return new InputNodeField(schema.String, true);
        },
        get extra_vehicle_data() {
          return new InputNodeField(schema.String, true);
        },
        get featured_image_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get first_published_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.Boolean, true);
        },
        get fleet_number() {
          return new InputNodeField(schema.String, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get instabook() {
          return new InputNodeField(schema.Boolean, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.Int, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.Boolean, true);
        },
        get location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get pickup_instructions() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get posted_to_craigslist_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get search_vector() {
          return new InputNodeField(schema.tsvector, true);
        },
        get seeded() {
          return new InputNodeField(schema.Boolean, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get sub_category() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'items_set_input' }
    );
  },
  get items_stddev_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_stddev_fields',
        extension: ((extensions as any) || {}).items_stddev_fields,
      }
    );
  },
  get items_stddev_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_stddev_order_by' }
    );
  },
  get items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_stddev_pop_fields',
        extension: ((extensions as any) || {}).items_stddev_pop_fields,
      }
    );
  },
  get items_stddev_pop_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_stddev_pop_order_by' }
    );
  },
  get items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_stddev_samp_fields',
        extension: ((extensions as any) || {}).items_stddev_samp_fields,
      }
    );
  },
  get items_stddev_samp_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_stddev_samp_order_by' }
    );
  },
  get items_sum_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'items_sum_fields',
        extension: ((extensions as any) || {}).items_sum_fields,
      }
    );
  },
  get items_sum_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_sum_order_by' }
    );
  },
  get items_update_column() {
    return new EnumNode({ name: 'items_update_column' });
  },
  get items_var_pop_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_var_pop_fields',
        extension: ((extensions as any) || {}).items_var_pop_fields,
      }
    );
  },
  get items_var_pop_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_var_pop_order_by' }
    );
  },
  get items_var_samp_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_var_samp_fields',
        extension: ((extensions as any) || {}).items_var_samp_fields,
      }
    );
  },
  get items_var_samp_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_var_samp_order_by' }
    );
  },
  get items_variance_fields() {
    return new ObjectNode(
      {
        get account_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get booking_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fvip_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get internal_ranking() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maintenance_manager_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upvote_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'items_variance_fields',
        extension: ((extensions as any) || {}).items_variance_fields,
      }
    );
  },
  get items_variance_order_by() {
    return new InputNode(
      {
        get account_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get booking_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get fvip_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get internal_ranking() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get maintenance_manager_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvote_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'items_variance_order_by' }
    );
  },
  get jsonb() {
    return new ScalarNode({
      name: 'jsonb',
      extension: ((extensions as any) || {}).jsonb,
    });
  },
  get jsonb_comparison_exp() {
    return new InputNode(
      {
        get _contained_in() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _contains() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _eq() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _gt() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _gte() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _has_key() {
          return new InputNodeField(schema.String, true);
        },
        get _has_keys_all() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _has_keys_any() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.jsonb, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _lte() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _neq() {
          return new InputNodeField(schema.jsonb, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.jsonb, true), true);
        },
      },
      { name: 'jsonb_comparison_exp' }
    );
  },
  get list_items() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user_list() {
          return new FieldNode(schema.user_lists, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      { name: 'list_items', extension: ((extensions as any) || {}).list_items }
    );
  },
  get list_items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.list_items_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.list_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'list_items_aggregate',
        extension: ((extensions as any) || {}).list_items_aggregate,
      }
    );
  },
  get list_items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.list_items_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.list_items_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.list_items_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.list_items_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.list_items_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.list_items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.list_items_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.list_items_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.list_items_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.list_items_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'list_items_aggregate_fields',
        extension: ((extensions as any) || {}).list_items_aggregate_fields,
      }
    );
  },
  get list_items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.list_items_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.list_items_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.list_items_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.list_items_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.list_items_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.list_items_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.list_items_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.list_items_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.list_items_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.list_items_variance_order_by, true);
        },
      },
      { name: 'list_items_aggregate_order_by' }
    );
  },
  get list_items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.list_items_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.list_items_on_conflict, true);
        },
      },
      { name: 'list_items_arr_rel_insert_input' }
    );
  },
  get list_items_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_avg_fields',
        extension: ((extensions as any) || {}).list_items_avg_fields,
      }
    );
  },
  get list_items_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_avg_order_by' }
    );
  },
  get list_items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.list_items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.list_items_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.list_items_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user_list() {
          return new InputNodeField(schema.user_lists_bool_exp, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'list_items_bool_exp' }
    );
  },
  get list_items_constraint() {
    return new EnumNode({ name: 'list_items_constraint' });
  },
  get list_items_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'list_items_inc_input' }
    );
  },
  get list_items_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_list() {
          return new InputNodeField(
            schema.user_lists_obj_rel_insert_input,
            true
          );
        },
        get user_list_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'list_items_insert_input' }
    );
  },
  get list_items_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'list_items_max_fields',
        extension: ((extensions as any) || {}).list_items_max_fields,
      }
    );
  },
  get list_items_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_max_order_by' }
    );
  },
  get list_items_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'list_items_min_fields',
        extension: ((extensions as any) || {}).list_items_min_fields,
      }
    );
  },
  get list_items_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_min_order_by' }
    );
  },
  get list_items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.list_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'list_items_mutation_response',
        extension: ((extensions as any) || {}).list_items_mutation_response,
      }
    );
  },
  get list_items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.list_items_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.list_items_on_conflict, true);
        },
      },
      { name: 'list_items_obj_rel_insert_input' }
    );
  },
  get list_items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.list_items_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.list_items_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.list_items_bool_exp, true);
        },
      },
      { name: 'list_items_on_conflict' }
    );
  },
  get list_items_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list() {
          return new InputNodeField(schema.user_lists_order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_order_by' }
    );
  },
  get list_items_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'list_items_pk_columns_input' }
    );
  },
  get list_items_select_column() {
    return new EnumNode({ name: 'list_items_select_column' });
  },
  get list_items_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'list_items_set_input' }
    );
  },
  get list_items_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_stddev_fields',
        extension: ((extensions as any) || {}).list_items_stddev_fields,
      }
    );
  },
  get list_items_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_stddev_order_by' }
    );
  },
  get list_items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_stddev_pop_fields',
        extension: ((extensions as any) || {}).list_items_stddev_pop_fields,
      }
    );
  },
  get list_items_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_stddev_pop_order_by' }
    );
  },
  get list_items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_stddev_samp_fields',
        extension: ((extensions as any) || {}).list_items_stddev_samp_fields,
      }
    );
  },
  get list_items_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_stddev_samp_order_by' }
    );
  },
  get list_items_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'list_items_sum_fields',
        extension: ((extensions as any) || {}).list_items_sum_fields,
      }
    );
  },
  get list_items_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_sum_order_by' }
    );
  },
  get list_items_update_column() {
    return new EnumNode({ name: 'list_items_update_column' });
  },
  get list_items_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_var_pop_fields',
        extension: ((extensions as any) || {}).list_items_var_pop_fields,
      }
    );
  },
  get list_items_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_var_pop_order_by' }
    );
  },
  get list_items_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_var_samp_fields',
        extension: ((extensions as any) || {}).list_items_var_samp_fields,
      }
    );
  },
  get list_items_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_var_samp_order_by' }
    );
  },
  get list_items_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_list_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'list_items_variance_fields',
        extension: ((extensions as any) || {}).list_items_variance_fields,
      }
    );
  },
  get list_items_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_list_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'list_items_variance_order_by' }
    );
  },
  get locations() {
    return new ObjectNode(
      {
        get address() {
          return new FieldNode(schema.String, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get coordinates() {
          return new FieldNode(schema.point, undefined, true);
        },
        get geom() {
          return new FieldNode(schema.geometry, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get items() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get markets() {
          return new FieldNode(
            new ArrayNode(schema.markets, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, true);
              },
            }),
            false
          );
        },
        get markets_aggregate() {
          return new FieldNode(
            schema.markets_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, true);
              },
            }),
            false
          );
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get postal_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get timezone() {
          return new FieldNode(schema.String, undefined, true);
        },
        get unassisted_pickup() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get users() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get usersByHomeLocationId() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get usersByHomeLocationId_aggregate() {
          return new FieldNode(
            schema.users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_aggregate() {
          return new FieldNode(
            schema.users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
      },
      { name: 'locations', extension: ((extensions as any) || {}).locations }
    );
  },
  get locations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.locations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.locations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'locations_aggregate',
        extension: ((extensions as any) || {}).locations_aggregate,
      }
    );
  },
  get locations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.locations_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.locations_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.locations_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.locations_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.locations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.locations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.locations_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.locations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.locations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.locations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'locations_aggregate_fields',
        extension: ((extensions as any) || {}).locations_aggregate_fields,
      }
    );
  },
  get locations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.locations_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.locations_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.locations_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.locations_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.locations_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.locations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.locations_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.locations_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.locations_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.locations_variance_order_by, true);
        },
      },
      { name: 'locations_aggregate_order_by' }
    );
  },
  get locations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.locations_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.locations_on_conflict, true);
        },
      },
      { name: 'locations_arr_rel_insert_input' }
    );
  },
  get locations_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_avg_fields',
        extension: ((extensions as any) || {}).locations_avg_fields,
      }
    );
  },
  get locations_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_avg_order_by' }
    );
  },
  get locations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.locations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.locations_bool_exp, true),
            true
          );
        },
        get address() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get city() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.point_comparison_exp, true);
        },
        get geom() {
          return new InputNodeField(schema.geometry_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get instructions() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get items() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get markets() {
          return new InputNodeField(schema.markets_bool_exp, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get postal_code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get state() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get street_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get street_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get timezone() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get unassisted_pickup() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get users() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get usersByHomeLocationId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'locations_bool_exp' }
    );
  },
  get locations_constraint() {
    return new EnumNode({ name: 'locations_constraint' });
  },
  get locations_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'locations_inc_input' }
    );
  },
  get locations_insert_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.String, true);
        },
        get city() {
          return new InputNodeField(schema.String, true);
        },
        get coordinates() {
          return new InputNodeField(schema.point, true);
        },
        get geom() {
          return new InputNodeField(schema.geometry, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get instructions() {
          return new InputNodeField(schema.String, true);
        },
        get items() {
          return new InputNodeField(schema.items_arr_rel_insert_input, true);
        },
        get markets() {
          return new InputNodeField(schema.markets_arr_rel_insert_input, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int, true);
        },
        get postal_code() {
          return new InputNodeField(schema.String, true);
        },
        get state() {
          return new InputNodeField(schema.String, true);
        },
        get street_name() {
          return new InputNodeField(schema.String, true);
        },
        get street_number() {
          return new InputNodeField(schema.String, true);
        },
        get timezone() {
          return new InputNodeField(schema.String, true);
        },
        get unassisted_pickup() {
          return new InputNodeField(schema.Boolean, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get users() {
          return new InputNodeField(schema.users_arr_rel_insert_input, true);
        },
        get usersByHomeLocationId() {
          return new InputNodeField(schema.users_arr_rel_insert_input, true);
        },
      },
      { name: 'locations_insert_input' }
    );
  },
  get locations_max_fields() {
    return new ObjectNode(
      {
        get address() {
          return new FieldNode(schema.String, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get postal_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get timezone() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'locations_max_fields',
        extension: ((extensions as any) || {}).locations_max_fields,
      }
    );
  },
  get locations_max_order_by() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get postal_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get state() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get timezone() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_max_order_by' }
    );
  },
  get locations_min_fields() {
    return new ObjectNode(
      {
        get address() {
          return new FieldNode(schema.String, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get instructions() {
          return new FieldNode(schema.String, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get postal_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get state() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get street_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get timezone() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'locations_min_fields',
        extension: ((extensions as any) || {}).locations_min_fields,
      }
    );
  },
  get locations_min_order_by() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get postal_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get state() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get timezone() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_min_order_by' }
    );
  },
  get locations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.locations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'locations_mutation_response',
        extension: ((extensions as any) || {}).locations_mutation_response,
      }
    );
  },
  get locations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.locations_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.locations_on_conflict, true);
        },
      },
      { name: 'locations_obj_rel_insert_input' }
    );
  },
  get locations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.locations_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.locations_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
      },
      { name: 'locations_on_conflict' }
    );
  },
  get locations_order_by() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get coordinates() {
          return new InputNodeField(schema.order_by, true);
        },
        get geom() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get instructions() {
          return new InputNodeField(schema.order_by, true);
        },
        get items_aggregate() {
          return new InputNodeField(schema.items_aggregate_order_by, true);
        },
        get markets_aggregate() {
          return new InputNodeField(schema.markets_aggregate_order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get postal_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get state() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get street_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get timezone() {
          return new InputNodeField(schema.order_by, true);
        },
        get unassisted_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get usersByHomeLocationId_aggregate() {
          return new InputNodeField(schema.users_aggregate_order_by, true);
        },
        get users_aggregate() {
          return new InputNodeField(schema.users_aggregate_order_by, true);
        },
      },
      { name: 'locations_order_by' }
    );
  },
  get locations_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'locations_pk_columns_input' }
    );
  },
  get locations_select_column() {
    return new EnumNode({ name: 'locations_select_column' });
  },
  get locations_set_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.String, true);
        },
        get city() {
          return new InputNodeField(schema.String, true);
        },
        get coordinates() {
          return new InputNodeField(schema.point, true);
        },
        get geom() {
          return new InputNodeField(schema.geometry, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get instructions() {
          return new InputNodeField(schema.String, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int, true);
        },
        get postal_code() {
          return new InputNodeField(schema.String, true);
        },
        get state() {
          return new InputNodeField(schema.String, true);
        },
        get street_name() {
          return new InputNodeField(schema.String, true);
        },
        get street_number() {
          return new InputNodeField(schema.String, true);
        },
        get timezone() {
          return new InputNodeField(schema.String, true);
        },
        get unassisted_pickup() {
          return new InputNodeField(schema.Boolean, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'locations_set_input' }
    );
  },
  get locations_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_stddev_fields',
        extension: ((extensions as any) || {}).locations_stddev_fields,
      }
    );
  },
  get locations_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_stddev_order_by' }
    );
  },
  get locations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_stddev_pop_fields',
        extension: ((extensions as any) || {}).locations_stddev_pop_fields,
      }
    );
  },
  get locations_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_stddev_pop_order_by' }
    );
  },
  get locations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_stddev_samp_fields',
        extension: ((extensions as any) || {}).locations_stddev_samp_fields,
      }
    );
  },
  get locations_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_stddev_samp_order_by' }
    );
  },
  get locations_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'locations_sum_fields',
        extension: ((extensions as any) || {}).locations_sum_fields,
      }
    );
  },
  get locations_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_sum_order_by' }
    );
  },
  get locations_update_column() {
    return new EnumNode({ name: 'locations_update_column' });
  },
  get locations_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_var_pop_fields',
        extension: ((extensions as any) || {}).locations_var_pop_fields,
      }
    );
  },
  get locations_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_var_pop_order_by' }
    );
  },
  get locations_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_var_samp_fields',
        extension: ((extensions as any) || {}).locations_var_samp_fields,
      }
    );
  },
  get locations_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_var_samp_order_by' }
    );
  },
  get locations_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'locations_variance_fields',
        extension: ((extensions as any) || {}).locations_variance_fields,
      }
    );
  },
  get locations_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'locations_variance_order_by' }
    );
  },
  get markets() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get items() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get location() {
          return new FieldNode(schema.locations, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get users() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_aggregate() {
          return new FieldNode(
            schema.users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
      },
      { name: 'markets', extension: ((extensions as any) || {}).markets }
    );
  },
  get markets_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.markets_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.markets, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'markets_aggregate',
        extension: ((extensions as any) || {}).markets_aggregate,
      }
    );
  },
  get markets_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.markets_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.markets_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.markets_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.markets_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.markets_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.markets_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.markets_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.markets_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.markets_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.markets_variance_fields, undefined, true);
        },
      },
      {
        name: 'markets_aggregate_fields',
        extension: ((extensions as any) || {}).markets_aggregate_fields,
      }
    );
  },
  get markets_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.markets_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.markets_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.markets_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.markets_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.markets_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.markets_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.markets_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.markets_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.markets_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.markets_variance_order_by, true);
        },
      },
      { name: 'markets_aggregate_order_by' }
    );
  },
  get markets_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.markets_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.markets_on_conflict, true);
        },
      },
      { name: 'markets_arr_rel_insert_input' }
    );
  },
  get markets_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_avg_fields',
        extension: ((extensions as any) || {}).markets_avg_fields,
      }
    );
  },
  get markets_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_avg_order_by' }
    );
  },
  get markets_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.markets_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.markets_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.markets_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get items() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get location() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
        get location_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get users() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'markets_bool_exp' }
    );
  },
  get markets_constraint() {
    return new EnumNode({ name: 'markets_constraint' });
  },
  get markets_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get location_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'markets_inc_input' }
    );
  },
  get markets_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get items() {
          return new InputNodeField(schema.items_arr_rel_insert_input, true);
        },
        get location() {
          return new InputNodeField(
            schema.locations_obj_rel_insert_input,
            true
          );
        },
        get location_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get users() {
          return new InputNodeField(schema.users_arr_rel_insert_input, true);
        },
      },
      { name: 'markets_insert_input' }
    );
  },
  get markets_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'markets_max_fields',
        extension: ((extensions as any) || {}).markets_max_fields,
      }
    );
  },
  get markets_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_max_order_by' }
    );
  },
  get markets_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'markets_min_fields',
        extension: ((extensions as any) || {}).markets_min_fields,
      }
    );
  },
  get markets_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_min_order_by' }
    );
  },
  get markets_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.markets, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'markets_mutation_response',
        extension: ((extensions as any) || {}).markets_mutation_response,
      }
    );
  },
  get markets_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.markets_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.markets_on_conflict, true);
        },
      },
      { name: 'markets_obj_rel_insert_input' }
    );
  },
  get markets_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.markets_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.markets_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.markets_bool_exp, true);
        },
      },
      { name: 'markets_on_conflict' }
    );
  },
  get markets_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get items_aggregate() {
          return new InputNodeField(schema.items_aggregate_order_by, true);
        },
        get location() {
          return new InputNodeField(schema.locations_order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get users_aggregate() {
          return new InputNodeField(schema.users_aggregate_order_by, true);
        },
      },
      { name: 'markets_order_by' }
    );
  },
  get markets_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'markets_pk_columns_input' }
    );
  },
  get markets_select_column() {
    return new EnumNode({ name: 'markets_select_column' });
  },
  get markets_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get location_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'markets_set_input' }
    );
  },
  get markets_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_stddev_fields',
        extension: ((extensions as any) || {}).markets_stddev_fields,
      }
    );
  },
  get markets_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_stddev_order_by' }
    );
  },
  get markets_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_stddev_pop_fields',
        extension: ((extensions as any) || {}).markets_stddev_pop_fields,
      }
    );
  },
  get markets_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_stddev_pop_order_by' }
    );
  },
  get markets_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_stddev_samp_fields',
        extension: ((extensions as any) || {}).markets_stddev_samp_fields,
      }
    );
  },
  get markets_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_stddev_samp_order_by' }
    );
  },
  get markets_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'markets_sum_fields',
        extension: ((extensions as any) || {}).markets_sum_fields,
      }
    );
  },
  get markets_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_sum_order_by' }
    );
  },
  get markets_update_column() {
    return new EnumNode({ name: 'markets_update_column' });
  },
  get markets_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_var_pop_fields',
        extension: ((extensions as any) || {}).markets_var_pop_fields,
      }
    );
  },
  get markets_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_var_pop_order_by' }
    );
  },
  get markets_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_var_samp_fields',
        extension: ((extensions as any) || {}).markets_var_samp_fields,
      }
    );
  },
  get markets_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_var_samp_order_by' }
    );
  },
  get markets_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'markets_variance_fields',
        extension: ((extensions as any) || {}).markets_variance_fields,
      }
    );
  },
  get markets_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get location_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'markets_variance_order_by' }
    );
  },
  get messages() {
    return new ObjectNode(
      {
        get body() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get read() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userBySenderId() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      { name: 'messages', extension: ((extensions as any) || {}).messages }
    );
  },
  get messages_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.messages_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.messages, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'messages_aggregate',
        extension: ((extensions as any) || {}).messages_aggregate,
      }
    );
  },
  get messages_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.messages_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.messages_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.messages_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.messages_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.messages_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.messages_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.messages_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.messages_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(
            schema.messages_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.messages_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'messages_aggregate_fields',
        extension: ((extensions as any) || {}).messages_aggregate_fields,
      }
    );
  },
  get messages_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.messages_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.messages_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.messages_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.messages_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.messages_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.messages_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.messages_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.messages_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.messages_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.messages_variance_order_by, true);
        },
      },
      { name: 'messages_aggregate_order_by' }
    );
  },
  get messages_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.messages_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.messages_on_conflict, true);
        },
      },
      { name: 'messages_arr_rel_insert_input' }
    );
  },
  get messages_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_avg_fields',
        extension: ((extensions as any) || {}).messages_avg_fields,
      }
    );
  },
  get messages_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_avg_order_by' }
    );
  },
  get messages_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.messages_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.messages_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.messages_bool_exp, true),
            true
          );
        },
        get body() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get read() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get sender_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userBySenderId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'messages_bool_exp' }
    );
  },
  get messages_constraint() {
    return new EnumNode({ name: 'messages_constraint' });
  },
  get messages_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.Int, true);
        },
        get sender_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'messages_inc_input' }
    );
  },
  get messages_insert_input() {
    return new InputNode(
      {
        get body() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get read() {
          return new InputNodeField(schema.Boolean, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.Int, true);
        },
        get sender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userBySenderId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'messages_insert_input' }
    );
  },
  get messages_max_fields() {
    return new ObjectNode(
      {
        get body() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'messages_max_fields',
        extension: ((extensions as any) || {}).messages_max_fields,
      }
    );
  },
  get messages_max_order_by() {
    return new InputNode(
      {
        get body() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_max_order_by' }
    );
  },
  get messages_min_fields() {
    return new ObjectNode(
      {
        get body() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'messages_min_fields',
        extension: ((extensions as any) || {}).messages_min_fields,
      }
    );
  },
  get messages_min_order_by() {
    return new InputNode(
      {
        get body() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_min_order_by' }
    );
  },
  get messages_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.messages, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'messages_mutation_response',
        extension: ((extensions as any) || {}).messages_mutation_response,
      }
    );
  },
  get messages_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.messages_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.messages_on_conflict, true);
        },
      },
      { name: 'messages_obj_rel_insert_input' }
    );
  },
  get messages_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.messages_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.messages_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.messages_bool_exp, true);
        },
      },
      { name: 'messages_on_conflict' }
    );
  },
  get messages_order_by() {
    return new InputNode(
      {
        get body() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get read() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userBySenderId() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'messages_order_by' }
    );
  },
  get messages_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'messages_pk_columns_input' }
    );
  },
  get messages_select_column() {
    return new EnumNode({ name: 'messages_select_column' });
  },
  get messages_set_input() {
    return new InputNode(
      {
        get body() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get read() {
          return new InputNodeField(schema.Boolean, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.Int, true);
        },
        get sender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'messages_set_input' }
    );
  },
  get messages_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_stddev_fields',
        extension: ((extensions as any) || {}).messages_stddev_fields,
      }
    );
  },
  get messages_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_stddev_order_by' }
    );
  },
  get messages_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_stddev_pop_fields',
        extension: ((extensions as any) || {}).messages_stddev_pop_fields,
      }
    );
  },
  get messages_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_stddev_pop_order_by' }
    );
  },
  get messages_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_stddev_samp_fields',
        extension: ((extensions as any) || {}).messages_stddev_samp_fields,
      }
    );
  },
  get messages_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_stddev_samp_order_by' }
    );
  },
  get messages_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'messages_sum_fields',
        extension: ((extensions as any) || {}).messages_sum_fields,
      }
    );
  },
  get messages_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_sum_order_by' }
    );
  },
  get messages_update_column() {
    return new EnumNode({ name: 'messages_update_column' });
  },
  get messages_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_var_pop_fields',
        extension: ((extensions as any) || {}).messages_var_pop_fields,
      }
    );
  },
  get messages_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_var_pop_order_by' }
    );
  },
  get messages_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_var_samp_fields',
        extension: ((extensions as any) || {}).messages_var_samp_fields,
      }
    );
  },
  get messages_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_var_samp_order_by' }
    );
  },
  get messages_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'messages_variance_fields',
        extension: ((extensions as any) || {}).messages_variance_fields,
      }
    );
  },
  get messages_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'messages_variance_order_by' }
    );
  },
  get mutation_root() {
    return new ObjectNode(
      {
        get delete_World() {
          return new FieldNode(
            schema.World_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.World_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_World_by_pk() {
          return new FieldNode(
            schema.World,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete__Migration() {
          return new FieldNode(
            schema._Migration_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema._Migration_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete__Migration_by_pk() {
          return new FieldNode(
            schema._Migration,
            new Arguments(
              {
                get revision() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_bad_actors() {
          return new FieldNode(
            schema.bad_actors_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.bad_actors_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_bad_actors_associated_users() {
          return new FieldNode(
            schema.bad_actors_associated_users_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.bad_actors_associated_users_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_bad_actors_associated_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_associated_users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_bad_actors_by_pk() {
          return new FieldNode(
            schema.bad_actors,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_bad_actors_users() {
          return new FieldNode(
            schema.bad_actors_users_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.bad_actors_users_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_bad_actors_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_balance_transactions() {
          return new FieldNode(
            schema.balance_transactions_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.balance_transactions_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_balance_transactions_by_pk() {
          return new FieldNode(
            schema.balance_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_business_cases() {
          return new FieldNode(
            schema.business_cases_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.business_cases_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_business_cases_by_pk() {
          return new FieldNode(
            schema.business_cases,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_categories() {
          return new FieldNode(
            schema.categories_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.categories_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_categories_by_pk() {
          return new FieldNode(
            schema.categories,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_charge_account_records() {
          return new FieldNode(
            schema.charge_account_records_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.charge_account_records_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_charge_account_records_by_pk() {
          return new FieldNode(
            schema.charge_account_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_charge_accounts() {
          return new FieldNode(
            schema.charge_accounts_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.charge_accounts_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_charge_accounts_by_pk() {
          return new FieldNode(
            schema.charge_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_charge_line_items() {
          return new FieldNode(
            schema.charge_line_items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.charge_line_items_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_charge_line_items_by_pk() {
          return new FieldNode(
            schema.charge_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_charges() {
          return new FieldNode(
            schema.charges_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.charges_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_charges_by_pk() {
          return new FieldNode(
            schema.charges,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_credit_transactions() {
          return new FieldNode(
            schema.credit_transactions_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.credit_transactions_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_credit_transactions_by_pk() {
          return new FieldNode(
            schema.credit_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_daily_statistics() {
          return new FieldNode(
            schema.daily_statistics_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.daily_statistics_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_daily_statistics_by_pk() {
          return new FieldNode(
            schema.daily_statistics,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_dodge_fleet_orders() {
          return new FieldNode(
            schema.dodge_fleet_orders_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.dodge_fleet_orders_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_dodge_fleet_orders_by_pk() {
          return new FieldNode(
            schema.dodge_fleet_orders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_external_accounts() {
          return new FieldNode(
            schema.external_accounts_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.external_accounts_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_external_accounts_by_pk() {
          return new FieldNode(
            schema.external_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_fluid_ledger() {
          return new FieldNode(
            schema.fluid_ledger_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.fluid_ledger_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_fluid_ledger_by_pk() {
          return new FieldNode(
            schema.fluid_ledger,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_fluid_transactions() {
          return new FieldNode(
            schema.fluid_transactions_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.fluid_transactions_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_fluid_transactions_by_pk() {
          return new FieldNode(
            schema.fluid_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_charge_line_items() {
          return new FieldNode(
            schema.general_charge_line_items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.general_charge_line_items_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_charge_line_items_by_pk() {
          return new FieldNode(
            schema.general_charge_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_charges() {
          return new FieldNode(
            schema.general_charges_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.general_charges_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_charges_by_pk() {
          return new FieldNode(
            schema.general_charges,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_images() {
          return new FieldNode(
            schema.general_images_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.general_images_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_images_by_pk() {
          return new FieldNode(
            schema.general_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_transfer_line_items() {
          return new FieldNode(
            schema.general_transfer_line_items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.general_transfer_line_items_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_transfer_line_items_by_pk() {
          return new FieldNode(
            schema.general_transfer_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_transfers() {
          return new FieldNode(
            schema.general_transfers_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.general_transfers_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_general_transfers_by_pk() {
          return new FieldNode(
            schema.general_transfers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_geometry_columns() {
          return new FieldNode(
            schema.geometry_columns_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.geometry_columns_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_goose_db_version() {
          return new FieldNode(
            schema.goose_db_version_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.goose_db_version_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_goose_db_version_by_pk() {
          return new FieldNode(
            schema.goose_db_version,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_identification_images() {
          return new FieldNode(
            schema.identification_images_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.identification_images_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_identification_images_by_pk() {
          return new FieldNode(
            schema.identification_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_identifications() {
          return new FieldNode(
            schema.identifications_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.identifications_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_identifications_by_pk() {
          return new FieldNode(
            schema.identifications,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_images() {
          return new FieldNode(
            schema.item_images_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.item_images_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_images_by_pk() {
          return new FieldNode(
            schema.item_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_inspection_steps() {
          return new FieldNode(
            schema.item_inspection_steps_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.item_inspection_steps_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_inspection_steps_by_pk() {
          return new FieldNode(
            schema.item_inspection_steps,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_reviews() {
          return new FieldNode(
            schema.item_reviews_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.item_reviews_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_reviews_by_pk() {
          return new FieldNode(
            schema.item_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_stakeholders() {
          return new FieldNode(
            schema.item_stakeholders_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.item_stakeholders_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_item_stakeholders_by_pk() {
          return new FieldNode(
            schema.item_stakeholders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_items() {
          return new FieldNode(
            schema.items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.items_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_items_by_pk() {
          return new FieldNode(
            schema.items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_items_community_needs() {
          return new FieldNode(
            schema.items_community_needs_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.items_community_needs_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_items_community_needs_by_pk() {
          return new FieldNode(
            schema.items_community_needs,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_list_items() {
          return new FieldNode(
            schema.list_items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.list_items_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_list_items_by_pk() {
          return new FieldNode(
            schema.list_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_locations() {
          return new FieldNode(
            schema.locations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.locations_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_locations_by_pk() {
          return new FieldNode(
            schema.locations,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_markets() {
          return new FieldNode(
            schema.markets_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.markets_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_markets_by_pk() {
          return new FieldNode(
            schema.markets,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_messages() {
          return new FieldNode(
            schema.messages_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.messages_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_messages_by_pk() {
          return new FieldNode(
            schema.messages,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_neighborhoods() {
          return new FieldNode(
            schema.neighborhoods_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.neighborhoods_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_notifications() {
          return new FieldNode(
            schema.notifications_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.notifications_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_notifications_by_pk() {
          return new FieldNode(
            schema.notifications,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_payment_accounts() {
          return new FieldNode(
            schema.payment_accounts_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.payment_accounts_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_payment_accounts_by_pk() {
          return new FieldNode(
            schema.payment_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_payouts() {
          return new FieldNode(
            schema.payouts_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.payouts_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_payouts_by_pk() {
          return new FieldNode(
            schema.payouts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_permissions() {
          return new FieldNode(
            schema.permissions_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.permissions_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_permissions_by_pk() {
          return new FieldNode(
            schema.permissions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_phone_number_information() {
          return new FieldNode(
            schema.phone_number_information_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.phone_number_information_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_phone_number_information_by_pk() {
          return new FieldNode(
            schema.phone_number_information,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_promo_code_uses() {
          return new FieldNode(
            schema.promo_code_uses_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.promo_code_uses_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_promo_code_uses_by_pk() {
          return new FieldNode(
            schema.promo_code_uses,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_promo_codes() {
          return new FieldNode(
            schema.promo_codes_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.promo_codes_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_promo_codes_by_pk() {
          return new FieldNode(
            schema.promo_codes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_referral_codes() {
          return new FieldNode(
            schema.referral_codes_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.referral_codes_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_referral_codes_by_pk() {
          return new FieldNode(
            schema.referral_codes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_refresh_tokens() {
          return new FieldNode(
            schema.refresh_tokens_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.refresh_tokens_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_refresh_tokens_by_pk() {
          return new FieldNode(
            schema.refresh_tokens,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.uuid, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_refunds() {
          return new FieldNode(
            schema.refunds_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.refunds_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_refunds_by_pk() {
          return new FieldNode(
            schema.refunds,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_reimbursements() {
          return new FieldNode(
            schema.reimbursements_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.reimbursements_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_reimbursements_by_pk() {
          return new FieldNode(
            schema.reimbursements,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_admin_approvals() {
          return new FieldNode(
            schema.reservation_admin_approvals_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.reservation_admin_approvals_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_admin_approvals_by_pk() {
          return new FieldNode(
            schema.reservation_admin_approvals,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_inspection_steps() {
          return new FieldNode(
            schema.reservation_inspection_steps_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.reservation_inspection_steps_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_inspection_steps_by_pk() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_reviews() {
          return new FieldNode(
            schema.reservation_reviews_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.reservation_reviews_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_reviews_by_pk() {
          return new FieldNode(
            schema.reservation_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_stakeholders() {
          return new FieldNode(
            schema.reservation_stakeholders_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.reservation_stakeholders_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservation_stakeholders_by_pk() {
          return new FieldNode(
            schema.reservation_stakeholders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservations() {
          return new FieldNode(
            schema.reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_reservations_by_pk() {
          return new FieldNode(
            schema.reservations,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_sim_cards() {
          return new FieldNode(
            schema.sim_cards_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.sim_cards_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_sim_cards_by_pk() {
          return new FieldNode(
            schema.sim_cards,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_spam_receivers() {
          return new FieldNode(
            schema.spam_receivers_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.spam_receivers_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_spam_receivers_by_pk() {
          return new FieldNode(
            schema.spam_receivers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_spam_senders() {
          return new FieldNode(
            schema.spam_senders_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.spam_senders_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_spam_senders_by_pk() {
          return new FieldNode(
            schema.spam_senders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_spatial_ref_sys() {
          return new FieldNode(
            schema.spatial_ref_sys_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.spatial_ref_sys_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_spatial_ref_sys_by_pk() {
          return new FieldNode(
            schema.spatial_ref_sys,
            new Arguments(
              {
                get srid() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_approved_reservations() {
          return new FieldNode(
            schema.stats_approved_reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_approved_reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_cancelled_reservations() {
          return new FieldNode(
            schema.stats_cancelled_reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_cancelled_reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_completed_reservations() {
          return new FieldNode(
            schema.stats_completed_reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_completed_reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_denied_reservations() {
          return new FieldNode(
            schema.stats_denied_reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_denied_reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_items() {
          return new FieldNode(
            schema.stats_items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.stats_items_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_requested_reservations() {
          return new FieldNode(
            schema.stats_requested_reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_requested_reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_returned_reservations() {
          return new FieldNode(
            schema.stats_returned_reservations_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_returned_reservations_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stats_transfers() {
          return new FieldNode(
            schema.stats_transfers_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stats_transfers_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stripe_events() {
          return new FieldNode(
            schema.stripe_events_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.stripe_events_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_stripe_events_by_pk() {
          return new FieldNode(
            schema.stripe_events,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_suspension_records() {
          return new FieldNode(
            schema.suspension_records_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.suspension_records_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_suspension_records_by_pk() {
          return new FieldNode(
            schema.suspension_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_telematic_devices() {
          return new FieldNode(
            schema.telematic_devices_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.telematic_devices_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_telematic_devices_by_pk() {
          return new FieldNode(
            schema.telematic_devices,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_telematic_records() {
          return new FieldNode(
            schema.telematic_records_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.telematic_records_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_telematic_records_by_pk() {
          return new FieldNode(
            schema.telematic_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_tier_scores() {
          return new FieldNode(
            schema.tier_scores_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.tier_scores_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_tier_scores_by_pk() {
          return new FieldNode(
            schema.tier_scores,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_time_blocks() {
          return new FieldNode(
            schema.time_blocks_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.time_blocks_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_time_blocks_by_pk() {
          return new FieldNode(
            schema.time_blocks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_transfer_line_items() {
          return new FieldNode(
            schema.transfer_line_items_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.transfer_line_items_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_transfer_line_items_by_pk() {
          return new FieldNode(
            schema.transfer_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_transfers() {
          return new FieldNode(
            schema.transfers_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.transfers_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_transfers_by_pk() {
          return new FieldNode(
            schema.transfers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_transfers_v2() {
          return new FieldNode(
            schema.transfers_v2_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.transfers_v2_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_transfers_v2_by_pk() {
          return new FieldNode(
            schema.transfers_v2,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_upvotes() {
          return new FieldNode(
            schema.upvotes_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.upvotes_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_upvotes_by_pk() {
          return new FieldNode(
            schema.upvotes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_blocks() {
          return new FieldNode(
            schema.user_blocks_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.user_blocks_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_blocks_by_pk() {
          return new FieldNode(
            schema.user_blocks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_devices() {
          return new FieldNode(
            schema.user_devices_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.user_devices_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_devices_by_pk() {
          return new FieldNode(
            schema.user_devices,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_images() {
          return new FieldNode(
            schema.user_images_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.user_images_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_images_by_pk() {
          return new FieldNode(
            schema.user_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_lists() {
          return new FieldNode(
            schema.user_lists_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.user_lists_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_lists_by_pk() {
          return new FieldNode(
            schema.user_lists,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_metadata() {
          return new FieldNode(
            schema.user_metadata_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.user_metadata_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_permissions() {
          return new FieldNode(
            schema.user_permissions_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.user_permissions_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_reviews() {
          return new FieldNode(
            schema.user_reviews_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.user_reviews_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_user_reviews_by_pk() {
          return new FieldNode(
            schema.user_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_users() {
          return new FieldNode(
            schema.users_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(schema.users_bool_exp, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_users_by_pk() {
          return new FieldNode(
            schema.users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get delete_vehicle_insurance_rates() {
          return new FieldNode(
            schema.vehicle_insurance_rates_mutation_response,
            new Arguments(
              {
                get where() {
                  return new ArgumentsField(
                    schema.vehicle_insurance_rates_bool_exp,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get delete_vehicle_insurance_rates_by_pk() {
          return new FieldNode(
            schema.vehicle_insurance_rates,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get insert_World() {
          return new FieldNode(
            schema.World_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.World_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_World_one() {
          return new FieldNode(
            schema.World,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.World_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.World_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert__Migration() {
          return new FieldNode(
            schema._Migration_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema._Migration_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert__Migration_one() {
          return new FieldNode(
            schema._Migration,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema._Migration_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema._Migration_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_bad_actors() {
          return new FieldNode(
            schema.bad_actors_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.bad_actors_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_bad_actors_associated_users() {
          return new FieldNode(
            schema.bad_actors_associated_users_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_bad_actors_associated_users_one() {
          return new FieldNode(
            schema.bad_actors_associated_users,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_bad_actors_one() {
          return new FieldNode(
            schema.bad_actors,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.bad_actors_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.bad_actors_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_bad_actors_users() {
          return new FieldNode(
            schema.bad_actors_users_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.bad_actors_users_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_bad_actors_users_one() {
          return new FieldNode(
            schema.bad_actors_users,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.bad_actors_users_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.bad_actors_users_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_balance_transactions() {
          return new FieldNode(
            schema.balance_transactions_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.balance_transactions_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_balance_transactions_one() {
          return new FieldNode(
            schema.balance_transactions,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.balance_transactions_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.balance_transactions_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_business_cases() {
          return new FieldNode(
            schema.business_cases_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.business_cases_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_business_cases_one() {
          return new FieldNode(
            schema.business_cases,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.business_cases_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.business_cases_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_categories() {
          return new FieldNode(
            schema.categories_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.categories_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_categories_one() {
          return new FieldNode(
            schema.categories,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.categories_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.categories_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_charge_account_records() {
          return new FieldNode(
            schema.charge_account_records_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.charge_account_records_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_charge_account_records_one() {
          return new FieldNode(
            schema.charge_account_records,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.charge_account_records_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.charge_account_records_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_charge_accounts() {
          return new FieldNode(
            schema.charge_accounts_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.charge_accounts_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_charge_accounts_one() {
          return new FieldNode(
            schema.charge_accounts,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.charge_accounts_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.charge_accounts_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_charge_line_items() {
          return new FieldNode(
            schema.charge_line_items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.charge_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_charge_line_items_one() {
          return new FieldNode(
            schema.charge_line_items,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.charge_line_items_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.charge_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_charges() {
          return new FieldNode(
            schema.charges_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.charges_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_charges_one() {
          return new FieldNode(
            schema.charges,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.charges_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.charges_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_credit_transactions() {
          return new FieldNode(
            schema.credit_transactions_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.credit_transactions_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_credit_transactions_one() {
          return new FieldNode(
            schema.credit_transactions,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.credit_transactions_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.credit_transactions_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_daily_statistics() {
          return new FieldNode(
            schema.daily_statistics_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.daily_statistics_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_daily_statistics_one() {
          return new FieldNode(
            schema.daily_statistics,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.daily_statistics_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.daily_statistics_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_dodge_fleet_orders() {
          return new FieldNode(
            schema.dodge_fleet_orders_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_dodge_fleet_orders_one() {
          return new FieldNode(
            schema.dodge_fleet_orders,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_external_accounts() {
          return new FieldNode(
            schema.external_accounts_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.external_accounts_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_external_accounts_one() {
          return new FieldNode(
            schema.external_accounts,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.external_accounts_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.external_accounts_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_fluid_ledger() {
          return new FieldNode(
            schema.fluid_ledger_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.fluid_ledger_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_fluid_ledger_one() {
          return new FieldNode(
            schema.fluid_ledger,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.fluid_ledger_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.fluid_ledger_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_fluid_transactions() {
          return new FieldNode(
            schema.fluid_transactions_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.fluid_transactions_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_fluid_transactions_one() {
          return new FieldNode(
            schema.fluid_transactions,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.fluid_transactions_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.fluid_transactions_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_charge_line_items() {
          return new FieldNode(
            schema.general_charge_line_items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_charge_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_charge_line_items_one() {
          return new FieldNode(
            schema.general_charge_line_items,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.general_charge_line_items_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_charge_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_charges() {
          return new FieldNode(
            schema.general_charges_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_charges_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_charges_one() {
          return new FieldNode(
            schema.general_charges,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.general_charges_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_charges_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_images() {
          return new FieldNode(
            schema.general_images_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_images_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_images_one() {
          return new FieldNode(
            schema.general_images,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.general_images_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_images_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_transfer_line_items() {
          return new FieldNode(
            schema.general_transfer_line_items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_transfer_line_items_one() {
          return new FieldNode(
            schema.general_transfer_line_items,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_transfers() {
          return new FieldNode(
            schema.general_transfers_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_transfers_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_general_transfers_one() {
          return new FieldNode(
            schema.general_transfers,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.general_transfers_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.general_transfers_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_geometry_columns() {
          return new FieldNode(
            schema.geometry_columns_mutation_response,
            new Arguments(
              {
                get objects() {
                  return new ArgumentsField(
                    new ArrayNode(schema.geometry_columns_insert_input, false),
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get insert_geometry_columns_one() {
          return new FieldNode(
            schema.geometry_columns,
            new Arguments(
              {
                get object() {
                  return new ArgumentsField(
                    schema.geometry_columns_insert_input,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get insert_goose_db_version() {
          return new FieldNode(
            schema.goose_db_version_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.goose_db_version_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_goose_db_version_one() {
          return new FieldNode(
            schema.goose_db_version,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.goose_db_version_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.goose_db_version_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_identification_images() {
          return new FieldNode(
            schema.identification_images_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.identification_images_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_identification_images_one() {
          return new FieldNode(
            schema.identification_images,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.identification_images_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.identification_images_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_identifications() {
          return new FieldNode(
            schema.identifications_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.identifications_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_identifications_one() {
          return new FieldNode(
            schema.identifications,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.identifications_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.identifications_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_item_images() {
          return new FieldNode(
            schema.item_images_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.item_images_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_item_images_one() {
          return new FieldNode(
            schema.item_images,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.item_images_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.item_images_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_item_inspection_steps() {
          return new FieldNode(
            schema.item_inspection_steps_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.item_inspection_steps_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_item_inspection_steps_one() {
          return new FieldNode(
            schema.item_inspection_steps,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.item_inspection_steps_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.item_inspection_steps_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_item_reviews() {
          return new FieldNode(
            schema.item_reviews_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.item_reviews_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_item_reviews_one() {
          return new FieldNode(
            schema.item_reviews,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.item_reviews_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.item_reviews_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_item_stakeholders() {
          return new FieldNode(
            schema.item_stakeholders_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.item_stakeholders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_item_stakeholders_one() {
          return new FieldNode(
            schema.item_stakeholders,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.item_stakeholders_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.item_stakeholders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_items() {
          return new FieldNode(
            schema.items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.items_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_items_community_needs() {
          return new FieldNode(
            schema.items_community_needs_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.items_community_needs_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_items_community_needs_one() {
          return new FieldNode(
            schema.items_community_needs,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.items_community_needs_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.items_community_needs_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_items_one() {
          return new FieldNode(
            schema.items,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.items_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.items_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_list_items() {
          return new FieldNode(
            schema.list_items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.list_items_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_list_items_one() {
          return new FieldNode(
            schema.list_items,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.list_items_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.list_items_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_locations() {
          return new FieldNode(
            schema.locations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.locations_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_locations_one() {
          return new FieldNode(
            schema.locations,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.locations_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.locations_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_markets() {
          return new FieldNode(
            schema.markets_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.markets_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_markets_one() {
          return new FieldNode(
            schema.markets,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.markets_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.markets_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_messages() {
          return new FieldNode(
            schema.messages_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.messages_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_messages_one() {
          return new FieldNode(
            schema.messages,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.messages_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.messages_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_neighborhoods() {
          return new FieldNode(
            schema.neighborhoods_mutation_response,
            new Arguments(
              {
                get objects() {
                  return new ArgumentsField(
                    new ArrayNode(schema.neighborhoods_insert_input, false),
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get insert_neighborhoods_one() {
          return new FieldNode(
            schema.neighborhoods,
            new Arguments(
              {
                get object() {
                  return new ArgumentsField(
                    schema.neighborhoods_insert_input,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get insert_notifications() {
          return new FieldNode(
            schema.notifications_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.notifications_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_notifications_one() {
          return new FieldNode(
            schema.notifications,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.notifications_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.notifications_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_payment_accounts() {
          return new FieldNode(
            schema.payment_accounts_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.payment_accounts_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_payment_accounts_one() {
          return new FieldNode(
            schema.payment_accounts,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.payment_accounts_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.payment_accounts_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_payouts() {
          return new FieldNode(
            schema.payouts_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.payouts_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_payouts_one() {
          return new FieldNode(
            schema.payouts,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.payouts_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.payouts_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_permissions() {
          return new FieldNode(
            schema.permissions_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.permissions_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_permissions_one() {
          return new FieldNode(
            schema.permissions,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.permissions_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.permissions_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_phone_number_information() {
          return new FieldNode(
            schema.phone_number_information_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.phone_number_information_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_phone_number_information_one() {
          return new FieldNode(
            schema.phone_number_information,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.phone_number_information_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.phone_number_information_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_promo_code_uses() {
          return new FieldNode(
            schema.promo_code_uses_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.promo_code_uses_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_promo_code_uses_one() {
          return new FieldNode(
            schema.promo_code_uses,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.promo_code_uses_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.promo_code_uses_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_promo_codes() {
          return new FieldNode(
            schema.promo_codes_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.promo_codes_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_promo_codes_one() {
          return new FieldNode(
            schema.promo_codes,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.promo_codes_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.promo_codes_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_referral_codes() {
          return new FieldNode(
            schema.referral_codes_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.referral_codes_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_referral_codes_one() {
          return new FieldNode(
            schema.referral_codes,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.referral_codes_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.referral_codes_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_refresh_tokens() {
          return new FieldNode(
            schema.refresh_tokens_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.refresh_tokens_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_refresh_tokens_one() {
          return new FieldNode(
            schema.refresh_tokens,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.refresh_tokens_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.refresh_tokens_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_refunds() {
          return new FieldNode(
            schema.refunds_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.refunds_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_refunds_one() {
          return new FieldNode(
            schema.refunds,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.refunds_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.refunds_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_reimbursements() {
          return new FieldNode(
            schema.reimbursements_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reimbursements_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reimbursements_one() {
          return new FieldNode(
            schema.reimbursements,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.reimbursements_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reimbursements_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_admin_approvals() {
          return new FieldNode(
            schema.reservation_admin_approvals_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_admin_approvals_one() {
          return new FieldNode(
            schema.reservation_admin_approvals,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_inspection_steps() {
          return new FieldNode(
            schema.reservation_inspection_steps_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_inspection_steps_one() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_reviews() {
          return new FieldNode(
            schema.reservation_reviews_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_reviews_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_reviews_one() {
          return new FieldNode(
            schema.reservation_reviews,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.reservation_reviews_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_reviews_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_stakeholders() {
          return new FieldNode(
            schema.reservation_stakeholders_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservation_stakeholders_one() {
          return new FieldNode(
            schema.reservation_stakeholders,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservations() {
          return new FieldNode(
            schema.reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_reservations_one() {
          return new FieldNode(
            schema.reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_sim_cards() {
          return new FieldNode(
            schema.sim_cards_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.sim_cards_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_sim_cards_one() {
          return new FieldNode(
            schema.sim_cards,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.sim_cards_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.sim_cards_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_spam_receivers() {
          return new FieldNode(
            schema.spam_receivers_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.spam_receivers_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_spam_receivers_one() {
          return new FieldNode(
            schema.spam_receivers,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.spam_receivers_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.spam_receivers_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_spam_senders() {
          return new FieldNode(
            schema.spam_senders_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.spam_senders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_spam_senders_one() {
          return new FieldNode(
            schema.spam_senders,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.spam_senders_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.spam_senders_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_spatial_ref_sys() {
          return new FieldNode(
            schema.spatial_ref_sys_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_spatial_ref_sys_one() {
          return new FieldNode(
            schema.spatial_ref_sys,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_approved_reservations() {
          return new FieldNode(
            schema.stats_approved_reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_approved_reservations_one() {
          return new FieldNode(
            schema.stats_approved_reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_cancelled_reservations() {
          return new FieldNode(
            schema.stats_cancelled_reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_cancelled_reservations_one() {
          return new FieldNode(
            schema.stats_cancelled_reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_completed_reservations() {
          return new FieldNode(
            schema.stats_completed_reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_completed_reservations_one() {
          return new FieldNode(
            schema.stats_completed_reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_denied_reservations() {
          return new FieldNode(
            schema.stats_denied_reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_denied_reservations_one() {
          return new FieldNode(
            schema.stats_denied_reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_items() {
          return new FieldNode(
            schema.stats_items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.stats_items_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_stats_items_one() {
          return new FieldNode(
            schema.stats_items,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_items_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.stats_items_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_stats_requested_reservations() {
          return new FieldNode(
            schema.stats_requested_reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_requested_reservations_one() {
          return new FieldNode(
            schema.stats_requested_reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_returned_reservations() {
          return new FieldNode(
            schema.stats_returned_reservations_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_returned_reservations_one() {
          return new FieldNode(
            schema.stats_returned_reservations,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_transfers() {
          return new FieldNode(
            schema.stats_transfers_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_transfers_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stats_transfers_one() {
          return new FieldNode(
            schema.stats_transfers,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stats_transfers_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stats_transfers_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stripe_events() {
          return new FieldNode(
            schema.stripe_events_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stripe_events_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_stripe_events_one() {
          return new FieldNode(
            schema.stripe_events,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.stripe_events_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.stripe_events_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_suspension_records() {
          return new FieldNode(
            schema.suspension_records_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.suspension_records_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_suspension_records_one() {
          return new FieldNode(
            schema.suspension_records,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.suspension_records_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.suspension_records_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_telematic_devices() {
          return new FieldNode(
            schema.telematic_devices_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.telematic_devices_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_telematic_devices_one() {
          return new FieldNode(
            schema.telematic_devices,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.telematic_devices_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.telematic_devices_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_telematic_records() {
          return new FieldNode(
            schema.telematic_records_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.telematic_records_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_telematic_records_one() {
          return new FieldNode(
            schema.telematic_records,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.telematic_records_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.telematic_records_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_tier_scores() {
          return new FieldNode(
            schema.tier_scores_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.tier_scores_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_tier_scores_one() {
          return new FieldNode(
            schema.tier_scores,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.tier_scores_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.tier_scores_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_time_blocks() {
          return new FieldNode(
            schema.time_blocks_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.time_blocks_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_time_blocks_one() {
          return new FieldNode(
            schema.time_blocks,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.time_blocks_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.time_blocks_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_transfer_line_items() {
          return new FieldNode(
            schema.transfer_line_items_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.transfer_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_transfer_line_items_one() {
          return new FieldNode(
            schema.transfer_line_items,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.transfer_line_items_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.transfer_line_items_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_transfers() {
          return new FieldNode(
            schema.transfers_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.transfers_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_transfers_one() {
          return new FieldNode(
            schema.transfers,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.transfers_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.transfers_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_transfers_v2() {
          return new FieldNode(
            schema.transfers_v2_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.transfers_v2_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_transfers_v2_one() {
          return new FieldNode(
            schema.transfers_v2,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.transfers_v2_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.transfers_v2_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_upvotes() {
          return new FieldNode(
            schema.upvotes_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.upvotes_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_upvotes_one() {
          return new FieldNode(
            schema.upvotes,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.upvotes_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.upvotes_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_blocks() {
          return new FieldNode(
            schema.user_blocks_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.user_blocks_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_blocks_one() {
          return new FieldNode(
            schema.user_blocks,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.user_blocks_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.user_blocks_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_devices() {
          return new FieldNode(
            schema.user_devices_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.user_devices_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_user_devices_one() {
          return new FieldNode(
            schema.user_devices,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.user_devices_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.user_devices_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_user_images() {
          return new FieldNode(
            schema.user_images_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.user_images_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_images_one() {
          return new FieldNode(
            schema.user_images,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.user_images_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.user_images_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_lists() {
          return new FieldNode(
            schema.user_lists_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.user_lists_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_lists_one() {
          return new FieldNode(
            schema.user_lists,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.user_lists_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.user_lists_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_user_metadata() {
          return new FieldNode(
            schema.user_metadata_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.user_metadata_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_user_metadata_one() {
          return new FieldNode(
            schema.user_metadata,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.user_metadata_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.user_metadata_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_user_permissions() {
          return new FieldNode(
            schema.user_permissions_mutation_response,
            new Arguments(
              {
                get objects() {
                  return new ArgumentsField(
                    new ArrayNode(schema.user_permissions_insert_input, false),
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get insert_user_permissions_one() {
          return new FieldNode(
            schema.user_permissions,
            new Arguments(
              {
                get object() {
                  return new ArgumentsField(
                    schema.user_permissions_insert_input,
                    false
                  );
                },
              },
              true
            ),
            true
          );
        },
        get insert_user_reviews() {
          return new FieldNode(
            schema.user_reviews_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.user_reviews_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_user_reviews_one() {
          return new FieldNode(
            schema.user_reviews,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.user_reviews_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.user_reviews_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_users() {
          return new FieldNode(
            schema.users_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_insert_input, false),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(schema.users_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_users_one() {
          return new FieldNode(
            schema.users,
            new Arguments({
              get object() {
                return new ArgumentsField(schema.users_insert_input, false);
              },
              get on_conflict() {
                return new ArgumentsField(schema.users_on_conflict, true);
              },
            }),
            true
          );
        },
        get insert_vehicle_insurance_rates() {
          return new FieldNode(
            schema.vehicle_insurance_rates_mutation_response,
            new Arguments({
              get objects() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.vehicle_insurance_rates_insert_input,
                    false
                  ),
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get insert_vehicle_insurance_rates_one() {
          return new FieldNode(
            schema.vehicle_insurance_rates,
            new Arguments({
              get object() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_insert_input,
                  false
                );
              },
              get on_conflict() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_on_conflict,
                  true
                );
              },
            }),
            true
          );
        },
        get update_World() {
          return new FieldNode(
            schema.World_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.World_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.World_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.World_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_World_by_pk() {
          return new FieldNode(
            schema.World,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.World_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.World_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.World_pk_columns_input, false);
              },
            }),
            true
          );
        },
        get update__Migration() {
          return new FieldNode(
            schema._Migration_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema._Migration_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema._Migration_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema._Migration_bool_exp, false);
              },
            }),
            true
          );
        },
        get update__Migration_by_pk() {
          return new FieldNode(
            schema._Migration,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema._Migration_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema._Migration_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema._Migration_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_bad_actors() {
          return new FieldNode(
            schema.bad_actors_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.bad_actors_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.bad_actors_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.bad_actors_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_bad_actors_associated_users() {
          return new FieldNode(
            schema.bad_actors_associated_users_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_bad_actors_associated_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_associated_users,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_bad_actors_by_pk() {
          return new FieldNode(
            schema.bad_actors,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.bad_actors_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.bad_actors_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.bad_actors_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_bad_actors_users() {
          return new FieldNode(
            schema.bad_actors_users_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.bad_actors_users_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.bad_actors_users_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_bad_actors_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_users,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.bad_actors_users_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.bad_actors_users_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.bad_actors_users_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_balance_transactions() {
          return new FieldNode(
            schema.balance_transactions_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.balance_transactions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.balance_transactions_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_balance_transactions_by_pk() {
          return new FieldNode(
            schema.balance_transactions,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.balance_transactions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.balance_transactions_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.balance_transactions_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_business_cases() {
          return new FieldNode(
            schema.business_cases_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.business_cases_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.business_cases_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.business_cases_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_business_cases_by_pk() {
          return new FieldNode(
            schema.business_cases,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.business_cases_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.business_cases_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.business_cases_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_categories() {
          return new FieldNode(
            schema.categories_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.categories_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.categories_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.categories_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_categories_by_pk() {
          return new FieldNode(
            schema.categories,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.categories_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.categories_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.categories_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charge_account_records() {
          return new FieldNode(
            schema.charge_account_records_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.charge_account_records_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.charge_account_records_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.charge_account_records_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.charge_account_records_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.charge_account_records_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.charge_account_records_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.charge_account_records_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charge_account_records_by_pk() {
          return new FieldNode(
            schema.charge_account_records,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.charge_account_records_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.charge_account_records_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.charge_account_records_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.charge_account_records_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.charge_account_records_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.charge_account_records_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.charge_account_records_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.charge_account_records_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charge_accounts() {
          return new FieldNode(
            schema.charge_accounts_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.charge_accounts_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.charge_accounts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.charge_accounts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.charge_accounts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.charge_accounts_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.charge_accounts_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.charge_accounts_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charge_accounts_by_pk() {
          return new FieldNode(
            schema.charge_accounts,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.charge_accounts_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.charge_accounts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.charge_accounts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.charge_accounts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.charge_accounts_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.charge_accounts_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.charge_accounts_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.charge_accounts_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charge_line_items() {
          return new FieldNode(
            schema.charge_line_items_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.charge_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.charge_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.charge_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.charge_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.charge_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.charge_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.charge_line_items_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charge_line_items_by_pk() {
          return new FieldNode(
            schema.charge_line_items,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.charge_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.charge_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.charge_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.charge_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.charge_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.charge_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.charge_line_items_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.charge_line_items_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_charges() {
          return new FieldNode(
            schema.charges_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.charges_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.charges_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_charges_by_pk() {
          return new FieldNode(
            schema.charges,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.charges_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.charges_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.charges_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_credit_transactions() {
          return new FieldNode(
            schema.credit_transactions_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.credit_transactions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.credit_transactions_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_credit_transactions_by_pk() {
          return new FieldNode(
            schema.credit_transactions,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.credit_transactions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.credit_transactions_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.credit_transactions_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_daily_statistics() {
          return new FieldNode(
            schema.daily_statistics_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.daily_statistics_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.daily_statistics_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_daily_statistics_by_pk() {
          return new FieldNode(
            schema.daily_statistics,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.daily_statistics_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.daily_statistics_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.daily_statistics_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_dodge_fleet_orders() {
          return new FieldNode(
            schema.dodge_fleet_orders_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_dodge_fleet_orders_by_pk() {
          return new FieldNode(
            schema.dodge_fleet_orders,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_external_accounts() {
          return new FieldNode(
            schema.external_accounts_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.external_accounts_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.external_accounts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.external_accounts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.external_accounts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.external_accounts_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.external_accounts_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.external_accounts_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_external_accounts_by_pk() {
          return new FieldNode(
            schema.external_accounts,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.external_accounts_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.external_accounts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.external_accounts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.external_accounts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.external_accounts_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.external_accounts_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.external_accounts_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.external_accounts_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_fluid_ledger() {
          return new FieldNode(
            schema.fluid_ledger_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.fluid_ledger_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.fluid_ledger_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.fluid_ledger_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.fluid_ledger_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.fluid_ledger_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.fluid_ledger_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(schema.fluid_ledger_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_fluid_ledger_by_pk() {
          return new FieldNode(
            schema.fluid_ledger,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.fluid_ledger_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.fluid_ledger_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.fluid_ledger_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.fluid_ledger_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.fluid_ledger_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.fluid_ledger_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(schema.fluid_ledger_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.fluid_ledger_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_fluid_transactions() {
          return new FieldNode(
            schema.fluid_transactions_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.fluid_transactions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.fluid_transactions_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_fluid_transactions_by_pk() {
          return new FieldNode(
            schema.fluid_transactions,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.fluid_transactions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.fluid_transactions_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.fluid_transactions_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_charge_line_items() {
          return new FieldNode(
            schema.general_charge_line_items_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.general_charge_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.general_charge_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.general_charge_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.general_charge_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.general_charge_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.general_charge_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_charge_line_items_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_charge_line_items_by_pk() {
          return new FieldNode(
            schema.general_charge_line_items,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.general_charge_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.general_charge_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.general_charge_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.general_charge_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.general_charge_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.general_charge_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_charge_line_items_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.general_charge_line_items_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_charges() {
          return new FieldNode(
            schema.general_charges_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.general_charges_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_charges_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_charges_by_pk() {
          return new FieldNode(
            schema.general_charges,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.general_charges_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_charges_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.general_charges_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_images() {
          return new FieldNode(
            schema.general_images_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.general_images_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_images_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_images_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_images_by_pk() {
          return new FieldNode(
            schema.general_images,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.general_images_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_images_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.general_images_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_transfer_line_items() {
          return new FieldNode(
            schema.general_transfer_line_items_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_transfer_line_items_by_pk() {
          return new FieldNode(
            schema.general_transfer_line_items,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_transfers() {
          return new FieldNode(
            schema.general_transfers_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.general_transfers_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_transfers_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_general_transfers_by_pk() {
          return new FieldNode(
            schema.general_transfers,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.general_transfers_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.general_transfers_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.general_transfers_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_geometry_columns() {
          return new FieldNode(
            schema.geometry_columns_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.geometry_columns_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.geometry_columns_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geometry_columns_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_goose_db_version() {
          return new FieldNode(
            schema.goose_db_version_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.goose_db_version_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.goose_db_version_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.goose_db_version_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_goose_db_version_by_pk() {
          return new FieldNode(
            schema.goose_db_version,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.goose_db_version_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.goose_db_version_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.goose_db_version_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_identification_images() {
          return new FieldNode(
            schema.identification_images_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.identification_images_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.identification_images_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_identification_images_by_pk() {
          return new FieldNode(
            schema.identification_images,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.identification_images_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.identification_images_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.identification_images_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_identifications() {
          return new FieldNode(
            schema.identifications_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.identifications_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.identifications_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.identifications_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.identifications_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.identifications_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.identifications_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.identifications_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_identifications_by_pk() {
          return new FieldNode(
            schema.identifications,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.identifications_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.identifications_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.identifications_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.identifications_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.identifications_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.identifications_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.identifications_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.identifications_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_item_images() {
          return new FieldNode(
            schema.item_images_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.item_images_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.item_images_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_item_images_by_pk() {
          return new FieldNode(
            schema.item_images,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.item_images_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.item_images_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.item_images_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_item_inspection_steps() {
          return new FieldNode(
            schema.item_inspection_steps_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.item_inspection_steps_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.item_inspection_steps_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.item_inspection_steps_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.item_inspection_steps_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.item_inspection_steps_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.item_inspection_steps_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.item_inspection_steps_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_item_inspection_steps_by_pk() {
          return new FieldNode(
            schema.item_inspection_steps,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.item_inspection_steps_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.item_inspection_steps_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.item_inspection_steps_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.item_inspection_steps_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.item_inspection_steps_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.item_inspection_steps_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.item_inspection_steps_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.item_inspection_steps_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_item_reviews() {
          return new FieldNode(
            schema.item_reviews_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.item_reviews_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.item_reviews_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_item_reviews_by_pk() {
          return new FieldNode(
            schema.item_reviews,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.item_reviews_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.item_reviews_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.item_reviews_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_item_stakeholders() {
          return new FieldNode(
            schema.item_stakeholders_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.item_stakeholders_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.item_stakeholders_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_item_stakeholders_by_pk() {
          return new FieldNode(
            schema.item_stakeholders,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.item_stakeholders_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.item_stakeholders_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.item_stakeholders_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_items() {
          return new FieldNode(
            schema.items_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.items_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(schema.items_delete_elem_input, true);
              },
              get _delete_key() {
                return new ArgumentsField(schema.items_delete_key_input, true);
              },
              get _inc() {
                return new ArgumentsField(schema.items_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.items_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.items_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_items_by_pk() {
          return new FieldNode(
            schema.items,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.items_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(schema.items_delete_elem_input, true);
              },
              get _delete_key() {
                return new ArgumentsField(schema.items_delete_key_input, true);
              },
              get _inc() {
                return new ArgumentsField(schema.items_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.items_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.items_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.items_pk_columns_input, false);
              },
            }),
            true
          );
        },
        get update_items_community_needs() {
          return new FieldNode(
            schema.items_community_needs_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.items_community_needs_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.items_community_needs_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_items_community_needs_by_pk() {
          return new FieldNode(
            schema.items_community_needs,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.items_community_needs_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.items_community_needs_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.items_community_needs_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_list_items() {
          return new FieldNode(
            schema.list_items_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.list_items_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.list_items_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_list_items_by_pk() {
          return new FieldNode(
            schema.list_items,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.list_items_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.list_items_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.list_items_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_locations() {
          return new FieldNode(
            schema.locations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.locations_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.locations_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_locations_by_pk() {
          return new FieldNode(
            schema.locations,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.locations_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.locations_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.locations_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_markets() {
          return new FieldNode(
            schema.markets_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.markets_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.markets_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_markets_by_pk() {
          return new FieldNode(
            schema.markets,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.markets_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.markets_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.markets_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_messages() {
          return new FieldNode(
            schema.messages_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.messages_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.messages_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_messages_by_pk() {
          return new FieldNode(
            schema.messages,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.messages_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.messages_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.messages_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_neighborhoods() {
          return new FieldNode(
            schema.neighborhoods_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.neighborhoods_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.neighborhoods_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.neighborhoods_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_notifications() {
          return new FieldNode(
            schema.notifications_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.notifications_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.notifications_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_notifications_by_pk() {
          return new FieldNode(
            schema.notifications,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.notifications_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.notifications_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.notifications_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_payment_accounts() {
          return new FieldNode(
            schema.payment_accounts_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.payment_accounts_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.payment_accounts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.payment_accounts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.payment_accounts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.payment_accounts_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.payment_accounts_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.payment_accounts_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_payment_accounts_by_pk() {
          return new FieldNode(
            schema.payment_accounts,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.payment_accounts_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.payment_accounts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.payment_accounts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.payment_accounts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.payment_accounts_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.payment_accounts_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.payment_accounts_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.payment_accounts_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_payouts() {
          return new FieldNode(
            schema.payouts_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.payouts_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.payouts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.payouts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.payouts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.payouts_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.payouts_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.payouts_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_payouts_by_pk() {
          return new FieldNode(
            schema.payouts,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.payouts_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.payouts_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.payouts_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.payouts_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.payouts_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.payouts_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.payouts_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.payouts_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_permissions() {
          return new FieldNode(
            schema.permissions_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.permissions_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.permissions_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.permissions_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_permissions_by_pk() {
          return new FieldNode(
            schema.permissions,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.permissions_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.permissions_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.permissions_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_phone_number_information() {
          return new FieldNode(
            schema.phone_number_information_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.phone_number_information_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.phone_number_information_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.phone_number_information_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.phone_number_information_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.phone_number_information_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.phone_number_information_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.phone_number_information_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_phone_number_information_by_pk() {
          return new FieldNode(
            schema.phone_number_information,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.phone_number_information_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.phone_number_information_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.phone_number_information_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.phone_number_information_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.phone_number_information_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.phone_number_information_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.phone_number_information_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.phone_number_information_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_promo_code_uses() {
          return new FieldNode(
            schema.promo_code_uses_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.promo_code_uses_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.promo_code_uses_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_promo_code_uses_by_pk() {
          return new FieldNode(
            schema.promo_code_uses,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.promo_code_uses_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.promo_code_uses_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.promo_code_uses_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_promo_codes() {
          return new FieldNode(
            schema.promo_codes_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.promo_codes_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.promo_codes_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.promo_codes_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_promo_codes_by_pk() {
          return new FieldNode(
            schema.promo_codes,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.promo_codes_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.promo_codes_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.promo_codes_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_referral_codes() {
          return new FieldNode(
            schema.referral_codes_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.referral_codes_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.referral_codes_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.referral_codes_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_referral_codes_by_pk() {
          return new FieldNode(
            schema.referral_codes,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.referral_codes_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.referral_codes_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.referral_codes_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_refresh_tokens() {
          return new FieldNode(
            schema.refresh_tokens_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.refresh_tokens_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.refresh_tokens_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.refresh_tokens_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_refresh_tokens_by_pk() {
          return new FieldNode(
            schema.refresh_tokens,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.refresh_tokens_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.refresh_tokens_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.refresh_tokens_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_refunds() {
          return new FieldNode(
            schema.refunds_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.refunds_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.refunds_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_refunds_by_pk() {
          return new FieldNode(
            schema.refunds,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.refunds_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.refunds_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.refunds_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reimbursements() {
          return new FieldNode(
            schema.reimbursements_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reimbursements_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reimbursements_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reimbursements_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reimbursements_by_pk() {
          return new FieldNode(
            schema.reimbursements,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reimbursements_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reimbursements_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.reimbursements_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_admin_approvals() {
          return new FieldNode(
            schema.reservation_admin_approvals_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_admin_approvals_by_pk() {
          return new FieldNode(
            schema.reservation_admin_approvals,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_inspection_steps() {
          return new FieldNode(
            schema.reservation_inspection_steps_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_inspection_steps_by_pk() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_reviews() {
          return new FieldNode(
            schema.reservation_reviews_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_reviews_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_reviews_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_reviews_by_pk() {
          return new FieldNode(
            schema.reservation_reviews,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_reviews_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_reviews_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.reservation_reviews_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_stakeholders() {
          return new FieldNode(
            schema.reservation_stakeholders_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservation_stakeholders_by_pk() {
          return new FieldNode(
            schema.reservation_stakeholders,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_reservations() {
          return new FieldNode(
            schema.reservations_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.reservations_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.reservations_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.reservations_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.reservations_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.reservations_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.reservations_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(schema.reservations_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_reservations_by_pk() {
          return new FieldNode(
            schema.reservations,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.reservations_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.reservations_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.reservations_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.reservations_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.reservations_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.reservations_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(schema.reservations_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.reservations_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_sim_cards() {
          return new FieldNode(
            schema.sim_cards_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.sim_cards_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.sim_cards_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_sim_cards_by_pk() {
          return new FieldNode(
            schema.sim_cards,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.sim_cards_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.sim_cards_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.sim_cards_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_spam_receivers() {
          return new FieldNode(
            schema.spam_receivers_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.spam_receivers_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.spam_receivers_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.spam_receivers_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_spam_receivers_by_pk() {
          return new FieldNode(
            schema.spam_receivers,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.spam_receivers_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.spam_receivers_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.spam_receivers_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_spam_senders() {
          return new FieldNode(
            schema.spam_senders_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.spam_senders_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.spam_senders_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.spam_senders_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_spam_senders_by_pk() {
          return new FieldNode(
            schema.spam_senders,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.spam_senders_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.spam_senders_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.spam_senders_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_spatial_ref_sys() {
          return new FieldNode(
            schema.spatial_ref_sys_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_spatial_ref_sys_by_pk() {
          return new FieldNode(
            schema.spatial_ref_sys,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_approved_reservations() {
          return new FieldNode(
            schema.stats_approved_reservations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_cancelled_reservations() {
          return new FieldNode(
            schema.stats_cancelled_reservations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_completed_reservations() {
          return new FieldNode(
            schema.stats_completed_reservations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_denied_reservations() {
          return new FieldNode(
            schema.stats_denied_reservations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_items() {
          return new FieldNode(
            schema.stats_items_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.stats_items_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.stats_items_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_stats_requested_reservations() {
          return new FieldNode(
            schema.stats_requested_reservations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_returned_reservations() {
          return new FieldNode(
            schema.stats_returned_reservations_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stats_transfers() {
          return new FieldNode(
            schema.stats_transfers_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.stats_transfers_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.stats_transfers_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_stripe_events() {
          return new FieldNode(
            schema.stripe_events_mutation_response,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.stripe_events_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.stripe_events_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_stripe_events_by_pk() {
          return new FieldNode(
            schema.stripe_events,
            new Arguments({
              get _set() {
                return new ArgumentsField(schema.stripe_events_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.stripe_events_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_suspension_records() {
          return new FieldNode(
            schema.suspension_records_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.suspension_records_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.suspension_records_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_suspension_records_by_pk() {
          return new FieldNode(
            schema.suspension_records,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.suspension_records_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.suspension_records_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.suspension_records_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_telematic_devices() {
          return new FieldNode(
            schema.telematic_devices_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.telematic_devices_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.telematic_devices_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_telematic_devices_by_pk() {
          return new FieldNode(
            schema.telematic_devices,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.telematic_devices_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.telematic_devices_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.telematic_devices_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_telematic_records() {
          return new FieldNode(
            schema.telematic_records_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.telematic_records_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.telematic_records_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_telematic_records_by_pk() {
          return new FieldNode(
            schema.telematic_records,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.telematic_records_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.telematic_records_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.telematic_records_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_tier_scores() {
          return new FieldNode(
            schema.tier_scores_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.tier_scores_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.tier_scores_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.tier_scores_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_tier_scores_by_pk() {
          return new FieldNode(
            schema.tier_scores,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.tier_scores_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.tier_scores_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.tier_scores_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_time_blocks() {
          return new FieldNode(
            schema.time_blocks_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.time_blocks_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.time_blocks_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_time_blocks_by_pk() {
          return new FieldNode(
            schema.time_blocks,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.time_blocks_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.time_blocks_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.time_blocks_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_transfer_line_items() {
          return new FieldNode(
            schema.transfer_line_items_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.transfer_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.transfer_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.transfer_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.transfer_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.transfer_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.transfer_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.transfer_line_items_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_transfer_line_items_by_pk() {
          return new FieldNode(
            schema.transfer_line_items,
            new Arguments({
              get _append() {
                return new ArgumentsField(
                  schema.transfer_line_items_append_input,
                  true
                );
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.transfer_line_items_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.transfer_line_items_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.transfer_line_items_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(
                  schema.transfer_line_items_inc_input,
                  true
                );
              },
              get _prepend() {
                return new ArgumentsField(
                  schema.transfer_line_items_prepend_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.transfer_line_items_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.transfer_line_items_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_transfers() {
          return new FieldNode(
            schema.transfers_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.transfers_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.transfers_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_transfers_by_pk() {
          return new FieldNode(
            schema.transfers,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.transfers_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.transfers_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.transfers_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_transfers_v2() {
          return new FieldNode(
            schema.transfers_v2_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.transfers_v2_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.transfers_v2_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_transfers_v2_by_pk() {
          return new FieldNode(
            schema.transfers_v2,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.transfers_v2_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.transfers_v2_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.transfers_v2_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_upvotes() {
          return new FieldNode(
            schema.upvotes_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.upvotes_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.upvotes_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.upvotes_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.upvotes_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.upvotes_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.upvotes_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.upvotes_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_upvotes_by_pk() {
          return new FieldNode(
            schema.upvotes,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.upvotes_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.upvotes_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(
                  schema.upvotes_delete_elem_input,
                  true
                );
              },
              get _delete_key() {
                return new ArgumentsField(
                  schema.upvotes_delete_key_input,
                  true
                );
              },
              get _inc() {
                return new ArgumentsField(schema.upvotes_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.upvotes_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.upvotes_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.upvotes_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_user_blocks() {
          return new FieldNode(
            schema.user_blocks_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_blocks_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_blocks_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_user_blocks_by_pk() {
          return new FieldNode(
            schema.user_blocks,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_blocks_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_blocks_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.user_blocks_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_user_devices() {
          return new FieldNode(
            schema.user_devices_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_devices_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_devices_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_user_devices_by_pk() {
          return new FieldNode(
            schema.user_devices,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_devices_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_devices_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.user_devices_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_user_images() {
          return new FieldNode(
            schema.user_images_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_images_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_images_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_user_images_by_pk() {
          return new FieldNode(
            schema.user_images,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_images_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_images_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.user_images_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_user_lists() {
          return new FieldNode(
            schema.user_lists_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_lists_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_lists_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_user_lists_by_pk() {
          return new FieldNode(
            schema.user_lists,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_lists_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_lists_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.user_lists_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_user_metadata() {
          return new FieldNode(
            schema.user_metadata_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_metadata_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_metadata_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_user_permissions() {
          return new FieldNode(
            schema.user_permissions_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.user_permissions_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.user_permissions_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_user_reviews() {
          return new FieldNode(
            schema.user_reviews_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_reviews_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_reviews_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_user_reviews_by_pk() {
          return new FieldNode(
            schema.user_reviews,
            new Arguments({
              get _inc() {
                return new ArgumentsField(schema.user_reviews_inc_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.user_reviews_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.user_reviews_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
        get update_users() {
          return new FieldNode(
            schema.users_mutation_response,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.users_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.users_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(schema.users_delete_elem_input, true);
              },
              get _delete_key() {
                return new ArgumentsField(schema.users_delete_key_input, true);
              },
              get _inc() {
                return new ArgumentsField(schema.users_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.users_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.users_set_input, true);
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, false);
              },
            }),
            true
          );
        },
        get update_users_by_pk() {
          return new FieldNode(
            schema.users,
            new Arguments({
              get _append() {
                return new ArgumentsField(schema.users_append_input, true);
              },
              get _delete_at_path() {
                return new ArgumentsField(
                  schema.users_delete_at_path_input,
                  true
                );
              },
              get _delete_elem() {
                return new ArgumentsField(schema.users_delete_elem_input, true);
              },
              get _delete_key() {
                return new ArgumentsField(schema.users_delete_key_input, true);
              },
              get _inc() {
                return new ArgumentsField(schema.users_inc_input, true);
              },
              get _prepend() {
                return new ArgumentsField(schema.users_prepend_input, true);
              },
              get _set() {
                return new ArgumentsField(schema.users_set_input, true);
              },
              get pk_columns() {
                return new ArgumentsField(schema.users_pk_columns_input, false);
              },
            }),
            true
          );
        },
        get update_vehicle_insurance_rates() {
          return new FieldNode(
            schema.vehicle_insurance_rates_mutation_response,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_set_input,
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_bool_exp,
                  false
                );
              },
            }),
            true
          );
        },
        get update_vehicle_insurance_rates_by_pk() {
          return new FieldNode(
            schema.vehicle_insurance_rates,
            new Arguments({
              get _inc() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_inc_input,
                  true
                );
              },
              get _set() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_set_input,
                  true
                );
              },
              get pk_columns() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_pk_columns_input,
                  false
                );
              },
            }),
            true
          );
        },
      },
      {
        name: 'mutation_root',
        extension: ((extensions as any) || {}).mutation_root,
      }
    );
  },
  get name() {
    return new ScalarNode({
      name: 'name',
      extension: ((extensions as any) || {}).name,
    });
  },
  get name_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.name, true);
        },
        get _gt() {
          return new InputNodeField(schema.name, true);
        },
        get _gte() {
          return new InputNodeField(schema.name, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.name, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.name, true);
        },
        get _lte() {
          return new InputNodeField(schema.name, true);
        },
        get _neq() {
          return new InputNodeField(schema.name, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.name, true), true);
        },
      },
      { name: 'name_comparison_exp' }
    );
  },
  get neighborhoods() {
    return new ObjectNode(
      {
        get boundaries() {
          return new FieldNode(schema.geometry, undefined, true);
        },
        get centroid() {
          return new FieldNode(schema.geometry, undefined, true);
        },
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get county() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get township() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'neighborhoods',
        extension: ((extensions as any) || {}).neighborhoods,
      }
    );
  },
  get neighborhoods_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.neighborhoods_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.neighborhoods, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'neighborhoods_aggregate',
        extension: ((extensions as any) || {}).neighborhoods_aggregate,
      }
    );
  },
  get neighborhoods_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.neighborhoods_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.neighborhoods_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.neighborhoods_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.neighborhoods_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.neighborhoods_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.neighborhoods_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.neighborhoods_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.neighborhoods_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.neighborhoods_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.neighborhoods_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'neighborhoods_aggregate_fields',
        extension: ((extensions as any) || {}).neighborhoods_aggregate_fields,
      }
    );
  },
  get neighborhoods_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.neighborhoods_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.neighborhoods_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.neighborhoods_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.neighborhoods_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.neighborhoods_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.neighborhoods_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.neighborhoods_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.neighborhoods_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.neighborhoods_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.neighborhoods_variance_order_by,
            true
          );
        },
      },
      { name: 'neighborhoods_aggregate_order_by' }
    );
  },
  get neighborhoods_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.neighborhoods_insert_input, false),
            false
          );
        },
      },
      { name: 'neighborhoods_arr_rel_insert_input' }
    );
  },
  get neighborhoods_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_avg_fields',
        extension: ((extensions as any) || {}).neighborhoods_avg_fields,
      }
    );
  },
  get neighborhoods_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_avg_order_by' }
    );
  },
  get neighborhoods_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.neighborhoods_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.neighborhoods_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.neighborhoods_bool_exp, true),
            true
          );
        },
        get boundaries() {
          return new InputNodeField(schema.geometry_comparison_exp, true);
        },
        get centroid() {
          return new InputNodeField(schema.geometry_comparison_exp, true);
        },
        get city() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get county() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get order() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get parent_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get township() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'neighborhoods_bool_exp' }
    );
  },
  get neighborhoods_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get order() {
          return new InputNodeField(schema.Int, true);
        },
        get parent_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'neighborhoods_inc_input' }
    );
  },
  get neighborhoods_insert_input() {
    return new InputNode(
      {
        get boundaries() {
          return new InputNodeField(schema.geometry, true);
        },
        get centroid() {
          return new InputNodeField(schema.geometry, true);
        },
        get city() {
          return new InputNodeField(schema.String, true);
        },
        get county() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get order() {
          return new InputNodeField(schema.Int, true);
        },
        get parent_id() {
          return new InputNodeField(schema.Int, true);
        },
        get township() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'neighborhoods_insert_input' }
    );
  },
  get neighborhoods_max_fields() {
    return new ObjectNode(
      {
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get county() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get township() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'neighborhoods_max_fields',
        extension: ((extensions as any) || {}).neighborhoods_max_fields,
      }
    );
  },
  get neighborhoods_max_order_by() {
    return new InputNode(
      {
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get county() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get township() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_max_order_by' }
    );
  },
  get neighborhoods_min_fields() {
    return new ObjectNode(
      {
        get city() {
          return new FieldNode(schema.String, undefined, true);
        },
        get county() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get township() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'neighborhoods_min_fields',
        extension: ((extensions as any) || {}).neighborhoods_min_fields,
      }
    );
  },
  get neighborhoods_min_order_by() {
    return new InputNode(
      {
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get county() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get township() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_min_order_by' }
    );
  },
  get neighborhoods_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.neighborhoods, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'neighborhoods_mutation_response',
        extension: ((extensions as any) || {}).neighborhoods_mutation_response,
      }
    );
  },
  get neighborhoods_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.neighborhoods_insert_input, false);
        },
      },
      { name: 'neighborhoods_obj_rel_insert_input' }
    );
  },
  get neighborhoods_order_by() {
    return new InputNode(
      {
        get boundaries() {
          return new InputNodeField(schema.order_by, true);
        },
        get centroid() {
          return new InputNodeField(schema.order_by, true);
        },
        get city() {
          return new InputNodeField(schema.order_by, true);
        },
        get county() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get township() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_order_by' }
    );
  },
  get neighborhoods_select_column() {
    return new EnumNode({ name: 'neighborhoods_select_column' });
  },
  get neighborhoods_set_input() {
    return new InputNode(
      {
        get boundaries() {
          return new InputNodeField(schema.geometry, true);
        },
        get centroid() {
          return new InputNodeField(schema.geometry, true);
        },
        get city() {
          return new InputNodeField(schema.String, true);
        },
        get county() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get order() {
          return new InputNodeField(schema.Int, true);
        },
        get parent_id() {
          return new InputNodeField(schema.Int, true);
        },
        get township() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'neighborhoods_set_input' }
    );
  },
  get neighborhoods_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_stddev_fields',
        extension: ((extensions as any) || {}).neighborhoods_stddev_fields,
      }
    );
  },
  get neighborhoods_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_stddev_order_by' }
    );
  },
  get neighborhoods_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_stddev_pop_fields',
        extension: ((extensions as any) || {}).neighborhoods_stddev_pop_fields,
      }
    );
  },
  get neighborhoods_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_stddev_pop_order_by' }
    );
  },
  get neighborhoods_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_stddev_samp_fields',
        extension: ((extensions as any) || {}).neighborhoods_stddev_samp_fields,
      }
    );
  },
  get neighborhoods_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_stddev_samp_order_by' }
    );
  },
  get neighborhoods_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'neighborhoods_sum_fields',
        extension: ((extensions as any) || {}).neighborhoods_sum_fields,
      }
    );
  },
  get neighborhoods_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_sum_order_by' }
    );
  },
  get neighborhoods_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_var_pop_fields',
        extension: ((extensions as any) || {}).neighborhoods_var_pop_fields,
      }
    );
  },
  get neighborhoods_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_var_pop_order_by' }
    );
  },
  get neighborhoods_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_var_samp_fields',
        extension: ((extensions as any) || {}).neighborhoods_var_samp_fields,
      }
    );
  },
  get neighborhoods_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_var_samp_order_by' }
    );
  },
  get neighborhoods_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get order() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get parent_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'neighborhoods_variance_fields',
        extension: ((extensions as any) || {}).neighborhoods_variance_fields,
      }
    );
  },
  get neighborhoods_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get order() {
          return new InputNodeField(schema.order_by, true);
        },
        get parent_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'neighborhoods_variance_order_by' }
    );
  },
  get notifications() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get read() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'notifications',
        extension: ((extensions as any) || {}).notifications,
      }
    );
  },
  get notifications_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.notifications_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.notifications, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'notifications_aggregate',
        extension: ((extensions as any) || {}).notifications_aggregate,
      }
    );
  },
  get notifications_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.notifications_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.notifications_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.notifications_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.notifications_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.notifications_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.notifications_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.notifications_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.notifications_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.notifications_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.notifications_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'notifications_aggregate_fields',
        extension: ((extensions as any) || {}).notifications_aggregate_fields,
      }
    );
  },
  get notifications_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.notifications_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.notifications_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.notifications_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.notifications_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.notifications_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.notifications_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.notifications_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.notifications_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.notifications_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.notifications_variance_order_by,
            true
          );
        },
      },
      { name: 'notifications_aggregate_order_by' }
    );
  },
  get notifications_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.notifications_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.notifications_on_conflict, true);
        },
      },
      { name: 'notifications_arr_rel_insert_input' }
    );
  },
  get notifications_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_avg_fields',
        extension: ((extensions as any) || {}).notifications_avg_fields,
      }
    );
  },
  get notifications_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_avg_order_by' }
    );
  },
  get notifications_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.notifications_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.notifications_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.notifications_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get message() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get read() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'notifications_bool_exp' }
    );
  },
  get notifications_constraint() {
    return new EnumNode({ name: 'notifications_constraint' });
  },
  get notifications_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'notifications_inc_input' }
    );
  },
  get notifications_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get message() {
          return new InputNodeField(schema.String, true);
        },
        get read() {
          return new InputNodeField(schema.Boolean, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'notifications_insert_input' }
    );
  },
  get notifications_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'notifications_max_fields',
        extension: ((extensions as any) || {}).notifications_max_fields,
      }
    );
  },
  get notifications_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_max_order_by' }
    );
  },
  get notifications_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'notifications_min_fields',
        extension: ((extensions as any) || {}).notifications_min_fields,
      }
    );
  },
  get notifications_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_min_order_by' }
    );
  },
  get notifications_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.notifications, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'notifications_mutation_response',
        extension: ((extensions as any) || {}).notifications_mutation_response,
      }
    );
  },
  get notifications_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.notifications_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.notifications_on_conflict, true);
        },
      },
      { name: 'notifications_obj_rel_insert_input' }
    );
  },
  get notifications_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.notifications_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.notifications_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.notifications_bool_exp, true);
        },
      },
      { name: 'notifications_on_conflict' }
    );
  },
  get notifications_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get read() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_order_by' }
    );
  },
  get notifications_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'notifications_pk_columns_input' }
    );
  },
  get notifications_select_column() {
    return new EnumNode({ name: 'notifications_select_column' });
  },
  get notifications_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get message() {
          return new InputNodeField(schema.String, true);
        },
        get read() {
          return new InputNodeField(schema.Boolean, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'notifications_set_input' }
    );
  },
  get notifications_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_stddev_fields',
        extension: ((extensions as any) || {}).notifications_stddev_fields,
      }
    );
  },
  get notifications_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_stddev_order_by' }
    );
  },
  get notifications_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_stddev_pop_fields',
        extension: ((extensions as any) || {}).notifications_stddev_pop_fields,
      }
    );
  },
  get notifications_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_stddev_pop_order_by' }
    );
  },
  get notifications_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_stddev_samp_fields',
        extension: ((extensions as any) || {}).notifications_stddev_samp_fields,
      }
    );
  },
  get notifications_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_stddev_samp_order_by' }
    );
  },
  get notifications_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'notifications_sum_fields',
        extension: ((extensions as any) || {}).notifications_sum_fields,
      }
    );
  },
  get notifications_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_sum_order_by' }
    );
  },
  get notifications_update_column() {
    return new EnumNode({ name: 'notifications_update_column' });
  },
  get notifications_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_var_pop_fields',
        extension: ((extensions as any) || {}).notifications_var_pop_fields,
      }
    );
  },
  get notifications_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_var_pop_order_by' }
    );
  },
  get notifications_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_var_samp_fields',
        extension: ((extensions as any) || {}).notifications_var_samp_fields,
      }
    );
  },
  get notifications_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_var_samp_order_by' }
    );
  },
  get notifications_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'notifications_variance_fields',
        extension: ((extensions as any) || {}).notifications_variance_fields,
      }
    );
  },
  get notifications_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'notifications_variance_order_by' }
    );
  },
  get numeric() {
    return new ScalarNode({
      name: 'numeric',
      extension: ((extensions as any) || {}).numeric,
    });
  },
  get numeric_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.numeric, true);
        },
        get _gt() {
          return new InputNodeField(schema.numeric, true);
        },
        get _gte() {
          return new InputNodeField(schema.numeric, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.numeric, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.numeric, true);
        },
        get _lte() {
          return new InputNodeField(schema.numeric, true);
        },
        get _neq() {
          return new InputNodeField(schema.numeric, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.numeric, true), true);
        },
      },
      { name: 'numeric_comparison_exp' }
    );
  },
  get oid() {
    return new ScalarNode({
      name: 'oid',
      extension: ((extensions as any) || {}).oid,
    });
  },
  get oid_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.oid, true);
        },
        get _gt() {
          return new InputNodeField(schema.oid, true);
        },
        get _gte() {
          return new InputNodeField(schema.oid, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.oid, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.oid, true);
        },
        get _lte() {
          return new InputNodeField(schema.oid, true);
        },
        get _neq() {
          return new InputNodeField(schema.oid, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.oid, true), true);
        },
      },
      { name: 'oid_comparison_exp' }
    );
  },
  get order_by() {
    return new EnumNode({ name: 'order_by' });
  },
  get payment_accounts() {
    return new ObjectNode(
      {
        get account_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get address() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get disabled_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get external_account() {
          return new FieldNode(schema.external_accounts, undefined, true);
        },
        get external_accounts() {
          return new FieldNode(
            new ArrayNode(schema.external_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get external_accounts_aggregate() {
          return new FieldNode(
            schema.external_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get general_transfers() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get transfers_v2s() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get verification_due_by() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get verification_fields() {
          return new FieldNode(schema._varchar, undefined, true);
        },
        get verification_status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'payment_accounts',
        extension: ((extensions as any) || {}).payment_accounts,
      }
    );
  },
  get payment_accounts_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.payment_accounts_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.payment_accounts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'payment_accounts_aggregate',
        extension: ((extensions as any) || {}).payment_accounts_aggregate,
      }
    );
  },
  get payment_accounts_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.payment_accounts_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.payment_accounts_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.payment_accounts_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.payment_accounts_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.payment_accounts_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.payment_accounts_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.payment_accounts_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.payment_accounts_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.payment_accounts_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.payment_accounts_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'payment_accounts_aggregate_fields',
        extension: ((extensions as any) || {})
          .payment_accounts_aggregate_fields,
      }
    );
  },
  get payment_accounts_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.payment_accounts_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.payment_accounts_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.payment_accounts_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.payment_accounts_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.payment_accounts_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.payment_accounts_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.payment_accounts_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.payment_accounts_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.payment_accounts_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.payment_accounts_variance_order_by,
            true
          );
        },
      },
      { name: 'payment_accounts_aggregate_order_by' }
    );
  },
  get payment_accounts_append_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'payment_accounts_append_input' }
    );
  },
  get payment_accounts_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.payment_accounts_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.payment_accounts_on_conflict, true);
        },
      },
      { name: 'payment_accounts_arr_rel_insert_input' }
    );
  },
  get payment_accounts_avg_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_avg_fields',
        extension: ((extensions as any) || {}).payment_accounts_avg_fields,
      }
    );
  },
  get payment_accounts_avg_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_avg_order_by' }
    );
  },
  get payment_accounts_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.payment_accounts_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.payment_accounts_bool_exp, true),
            true
          );
        },
        get account_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get address() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get brand() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get disabled_reason() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get external_account() {
          return new InputNodeField(schema.external_accounts_bool_exp, true);
        },
        get external_accounts() {
          return new InputNodeField(schema.external_accounts_bool_exp, true);
        },
        get first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get funding() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get general_transfers() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get object() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payout_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get transfers_v2s() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get verification_due_by() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get verification_fields() {
          return new InputNodeField(schema._varchar_comparison_exp, true);
        },
        get verification_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'payment_accounts_bool_exp' }
    );
  },
  get payment_accounts_constraint() {
    return new EnumNode({ name: 'payment_accounts_constraint' });
  },
  get payment_accounts_delete_at_path_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'payment_accounts_delete_at_path_input' }
    );
  },
  get payment_accounts_delete_elem_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'payment_accounts_delete_elem_input' }
    );
  },
  get payment_accounts_delete_key_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'payment_accounts_delete_key_input' }
    );
  },
  get payment_accounts_inc_input() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'payment_accounts_inc_input' }
    );
  },
  get payment_accounts_insert_input() {
    return new InputNode(
      {
        get account_id() {
          return new InputNodeField(schema.String, true);
        },
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get disabled_reason() {
          return new InputNodeField(schema.String, true);
        },
        get enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get external_account() {
          return new InputNodeField(
            schema.external_accounts_obj_rel_insert_input,
            true
          );
        },
        get external_accounts() {
          return new InputNodeField(
            schema.external_accounts_arr_rel_insert_input,
            true
          );
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get general_transfers() {
          return new InputNodeField(
            schema.general_transfers_arr_rel_insert_input,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get object() {
          return new InputNodeField(schema.String, true);
        },
        get payout_id() {
          return new InputNodeField(schema.String, true);
        },
        get transfers_v2s() {
          return new InputNodeField(
            schema.transfers_v2_arr_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get verification_due_by() {
          return new InputNodeField(schema.timestamp, true);
        },
        get verification_fields() {
          return new InputNodeField(schema._varchar, true);
        },
        get verification_status() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'payment_accounts_insert_input' }
    );
  },
  get payment_accounts_max_fields() {
    return new ObjectNode(
      {
        get account_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get disabled_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get verification_due_by() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get verification_status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'payment_accounts_max_fields',
        extension: ((extensions as any) || {}).payment_accounts_max_fields,
      }
    );
  },
  get payment_accounts_max_order_by() {
    return new InputNode(
      {
        get account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get disabled_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_due_by() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_max_order_by' }
    );
  },
  get payment_accounts_min_fields() {
    return new ObjectNode(
      {
        get account_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get bank_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get brand() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get disabled_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get funding() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_four() {
          return new FieldNode(schema.String, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get object() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get verification_due_by() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get verification_status() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'payment_accounts_min_fields',
        extension: ((extensions as any) || {}).payment_accounts_min_fields,
      }
    );
  },
  get payment_accounts_min_order_by() {
    return new InputNode(
      {
        get account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get disabled_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_due_by() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_min_order_by' }
    );
  },
  get payment_accounts_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.payment_accounts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'payment_accounts_mutation_response',
        extension: ((extensions as any) || {})
          .payment_accounts_mutation_response,
      }
    );
  },
  get payment_accounts_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.payment_accounts_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.payment_accounts_on_conflict, true);
        },
      },
      { name: 'payment_accounts_obj_rel_insert_input' }
    );
  },
  get payment_accounts_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.payment_accounts_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.payment_accounts_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
      },
      { name: 'payment_accounts_on_conflict' }
    );
  },
  get payment_accounts_order_by() {
    return new InputNode(
      {
        get account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get address() {
          return new InputNodeField(schema.order_by, true);
        },
        get bank_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get brand() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get disabled_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get external_account() {
          return new InputNodeField(schema.external_accounts_order_by, true);
        },
        get external_accounts_aggregate() {
          return new InputNodeField(
            schema.external_accounts_aggregate_order_by,
            true
          );
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get funding() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_transfers_aggregate() {
          return new InputNodeField(
            schema.general_transfers_aggregate_order_by,
            true
          );
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_four() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get object() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_v2s_aggregate() {
          return new InputNodeField(
            schema.transfers_v2_aggregate_order_by,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_due_by() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_fields() {
          return new InputNodeField(schema.order_by, true);
        },
        get verification_status() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_order_by' }
    );
  },
  get payment_accounts_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'payment_accounts_pk_columns_input' }
    );
  },
  get payment_accounts_prepend_input() {
    return new InputNode(
      {
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'payment_accounts_prepend_input' }
    );
  },
  get payment_accounts_select_column() {
    return new EnumNode({ name: 'payment_accounts_select_column' });
  },
  get payment_accounts_set_input() {
    return new InputNode(
      {
        get account_id() {
          return new InputNodeField(schema.String, true);
        },
        get address() {
          return new InputNodeField(schema.jsonb, true);
        },
        get bank_name() {
          return new InputNodeField(schema.String, true);
        },
        get brand() {
          return new InputNodeField(schema.String, true);
        },
        get default_external_account_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get disabled_reason() {
          return new InputNodeField(schema.String, true);
        },
        get enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get funding() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_four() {
          return new InputNodeField(schema.String, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get object() {
          return new InputNodeField(schema.String, true);
        },
        get payout_id() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get verification_due_by() {
          return new InputNodeField(schema.timestamp, true);
        },
        get verification_fields() {
          return new InputNodeField(schema._varchar, true);
        },
        get verification_status() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'payment_accounts_set_input' }
    );
  },
  get payment_accounts_stddev_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_stddev_fields',
        extension: ((extensions as any) || {}).payment_accounts_stddev_fields,
      }
    );
  },
  get payment_accounts_stddev_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_stddev_order_by' }
    );
  },
  get payment_accounts_stddev_pop_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .payment_accounts_stddev_pop_fields,
      }
    );
  },
  get payment_accounts_stddev_pop_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_stddev_pop_order_by' }
    );
  },
  get payment_accounts_stddev_samp_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .payment_accounts_stddev_samp_fields,
      }
    );
  },
  get payment_accounts_stddev_samp_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_stddev_samp_order_by' }
    );
  },
  get payment_accounts_sum_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'payment_accounts_sum_fields',
        extension: ((extensions as any) || {}).payment_accounts_sum_fields,
      }
    );
  },
  get payment_accounts_sum_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_sum_order_by' }
    );
  },
  get payment_accounts_update_column() {
    return new EnumNode({ name: 'payment_accounts_update_column' });
  },
  get payment_accounts_var_pop_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_var_pop_fields',
        extension: ((extensions as any) || {}).payment_accounts_var_pop_fields,
      }
    );
  },
  get payment_accounts_var_pop_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_var_pop_order_by' }
    );
  },
  get payment_accounts_var_samp_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_var_samp_fields',
        extension: ((extensions as any) || {}).payment_accounts_var_samp_fields,
      }
    );
  },
  get payment_accounts_var_samp_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_var_samp_order_by' }
    );
  },
  get payment_accounts_variance_fields() {
    return new ObjectNode(
      {
        get default_external_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payment_accounts_variance_fields',
        extension: ((extensions as any) || {}).payment_accounts_variance_fields,
      }
    );
  },
  get payment_accounts_variance_order_by() {
    return new InputNode(
      {
        get default_external_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payment_accounts_variance_order_by' }
    );
  },
  get payouts() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get arrival_date() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get automatic() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get balance_transaction() {
          return new FieldNode(schema.String, undefined, true);
        },
        get balance_transactions() {
          return new FieldNode(
            new ArrayNode(schema.balance_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.balance_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get balance_transactions_aggregate() {
          return new FieldNode(
            schema.balance_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.balance_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get created() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get destination() {
          return new FieldNode(schema.String, undefined, true);
        },
        get external_account() {
          return new FieldNode(schema.external_accounts, undefined, true);
        },
        get failure_balance_transaction() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get metadata() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get source_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get statement_descriptor() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get transfers_v2s() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      { name: 'payouts', extension: ((extensions as any) || {}).payouts }
    );
  },
  get payouts_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.payouts_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.payouts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'payouts_aggregate',
        extension: ((extensions as any) || {}).payouts_aggregate,
      }
    );
  },
  get payouts_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.payouts_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.payouts_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.payouts_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.payouts_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.payouts_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.payouts_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.payouts_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.payouts_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.payouts_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.payouts_variance_fields, undefined, true);
        },
      },
      {
        name: 'payouts_aggregate_fields',
        extension: ((extensions as any) || {}).payouts_aggregate_fields,
      }
    );
  },
  get payouts_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.payouts_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.payouts_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.payouts_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.payouts_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.payouts_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.payouts_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.payouts_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.payouts_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.payouts_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.payouts_variance_order_by, true);
        },
      },
      { name: 'payouts_aggregate_order_by' }
    );
  },
  get payouts_append_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'payouts_append_input' }
    );
  },
  get payouts_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.payouts_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.payouts_on_conflict, true);
        },
      },
      { name: 'payouts_arr_rel_insert_input' }
    );
  },
  get payouts_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_avg_fields',
        extension: ((extensions as any) || {}).payouts_avg_fields,
      }
    );
  },
  get payouts_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_avg_order_by' }
    );
  },
  get payouts_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.payouts_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.payouts_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.payouts_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get arrival_date() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get automatic() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get balance_transactions() {
          return new InputNodeField(schema.balance_transactions_bool_exp, true);
        },
        get created() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get currency() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get destination() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get external_account() {
          return new InputNodeField(schema.external_accounts_bool_exp, true);
        },
        get failure_balance_transaction() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get failure_code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get failure_message() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get metadata() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get method() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get source_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get statement_descriptor() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get transfers_v2s() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'payouts_bool_exp' }
    );
  },
  get payouts_constraint() {
    return new EnumNode({ name: 'payouts_constraint' });
  },
  get payouts_delete_at_path_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'payouts_delete_at_path_input' }
    );
  },
  get payouts_delete_elem_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'payouts_delete_elem_input' }
    );
  },
  get payouts_delete_key_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'payouts_delete_key_input' }
    );
  },
  get payouts_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'payouts_inc_input' }
    );
  },
  get payouts_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get arrival_date() {
          return new InputNodeField(schema.timestamp, true);
        },
        get automatic() {
          return new InputNodeField(schema.Boolean, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.String, true);
        },
        get balance_transactions() {
          return new InputNodeField(
            schema.balance_transactions_arr_rel_insert_input,
            true
          );
        },
        get created() {
          return new InputNodeField(schema.timestamp, true);
        },
        get currency() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get destination() {
          return new InputNodeField(schema.String, true);
        },
        get external_account() {
          return new InputNodeField(
            schema.external_accounts_obj_rel_insert_input,
            true
          );
        },
        get failure_balance_transaction() {
          return new InputNodeField(schema.String, true);
        },
        get failure_code() {
          return new InputNodeField(schema.String, true);
        },
        get failure_message() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
        get method() {
          return new InputNodeField(schema.String, true);
        },
        get source_type() {
          return new InputNodeField(schema.String, true);
        },
        get statement_descriptor() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get transfers_v2s() {
          return new InputNodeField(
            schema.transfers_v2_arr_rel_insert_input,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'payouts_insert_input' }
    );
  },
  get payouts_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get arrival_date() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get balance_transaction() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get destination() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_balance_transaction() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get source_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get statement_descriptor() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'payouts_max_fields',
        extension: ((extensions as any) || {}).payouts_max_fields,
      }
    );
  },
  get payouts_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get arrival_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.order_by, true);
        },
        get created() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get destination() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_balance_transaction() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_message() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get method() {
          return new InputNodeField(schema.order_by, true);
        },
        get source_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get statement_descriptor() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_max_order_by' }
    );
  },
  get payouts_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get arrival_date() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get balance_transaction() {
          return new FieldNode(schema.String, undefined, true);
        },
        get created() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get currency() {
          return new FieldNode(schema.String, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get destination() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_balance_transaction() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get failure_message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get method() {
          return new FieldNode(schema.String, undefined, true);
        },
        get source_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get statement_descriptor() {
          return new FieldNode(schema.String, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'payouts_min_fields',
        extension: ((extensions as any) || {}).payouts_min_fields,
      }
    );
  },
  get payouts_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get arrival_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.order_by, true);
        },
        get created() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get destination() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_balance_transaction() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_message() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get method() {
          return new InputNodeField(schema.order_by, true);
        },
        get source_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get statement_descriptor() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_min_order_by' }
    );
  },
  get payouts_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.payouts, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'payouts_mutation_response',
        extension: ((extensions as any) || {}).payouts_mutation_response,
      }
    );
  },
  get payouts_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.payouts_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.payouts_on_conflict, true);
        },
      },
      { name: 'payouts_obj_rel_insert_input' }
    );
  },
  get payouts_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.payouts_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.payouts_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.payouts_bool_exp, true);
        },
      },
      { name: 'payouts_on_conflict' }
    );
  },
  get payouts_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get arrival_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get automatic() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transactions_aggregate() {
          return new InputNodeField(
            schema.balance_transactions_aggregate_order_by,
            true
          );
        },
        get created() {
          return new InputNodeField(schema.order_by, true);
        },
        get currency() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get destination() {
          return new InputNodeField(schema.order_by, true);
        },
        get external_account() {
          return new InputNodeField(schema.external_accounts_order_by, true);
        },
        get failure_balance_transaction() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get failure_message() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get metadata() {
          return new InputNodeField(schema.order_by, true);
        },
        get method() {
          return new InputNodeField(schema.order_by, true);
        },
        get source_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get statement_descriptor() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_v2s_aggregate() {
          return new InputNodeField(
            schema.transfers_v2_aggregate_order_by,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_order_by' }
    );
  },
  get payouts_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'payouts_pk_columns_input' }
    );
  },
  get payouts_prepend_input() {
    return new InputNode(
      {
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'payouts_prepend_input' }
    );
  },
  get payouts_select_column() {
    return new EnumNode({ name: 'payouts_select_column' });
  },
  get payouts_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get arrival_date() {
          return new InputNodeField(schema.timestamp, true);
        },
        get automatic() {
          return new InputNodeField(schema.Boolean, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.String, true);
        },
        get created() {
          return new InputNodeField(schema.timestamp, true);
        },
        get currency() {
          return new InputNodeField(schema.String, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get destination() {
          return new InputNodeField(schema.String, true);
        },
        get failure_balance_transaction() {
          return new InputNodeField(schema.String, true);
        },
        get failure_code() {
          return new InputNodeField(schema.String, true);
        },
        get failure_message() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get metadata() {
          return new InputNodeField(schema.jsonb, true);
        },
        get method() {
          return new InputNodeField(schema.String, true);
        },
        get source_type() {
          return new InputNodeField(schema.String, true);
        },
        get statement_descriptor() {
          return new InputNodeField(schema.String, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'payouts_set_input' }
    );
  },
  get payouts_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_stddev_fields',
        extension: ((extensions as any) || {}).payouts_stddev_fields,
      }
    );
  },
  get payouts_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_stddev_order_by' }
    );
  },
  get payouts_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_stddev_pop_fields',
        extension: ((extensions as any) || {}).payouts_stddev_pop_fields,
      }
    );
  },
  get payouts_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_stddev_pop_order_by' }
    );
  },
  get payouts_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_stddev_samp_fields',
        extension: ((extensions as any) || {}).payouts_stddev_samp_fields,
      }
    );
  },
  get payouts_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_stddev_samp_order_by' }
    );
  },
  get payouts_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'payouts_sum_fields',
        extension: ((extensions as any) || {}).payouts_sum_fields,
      }
    );
  },
  get payouts_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_sum_order_by' }
    );
  },
  get payouts_update_column() {
    return new EnumNode({ name: 'payouts_update_column' });
  },
  get payouts_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_var_pop_fields',
        extension: ((extensions as any) || {}).payouts_var_pop_fields,
      }
    );
  },
  get payouts_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_var_pop_order_by' }
    );
  },
  get payouts_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_var_samp_fields',
        extension: ((extensions as any) || {}).payouts_var_samp_fields,
      }
    );
  },
  get payouts_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_var_samp_order_by' }
    );
  },
  get payouts_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'payouts_variance_fields',
        extension: ((extensions as any) || {}).payouts_variance_fields,
      }
    );
  },
  get payouts_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'payouts_variance_order_by' }
    );
  },
  get permissions() {
    return new ObjectNode(
      {
        get description() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, false);
        },
        get user_permissions() {
          return new FieldNode(
            new ArrayNode(schema.user_permissions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_permissions_aggregate() {
          return new FieldNode(
            schema.user_permissions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
      },
      {
        name: 'permissions',
        extension: ((extensions as any) || {}).permissions,
      }
    );
  },
  get permissions_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.permissions_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.permissions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'permissions_aggregate',
        extension: ((extensions as any) || {}).permissions_aggregate,
      }
    );
  },
  get permissions_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.permissions_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.permissions_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.permissions_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.permissions_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.permissions_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.permissions_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.permissions_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.permissions_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.permissions_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.permissions_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'permissions_aggregate_fields',
        extension: ((extensions as any) || {}).permissions_aggregate_fields,
      }
    );
  },
  get permissions_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.permissions_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.permissions_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.permissions_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.permissions_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.permissions_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.permissions_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.permissions_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.permissions_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.permissions_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.permissions_variance_order_by, true);
        },
      },
      { name: 'permissions_aggregate_order_by' }
    );
  },
  get permissions_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.permissions_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.permissions_on_conflict, true);
        },
      },
      { name: 'permissions_arr_rel_insert_input' }
    );
  },
  get permissions_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_avg_fields',
        extension: ((extensions as any) || {}).permissions_avg_fields,
      }
    );
  },
  get permissions_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_avg_order_by' }
    );
  },
  get permissions_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.permissions_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.permissions_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.permissions_bool_exp, true),
            true
          );
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get user_permissions() {
          return new InputNodeField(schema.user_permissions_bool_exp, true);
        },
      },
      { name: 'permissions_bool_exp' }
    );
  },
  get permissions_constraint() {
    return new EnumNode({ name: 'permissions_constraint' });
  },
  get permissions_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'permissions_inc_input' }
    );
  },
  get permissions_insert_input() {
    return new InputNode(
      {
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get user_permissions() {
          return new InputNodeField(
            schema.user_permissions_arr_rel_insert_input,
            true
          );
        },
      },
      { name: 'permissions_insert_input' }
    );
  },
  get permissions_max_fields() {
    return new ObjectNode(
      {
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'permissions_max_fields',
        extension: ((extensions as any) || {}).permissions_max_fields,
      }
    );
  },
  get permissions_max_order_by() {
    return new InputNode(
      {
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_max_order_by' }
    );
  },
  get permissions_min_fields() {
    return new ObjectNode(
      {
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'permissions_min_fields',
        extension: ((extensions as any) || {}).permissions_min_fields,
      }
    );
  },
  get permissions_min_order_by() {
    return new InputNode(
      {
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_min_order_by' }
    );
  },
  get permissions_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.permissions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'permissions_mutation_response',
        extension: ((extensions as any) || {}).permissions_mutation_response,
      }
    );
  },
  get permissions_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.permissions_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.permissions_on_conflict, true);
        },
      },
      { name: 'permissions_obj_rel_insert_input' }
    );
  },
  get permissions_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.permissions_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.permissions_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.permissions_bool_exp, true);
        },
      },
      { name: 'permissions_on_conflict' }
    );
  },
  get permissions_order_by() {
    return new InputNode(
      {
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permissions_aggregate() {
          return new InputNodeField(
            schema.user_permissions_aggregate_order_by,
            true
          );
        },
      },
      { name: 'permissions_order_by' }
    );
  },
  get permissions_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'permissions_pk_columns_input' }
    );
  },
  get permissions_select_column() {
    return new EnumNode({ name: 'permissions_select_column' });
  },
  get permissions_set_input() {
    return new InputNode(
      {
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'permissions_set_input' }
    );
  },
  get permissions_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_stddev_fields',
        extension: ((extensions as any) || {}).permissions_stddev_fields,
      }
    );
  },
  get permissions_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_stddev_order_by' }
    );
  },
  get permissions_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_stddev_pop_fields',
        extension: ((extensions as any) || {}).permissions_stddev_pop_fields,
      }
    );
  },
  get permissions_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_stddev_pop_order_by' }
    );
  },
  get permissions_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_stddev_samp_fields',
        extension: ((extensions as any) || {}).permissions_stddev_samp_fields,
      }
    );
  },
  get permissions_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_stddev_samp_order_by' }
    );
  },
  get permissions_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'permissions_sum_fields',
        extension: ((extensions as any) || {}).permissions_sum_fields,
      }
    );
  },
  get permissions_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_sum_order_by' }
    );
  },
  get permissions_update_column() {
    return new EnumNode({ name: 'permissions_update_column' });
  },
  get permissions_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_var_pop_fields',
        extension: ((extensions as any) || {}).permissions_var_pop_fields,
      }
    );
  },
  get permissions_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_var_pop_order_by' }
    );
  },
  get permissions_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_var_samp_fields',
        extension: ((extensions as any) || {}).permissions_var_samp_fields,
      }
    );
  },
  get permissions_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_var_samp_order_by' }
    );
  },
  get permissions_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'permissions_variance_fields',
        extension: ((extensions as any) || {}).permissions_variance_fields,
      }
    );
  },
  get permissions_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'permissions_variance_order_by' }
    );
  },
  get pg_stat_statements() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get dbid() {
          return new FieldNode(schema.oid, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get query() {
          return new FieldNode(schema.String, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get userid() {
          return new FieldNode(schema.oid, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements',
        extension: ((extensions as any) || {}).pg_stat_statements,
      }
    );
  },
  get pg_stat_statements_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.pg_stat_statements_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.pg_stat_statements, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'pg_stat_statements_aggregate',
        extension: ((extensions as any) || {}).pg_stat_statements_aggregate,
      }
    );
  },
  get pg_stat_statements_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.pg_stat_statements_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.pg_stat_statements_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.pg_stat_statements_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.pg_stat_statements_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.pg_stat_statements_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.pg_stat_statements_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.pg_stat_statements_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.pg_stat_statements_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.pg_stat_statements_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.pg_stat_statements_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'pg_stat_statements_aggregate_fields',
        extension: ((extensions as any) || {})
          .pg_stat_statements_aggregate_fields,
      }
    );
  },
  get pg_stat_statements_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.pg_stat_statements_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.pg_stat_statements_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.pg_stat_statements_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.pg_stat_statements_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.pg_stat_statements_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.pg_stat_statements_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.pg_stat_statements_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.pg_stat_statements_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.pg_stat_statements_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.pg_stat_statements_variance_order_by,
            true
          );
        },
      },
      { name: 'pg_stat_statements_aggregate_order_by' }
    );
  },
  get pg_stat_statements_avg_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_avg_fields',
        extension: ((extensions as any) || {}).pg_stat_statements_avg_fields,
      }
    );
  },
  get pg_stat_statements_avg_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_avg_order_by' }
    );
  },
  get pg_stat_statements_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.pg_stat_statements_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.pg_stat_statements_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.pg_stat_statements_bool_exp, true),
            true
          );
        },
        get blk_read_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get calls() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get dbid() {
          return new InputNodeField(schema.oid_comparison_exp, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get max_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get mean_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get min_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get query() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get queryid() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get rows() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get total_time() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get userid() {
          return new InputNodeField(schema.oid_comparison_exp, true);
        },
      },
      { name: 'pg_stat_statements_bool_exp' }
    );
  },
  get pg_stat_statements_max_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get query() {
          return new FieldNode(schema.String, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_max_fields',
        extension: ((extensions as any) || {}).pg_stat_statements_max_fields,
      }
    );
  },
  get pg_stat_statements_max_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get query() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_max_order_by' }
    );
  },
  get pg_stat_statements_min_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get query() {
          return new FieldNode(schema.String, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_min_fields',
        extension: ((extensions as any) || {}).pg_stat_statements_min_fields,
      }
    );
  },
  get pg_stat_statements_min_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get query() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_min_order_by' }
    );
  },
  get pg_stat_statements_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get dbid() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get query() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get userid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_order_by' }
    );
  },
  get pg_stat_statements_select_column() {
    return new EnumNode({ name: 'pg_stat_statements_select_column' });
  },
  get pg_stat_statements_stddev_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_stddev_fields',
        extension: ((extensions as any) || {}).pg_stat_statements_stddev_fields,
      }
    );
  },
  get pg_stat_statements_stddev_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_stddev_order_by' }
    );
  },
  get pg_stat_statements_stddev_pop_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .pg_stat_statements_stddev_pop_fields,
      }
    );
  },
  get pg_stat_statements_stddev_pop_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_stddev_pop_order_by' }
    );
  },
  get pg_stat_statements_stddev_samp_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .pg_stat_statements_stddev_samp_fields,
      }
    );
  },
  get pg_stat_statements_stddev_samp_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_stddev_samp_order_by' }
    );
  },
  get pg_stat_statements_sum_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.float8, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_sum_fields',
        extension: ((extensions as any) || {}).pg_stat_statements_sum_fields,
      }
    );
  },
  get pg_stat_statements_sum_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_sum_order_by' }
    );
  },
  get pg_stat_statements_var_pop_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_var_pop_fields',
        extension: ((extensions as any) || {})
          .pg_stat_statements_var_pop_fields,
      }
    );
  },
  get pg_stat_statements_var_pop_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_var_pop_order_by' }
    );
  },
  get pg_stat_statements_var_samp_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_var_samp_fields',
        extension: ((extensions as any) || {})
          .pg_stat_statements_var_samp_fields,
      }
    );
  },
  get pg_stat_statements_var_samp_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_var_samp_order_by' }
    );
  },
  get pg_stat_statements_variance_fields() {
    return new ObjectNode(
      {
        get blk_read_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blk_write_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get calls() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get local_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get max_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mean_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get min_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get queryid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rows() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_dirtied() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_hit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get shared_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get stddev_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_read() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get temp_blks_written() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_time() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'pg_stat_statements_variance_fields',
        extension: ((extensions as any) || {})
          .pg_stat_statements_variance_fields,
      }
    );
  },
  get pg_stat_statements_variance_order_by() {
    return new InputNode(
      {
        get blk_read_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get blk_write_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get calls() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get local_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get max_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get mean_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get min_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get queryid() {
          return new InputNodeField(schema.order_by, true);
        },
        get rows() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_dirtied() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_hit() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get shared_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get stddev_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_read() {
          return new InputNodeField(schema.order_by, true);
        },
        get temp_blks_written() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_time() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'pg_stat_statements_variance_order_by' }
    );
  },
  get phone_number_information() {
    return new ObjectNode(
      {
        get alternate_phones() {
          return new FieldNode(schema._varchar, undefined, true);
        },
        get associated_people() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get belongs_to() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get carrier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get country_calling_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get current_addresses() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get error() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get historical_addresses() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get is_commercial() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get is_prepaid() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get is_valid() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get line_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get phone_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get warnings() {
          return new FieldNode(schema._varchar, undefined, true);
        },
        get wp_phone_id() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'phone_number_information',
        extension: ((extensions as any) || {}).phone_number_information,
      }
    );
  },
  get phone_number_information_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.phone_number_information_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.phone_number_information, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'phone_number_information_aggregate',
        extension: ((extensions as any) || {})
          .phone_number_information_aggregate,
      }
    );
  },
  get phone_number_information_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.phone_number_information_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.phone_number_information_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.phone_number_information_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.phone_number_information_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.phone_number_information_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.phone_number_information_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.phone_number_information_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.phone_number_information_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.phone_number_information_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.phone_number_information_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'phone_number_information_aggregate_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_aggregate_fields,
      }
    );
  },
  get phone_number_information_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.phone_number_information_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.phone_number_information_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.phone_number_information_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.phone_number_information_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.phone_number_information_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.phone_number_information_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.phone_number_information_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.phone_number_information_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.phone_number_information_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.phone_number_information_variance_order_by,
            true
          );
        },
      },
      { name: 'phone_number_information_aggregate_order_by' }
    );
  },
  get phone_number_information_append_input() {
    return new InputNode(
      {
        get error() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'phone_number_information_append_input' }
    );
  },
  get phone_number_information_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.phone_number_information_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.phone_number_information_on_conflict,
            true
          );
        },
      },
      { name: 'phone_number_information_arr_rel_insert_input' }
    );
  },
  get phone_number_information_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_avg_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_avg_fields,
      }
    );
  },
  get phone_number_information_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_avg_order_by' }
    );
  },
  get phone_number_information_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.phone_number_information_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.phone_number_information_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.phone_number_information_bool_exp, true),
            true
          );
        },
        get alternate_phones() {
          return new InputNodeField(schema._varchar_comparison_exp, true);
        },
        get associated_people() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get belongs_to() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get carrier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get country_calling_code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get current_addresses() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get error() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get historical_addresses() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get is_commercial() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get is_prepaid() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get is_valid() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get line_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get phone_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get warnings() {
          return new InputNodeField(schema._varchar_comparison_exp, true);
        },
        get wp_phone_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'phone_number_information_bool_exp' }
    );
  },
  get phone_number_information_constraint() {
    return new EnumNode({ name: 'phone_number_information_constraint' });
  },
  get phone_number_information_delete_at_path_input() {
    return new InputNode(
      {
        get error() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'phone_number_information_delete_at_path_input' }
    );
  },
  get phone_number_information_delete_elem_input() {
    return new InputNode(
      {
        get error() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'phone_number_information_delete_elem_input' }
    );
  },
  get phone_number_information_delete_key_input() {
    return new InputNode(
      {
        get error() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'phone_number_information_delete_key_input' }
    );
  },
  get phone_number_information_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'phone_number_information_inc_input' }
    );
  },
  get phone_number_information_insert_input() {
    return new InputNode(
      {
        get alternate_phones() {
          return new InputNodeField(schema._varchar, true);
        },
        get associated_people() {
          return new InputNodeField(schema._jsonb, true);
        },
        get belongs_to() {
          return new InputNodeField(schema._jsonb, true);
        },
        get carrier() {
          return new InputNodeField(schema.String, true);
        },
        get country_calling_code() {
          return new InputNodeField(schema.String, true);
        },
        get current_addresses() {
          return new InputNodeField(schema._jsonb, true);
        },
        get error() {
          return new InputNodeField(schema.jsonb, true);
        },
        get historical_addresses() {
          return new InputNodeField(schema._jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get is_commercial() {
          return new InputNodeField(schema.Boolean, true);
        },
        get is_prepaid() {
          return new InputNodeField(schema.Boolean, true);
        },
        get is_valid() {
          return new InputNodeField(schema.Boolean, true);
        },
        get line_type() {
          return new InputNodeField(schema.String, true);
        },
        get phone_number() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get warnings() {
          return new InputNodeField(schema._varchar, true);
        },
        get wp_phone_id() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'phone_number_information_insert_input' }
    );
  },
  get phone_number_information_max_fields() {
    return new ObjectNode(
      {
        get carrier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get country_calling_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get line_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get phone_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get wp_phone_id() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'phone_number_information_max_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_max_fields,
      }
    );
  },
  get phone_number_information_max_order_by() {
    return new InputNode(
      {
        get carrier() {
          return new InputNodeField(schema.order_by, true);
        },
        get country_calling_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get line_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get wp_phone_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_max_order_by' }
    );
  },
  get phone_number_information_min_fields() {
    return new ObjectNode(
      {
        get carrier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get country_calling_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get line_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get phone_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get wp_phone_id() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'phone_number_information_min_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_min_fields,
      }
    );
  },
  get phone_number_information_min_order_by() {
    return new InputNode(
      {
        get carrier() {
          return new InputNodeField(schema.order_by, true);
        },
        get country_calling_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get line_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get wp_phone_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_min_order_by' }
    );
  },
  get phone_number_information_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.phone_number_information, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'phone_number_information_mutation_response',
        extension: ((extensions as any) || {})
          .phone_number_information_mutation_response,
      }
    );
  },
  get phone_number_information_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.phone_number_information_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.phone_number_information_on_conflict,
            true
          );
        },
      },
      { name: 'phone_number_information_obj_rel_insert_input' }
    );
  },
  get phone_number_information_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.phone_number_information_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.phone_number_information_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.phone_number_information_bool_exp,
            true
          );
        },
      },
      { name: 'phone_number_information_on_conflict' }
    );
  },
  get phone_number_information_order_by() {
    return new InputNode(
      {
        get alternate_phones() {
          return new InputNodeField(schema.order_by, true);
        },
        get associated_people() {
          return new InputNodeField(schema.order_by, true);
        },
        get belongs_to() {
          return new InputNodeField(schema.order_by, true);
        },
        get carrier() {
          return new InputNodeField(schema.order_by, true);
        },
        get country_calling_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get current_addresses() {
          return new InputNodeField(schema.order_by, true);
        },
        get error() {
          return new InputNodeField(schema.order_by, true);
        },
        get historical_addresses() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get is_commercial() {
          return new InputNodeField(schema.order_by, true);
        },
        get is_prepaid() {
          return new InputNodeField(schema.order_by, true);
        },
        get is_valid() {
          return new InputNodeField(schema.order_by, true);
        },
        get line_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get warnings() {
          return new InputNodeField(schema.order_by, true);
        },
        get wp_phone_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_order_by' }
    );
  },
  get phone_number_information_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'phone_number_information_pk_columns_input' }
    );
  },
  get phone_number_information_prepend_input() {
    return new InputNode(
      {
        get error() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'phone_number_information_prepend_input' }
    );
  },
  get phone_number_information_select_column() {
    return new EnumNode({ name: 'phone_number_information_select_column' });
  },
  get phone_number_information_set_input() {
    return new InputNode(
      {
        get alternate_phones() {
          return new InputNodeField(schema._varchar, true);
        },
        get associated_people() {
          return new InputNodeField(schema._jsonb, true);
        },
        get belongs_to() {
          return new InputNodeField(schema._jsonb, true);
        },
        get carrier() {
          return new InputNodeField(schema.String, true);
        },
        get country_calling_code() {
          return new InputNodeField(schema.String, true);
        },
        get current_addresses() {
          return new InputNodeField(schema._jsonb, true);
        },
        get error() {
          return new InputNodeField(schema.jsonb, true);
        },
        get historical_addresses() {
          return new InputNodeField(schema._jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get is_commercial() {
          return new InputNodeField(schema.Boolean, true);
        },
        get is_prepaid() {
          return new InputNodeField(schema.Boolean, true);
        },
        get is_valid() {
          return new InputNodeField(schema.Boolean, true);
        },
        get line_type() {
          return new InputNodeField(schema.String, true);
        },
        get phone_number() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get warnings() {
          return new InputNodeField(schema._varchar, true);
        },
        get wp_phone_id() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'phone_number_information_set_input' }
    );
  },
  get phone_number_information_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_stddev_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_stddev_fields,
      }
    );
  },
  get phone_number_information_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_stddev_order_by' }
    );
  },
  get phone_number_information_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_stddev_pop_fields,
      }
    );
  },
  get phone_number_information_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_stddev_pop_order_by' }
    );
  },
  get phone_number_information_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_stddev_samp_fields,
      }
    );
  },
  get phone_number_information_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_stddev_samp_order_by' }
    );
  },
  get phone_number_information_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'phone_number_information_sum_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_sum_fields,
      }
    );
  },
  get phone_number_information_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_sum_order_by' }
    );
  },
  get phone_number_information_update_column() {
    return new EnumNode({ name: 'phone_number_information_update_column' });
  },
  get phone_number_information_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_var_pop_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_var_pop_fields,
      }
    );
  },
  get phone_number_information_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_var_pop_order_by' }
    );
  },
  get phone_number_information_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_var_samp_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_var_samp_fields,
      }
    );
  },
  get phone_number_information_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_var_samp_order_by' }
    );
  },
  get phone_number_information_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'phone_number_information_variance_fields',
        extension: ((extensions as any) || {})
          .phone_number_information_variance_fields,
      }
    );
  },
  get phone_number_information_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'phone_number_information_variance_order_by' }
    );
  },
  get point() {
    return new ScalarNode({
      name: 'point',
      extension: ((extensions as any) || {}).point,
    });
  },
  get point_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.point, true);
        },
        get _gt() {
          return new InputNodeField(schema.point, true);
        },
        get _gte() {
          return new InputNodeField(schema.point, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.point, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.point, true);
        },
        get _lte() {
          return new InputNodeField(schema.point, true);
        },
        get _neq() {
          return new InputNodeField(schema.point, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.point, true), true);
        },
      },
      { name: 'point_comparison_exp' }
    );
  },
  get promo_code_uses() {
    return new ObjectNode(
      {
        get cancelled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get promo_code() {
          return new FieldNode(schema.promo_codes, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'promo_code_uses',
        extension: ((extensions as any) || {}).promo_code_uses,
      }
    );
  },
  get promo_code_uses_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.promo_code_uses_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.promo_code_uses, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'promo_code_uses_aggregate',
        extension: ((extensions as any) || {}).promo_code_uses_aggregate,
      }
    );
  },
  get promo_code_uses_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.promo_code_uses_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.promo_code_uses_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.promo_code_uses_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.promo_code_uses_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.promo_code_uses_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.promo_code_uses_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.promo_code_uses_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.promo_code_uses_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.promo_code_uses_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.promo_code_uses_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'promo_code_uses_aggregate_fields',
        extension: ((extensions as any) || {}).promo_code_uses_aggregate_fields,
      }
    );
  },
  get promo_code_uses_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.promo_code_uses_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.promo_code_uses_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.promo_code_uses_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.promo_code_uses_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.promo_code_uses_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.promo_code_uses_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.promo_code_uses_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.promo_code_uses_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.promo_code_uses_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.promo_code_uses_variance_order_by,
            true
          );
        },
      },
      { name: 'promo_code_uses_aggregate_order_by' }
    );
  },
  get promo_code_uses_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.promo_code_uses_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.promo_code_uses_on_conflict, true);
        },
      },
      { name: 'promo_code_uses_arr_rel_insert_input' }
    );
  },
  get promo_code_uses_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_avg_fields',
        extension: ((extensions as any) || {}).promo_code_uses_avg_fields,
      }
    );
  },
  get promo_code_uses_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_avg_order_by' }
    );
  },
  get promo_code_uses_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.promo_code_uses_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.promo_code_uses_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.promo_code_uses_bool_exp, true),
            true
          );
        },
        get cancelled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get promo_code() {
          return new InputNodeField(schema.promo_codes_bool_exp, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'promo_code_uses_bool_exp' }
    );
  },
  get promo_code_uses_constraint() {
    return new EnumNode({ name: 'promo_code_uses_constraint' });
  },
  get promo_code_uses_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'promo_code_uses_inc_input' }
    );
  },
  get promo_code_uses_insert_input() {
    return new InputNode(
      {
        get cancelled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get promo_code() {
          return new InputNodeField(
            schema.promo_codes_obj_rel_insert_input,
            true
          );
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'promo_code_uses_insert_input' }
    );
  },
  get promo_code_uses_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_max_fields',
        extension: ((extensions as any) || {}).promo_code_uses_max_fields,
      }
    );
  },
  get promo_code_uses_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_max_order_by' }
    );
  },
  get promo_code_uses_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_min_fields',
        extension: ((extensions as any) || {}).promo_code_uses_min_fields,
      }
    );
  },
  get promo_code_uses_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_min_order_by' }
    );
  },
  get promo_code_uses_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.promo_code_uses, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'promo_code_uses_mutation_response',
        extension: ((extensions as any) || {})
          .promo_code_uses_mutation_response,
      }
    );
  },
  get promo_code_uses_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.promo_code_uses_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.promo_code_uses_on_conflict, true);
        },
      },
      { name: 'promo_code_uses_obj_rel_insert_input' }
    );
  },
  get promo_code_uses_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.promo_code_uses_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.promo_code_uses_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.promo_code_uses_bool_exp, true);
        },
      },
      { name: 'promo_code_uses_on_conflict' }
    );
  },
  get promo_code_uses_order_by() {
    return new InputNode(
      {
        get cancelled() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code() {
          return new InputNodeField(schema.promo_codes_order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_order_by' }
    );
  },
  get promo_code_uses_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'promo_code_uses_pk_columns_input' }
    );
  },
  get promo_code_uses_select_column() {
    return new EnumNode({ name: 'promo_code_uses_select_column' });
  },
  get promo_code_uses_set_input() {
    return new InputNode(
      {
        get cancelled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'promo_code_uses_set_input' }
    );
  },
  get promo_code_uses_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_stddev_fields',
        extension: ((extensions as any) || {}).promo_code_uses_stddev_fields,
      }
    );
  },
  get promo_code_uses_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_stddev_order_by' }
    );
  },
  get promo_code_uses_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .promo_code_uses_stddev_pop_fields,
      }
    );
  },
  get promo_code_uses_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_stddev_pop_order_by' }
    );
  },
  get promo_code_uses_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .promo_code_uses_stddev_samp_fields,
      }
    );
  },
  get promo_code_uses_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_stddev_samp_order_by' }
    );
  },
  get promo_code_uses_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_sum_fields',
        extension: ((extensions as any) || {}).promo_code_uses_sum_fields,
      }
    );
  },
  get promo_code_uses_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_sum_order_by' }
    );
  },
  get promo_code_uses_update_column() {
    return new EnumNode({ name: 'promo_code_uses_update_column' });
  },
  get promo_code_uses_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_var_pop_fields',
        extension: ((extensions as any) || {}).promo_code_uses_var_pop_fields,
      }
    );
  },
  get promo_code_uses_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_var_pop_order_by' }
    );
  },
  get promo_code_uses_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_var_samp_fields',
        extension: ((extensions as any) || {}).promo_code_uses_var_samp_fields,
      }
    );
  },
  get promo_code_uses_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_var_samp_order_by' }
    );
  },
  get promo_code_uses_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_code_uses_variance_fields',
        extension: ((extensions as any) || {}).promo_code_uses_variance_fields,
      }
    );
  },
  get promo_code_uses_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_code_uses_variance_order_by' }
    );
  },
  get promo_codes() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expiration() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get promo_code_uses() {
          return new FieldNode(
            new ArrayNode(schema.promo_code_uses, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_code_uses_aggregate() {
          return new FieldNode(
            schema.promo_code_uses_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservations() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_aggregate() {
          return new FieldNode(
            schema.reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get users() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_aggregate() {
          return new FieldNode(
            schema.users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
      },
      {
        name: 'promo_codes',
        extension: ((extensions as any) || {}).promo_codes,
      }
    );
  },
  get promo_codes_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.promo_codes_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'promo_codes_aggregate',
        extension: ((extensions as any) || {}).promo_codes_aggregate,
      }
    );
  },
  get promo_codes_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.promo_codes_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.promo_codes_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.promo_codes_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.promo_codes_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.promo_codes_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.promo_codes_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.promo_codes_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.promo_codes_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.promo_codes_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.promo_codes_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'promo_codes_aggregate_fields',
        extension: ((extensions as any) || {}).promo_codes_aggregate_fields,
      }
    );
  },
  get promo_codes_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.promo_codes_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.promo_codes_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.promo_codes_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.promo_codes_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.promo_codes_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.promo_codes_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.promo_codes_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.promo_codes_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.promo_codes_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.promo_codes_variance_order_by, true);
        },
      },
      { name: 'promo_codes_aggregate_order_by' }
    );
  },
  get promo_codes_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.promo_codes_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.promo_codes_on_conflict, true);
        },
      },
      { name: 'promo_codes_arr_rel_insert_input' }
    );
  },
  get promo_codes_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_avg_fields',
        extension: ((extensions as any) || {}).promo_codes_avg_fields,
      }
    );
  },
  get promo_codes_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_avg_order_by' }
    );
  },
  get promo_codes_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.promo_codes_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.promo_codes_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.promo_codes_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get expiration() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get promo_code_uses() {
          return new InputNodeField(schema.promo_code_uses_bool_exp, true);
        },
        get reservations() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get users() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'promo_codes_bool_exp' }
    );
  },
  get promo_codes_constraint() {
    return new EnumNode({ name: 'promo_codes_constraint' });
  },
  get promo_codes_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'promo_codes_inc_input' }
    );
  },
  get promo_codes_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get code() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get expiration() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get promo_code_uses() {
          return new InputNodeField(
            schema.promo_code_uses_arr_rel_insert_input,
            true
          );
        },
        get reservations() {
          return new InputNodeField(
            schema.reservations_arr_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get users() {
          return new InputNodeField(schema.users_arr_rel_insert_input, true);
        },
      },
      { name: 'promo_codes_insert_input' }
    );
  },
  get promo_codes_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expiration() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'promo_codes_max_fields',
        extension: ((extensions as any) || {}).promo_codes_max_fields,
      }
    );
  },
  get promo_codes_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_max_order_by' }
    );
  },
  get promo_codes_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expiration() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'promo_codes_min_fields',
        extension: ((extensions as any) || {}).promo_codes_min_fields,
      }
    );
  },
  get promo_codes_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_min_order_by' }
    );
  },
  get promo_codes_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'promo_codes_mutation_response',
        extension: ((extensions as any) || {}).promo_codes_mutation_response,
      }
    );
  },
  get promo_codes_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.promo_codes_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.promo_codes_on_conflict, true);
        },
      },
      { name: 'promo_codes_obj_rel_insert_input' }
    );
  },
  get promo_codes_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.promo_codes_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.promo_codes_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.promo_codes_bool_exp, true);
        },
      },
      { name: 'promo_codes_on_conflict' }
    );
  },
  get promo_codes_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_uses_aggregate() {
          return new InputNodeField(
            schema.promo_code_uses_aggregate_order_by,
            true
          );
        },
        get reservations_aggregate() {
          return new InputNodeField(
            schema.reservations_aggregate_order_by,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get users_aggregate() {
          return new InputNodeField(schema.users_aggregate_order_by, true);
        },
      },
      { name: 'promo_codes_order_by' }
    );
  },
  get promo_codes_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'promo_codes_pk_columns_input' }
    );
  },
  get promo_codes_select_column() {
    return new EnumNode({ name: 'promo_codes_select_column' });
  },
  get promo_codes_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get code() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get expiration() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'promo_codes_set_input' }
    );
  },
  get promo_codes_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_stddev_fields',
        extension: ((extensions as any) || {}).promo_codes_stddev_fields,
      }
    );
  },
  get promo_codes_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_stddev_order_by' }
    );
  },
  get promo_codes_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_stddev_pop_fields',
        extension: ((extensions as any) || {}).promo_codes_stddev_pop_fields,
      }
    );
  },
  get promo_codes_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_stddev_pop_order_by' }
    );
  },
  get promo_codes_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_stddev_samp_fields',
        extension: ((extensions as any) || {}).promo_codes_stddev_samp_fields,
      }
    );
  },
  get promo_codes_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_stddev_samp_order_by' }
    );
  },
  get promo_codes_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'promo_codes_sum_fields',
        extension: ((extensions as any) || {}).promo_codes_sum_fields,
      }
    );
  },
  get promo_codes_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_sum_order_by' }
    );
  },
  get promo_codes_update_column() {
    return new EnumNode({ name: 'promo_codes_update_column' });
  },
  get promo_codes_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_var_pop_fields',
        extension: ((extensions as any) || {}).promo_codes_var_pop_fields,
      }
    );
  },
  get promo_codes_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_var_pop_order_by' }
    );
  },
  get promo_codes_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_var_samp_fields',
        extension: ((extensions as any) || {}).promo_codes_var_samp_fields,
      }
    );
  },
  get promo_codes_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_var_samp_order_by' }
    );
  },
  get promo_codes_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_variance_fields',
        extension: ((extensions as any) || {}).promo_codes_variance_fields,
      }
    );
  },
  get promo_codes_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_variance_order_by' }
    );
  },
  get promo_codes_view() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expiration() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get total() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'promo_codes_view',
        extension: ((extensions as any) || {}).promo_codes_view,
      }
    );
  },
  get promo_codes_view_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.promo_codes_view_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes_view, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'promo_codes_view_aggregate',
        extension: ((extensions as any) || {}).promo_codes_view_aggregate,
      }
    );
  },
  get promo_codes_view_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.promo_codes_view_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.promo_codes_view_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.promo_codes_view_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.promo_codes_view_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.promo_codes_view_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.promo_codes_view_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.promo_codes_view_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.promo_codes_view_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.promo_codes_view_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.promo_codes_view_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'promo_codes_view_aggregate_fields',
        extension: ((extensions as any) || {})
          .promo_codes_view_aggregate_fields,
      }
    );
  },
  get promo_codes_view_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.promo_codes_view_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.promo_codes_view_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.promo_codes_view_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.promo_codes_view_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.promo_codes_view_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.promo_codes_view_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.promo_codes_view_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.promo_codes_view_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.promo_codes_view_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.promo_codes_view_variance_order_by,
            true
          );
        },
      },
      { name: 'promo_codes_view_aggregate_order_by' }
    );
  },
  get promo_codes_view_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_avg_fields',
        extension: ((extensions as any) || {}).promo_codes_view_avg_fields,
      }
    );
  },
  get promo_codes_view_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_avg_order_by' }
    );
  },
  get promo_codes_view_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.promo_codes_view_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.promo_codes_view_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.promo_codes_view_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get expiration() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get total() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'promo_codes_view_bool_exp' }
    );
  },
  get promo_codes_view_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expiration() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get total() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_max_fields',
        extension: ((extensions as any) || {}).promo_codes_view_max_fields,
      }
    );
  },
  get promo_codes_view_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_max_order_by' }
    );
  },
  get promo_codes_view_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expiration() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get total() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_min_fields',
        extension: ((extensions as any) || {}).promo_codes_view_min_fields,
      }
    );
  },
  get promo_codes_view_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_min_order_by' }
    );
  },
  get promo_codes_view_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get expiration() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_order_by' }
    );
  },
  get promo_codes_view_select_column() {
    return new EnumNode({ name: 'promo_codes_view_select_column' });
  },
  get promo_codes_view_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_stddev_fields',
        extension: ((extensions as any) || {}).promo_codes_view_stddev_fields,
      }
    );
  },
  get promo_codes_view_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_stddev_order_by' }
    );
  },
  get promo_codes_view_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .promo_codes_view_stddev_pop_fields,
      }
    );
  },
  get promo_codes_view_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_stddev_pop_order_by' }
    );
  },
  get promo_codes_view_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .promo_codes_view_stddev_samp_fields,
      }
    );
  },
  get promo_codes_view_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_stddev_samp_order_by' }
    );
  },
  get promo_codes_view_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_sum_fields',
        extension: ((extensions as any) || {}).promo_codes_view_sum_fields,
      }
    );
  },
  get promo_codes_view_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_sum_order_by' }
    );
  },
  get promo_codes_view_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_var_pop_fields',
        extension: ((extensions as any) || {}).promo_codes_view_var_pop_fields,
      }
    );
  },
  get promo_codes_view_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_var_pop_order_by' }
    );
  },
  get promo_codes_view_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_var_samp_fields',
        extension: ((extensions as any) || {}).promo_codes_view_var_samp_fields,
      }
    );
  },
  get promo_codes_view_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_var_samp_order_by' }
    );
  },
  get promo_codes_view_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'promo_codes_view_variance_fields',
        extension: ((extensions as any) || {}).promo_codes_view_variance_fields,
      }
    );
  },
  get promo_codes_view_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'promo_codes_view_variance_order_by' }
    );
  },
  get query_root() {
    return new ObjectNode(
      {
        get World() {
          return new FieldNode(
            new ArrayNode(schema.World, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.World_bool_exp, true);
              },
            }),
            false
          );
        },
        get World_aggregate() {
          return new FieldNode(
            schema.World_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.World_bool_exp, true);
              },
            }),
            false
          );
        },
        get World_by_pk() {
          return new FieldNode(
            schema.World,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get _Migration() {
          return new FieldNode(
            new ArrayNode(schema._Migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema._Migration_bool_exp, true);
              },
            }),
            false
          );
        },
        get _Migration_aggregate() {
          return new FieldNode(
            schema._Migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema._Migration_bool_exp, true);
              },
            }),
            false
          );
        },
        get _Migration_by_pk() {
          return new FieldNode(
            schema._Migration,
            new Arguments(
              {
                get revision() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get bad_actors() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.bad_actors_bool_exp, true);
              },
            }),
            false
          );
        },
        get bad_actors_aggregate() {
          return new FieldNode(
            schema.bad_actors_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.bad_actors_bool_exp, true);
              },
            }),
            false
          );
        },
        get bad_actors_associated_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_associated_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_associated_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_associated_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_associated_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_associated_users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get bad_actors_by_pk() {
          return new FieldNode(
            schema.bad_actors,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get bad_actors_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get balance_transactions() {
          return new FieldNode(
            new ArrayNode(schema.balance_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.balance_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get balance_transactions_aggregate() {
          return new FieldNode(
            schema.balance_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.balance_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get balance_transactions_by_pk() {
          return new FieldNode(
            schema.balance_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get business_cases() {
          return new FieldNode(
            new ArrayNode(schema.business_cases, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.business_cases_bool_exp, true);
              },
            }),
            false
          );
        },
        get business_cases_aggregate() {
          return new FieldNode(
            schema.business_cases_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.business_cases_bool_exp, true);
              },
            }),
            false
          );
        },
        get business_cases_by_pk() {
          return new FieldNode(
            schema.business_cases,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get categories() {
          return new FieldNode(
            new ArrayNode(schema.categories, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.categories_bool_exp, true);
              },
            }),
            false
          );
        },
        get categories_aggregate() {
          return new FieldNode(
            schema.categories_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.categories_bool_exp, true);
              },
            }),
            false
          );
        },
        get categories_by_pk() {
          return new FieldNode(
            schema.categories,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get charge_account_records() {
          return new FieldNode(
            new ArrayNode(schema.charge_account_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_account_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_account_records_aggregate() {
          return new FieldNode(
            schema.charge_account_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_account_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_account_records_by_pk() {
          return new FieldNode(
            schema.charge_account_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get charge_accounts() {
          return new FieldNode(
            new ArrayNode(schema.charge_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts_aggregate() {
          return new FieldNode(
            schema.charge_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts_by_pk() {
          return new FieldNode(
            schema.charge_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get charge_line_items() {
          return new FieldNode(
            new ArrayNode(schema.charge_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_line_items_aggregate() {
          return new FieldNode(
            schema.charge_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_line_items_by_pk() {
          return new FieldNode(
            schema.charge_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get charges() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_aggregate() {
          return new FieldNode(
            schema.charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_by_pk() {
          return new FieldNode(
            schema.charges,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get chats() {
          return new FieldNode(
            new ArrayNode(schema.chats, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.chats_bool_exp, true);
              },
            }),
            false
          );
        },
        get chats_aggregate() {
          return new FieldNode(
            schema.chats_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.chats_bool_exp, true);
              },
            }),
            false
          );
        },
        get credit_transactions() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_by_pk() {
          return new FieldNode(
            schema.credit_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get daily_statistics() {
          return new FieldNode(
            new ArrayNode(schema.daily_statistics, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get daily_statistics_aggregate() {
          return new FieldNode(
            schema.daily_statistics_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get daily_statistics_by_pk() {
          return new FieldNode(
            schema.daily_statistics,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get dodge_fleet_orders() {
          return new FieldNode(
            new ArrayNode(schema.dodge_fleet_orders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get dodge_fleet_orders_aggregate() {
          return new FieldNode(
            schema.dodge_fleet_orders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get dodge_fleet_orders_by_pk() {
          return new FieldNode(
            schema.dodge_fleet_orders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get external_accounts() {
          return new FieldNode(
            new ArrayNode(schema.external_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get external_accounts_aggregate() {
          return new FieldNode(
            schema.external_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get external_accounts_by_pk() {
          return new FieldNode(
            schema.external_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get fluid_ledger() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_ledger_aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_ledger_by_pk() {
          return new FieldNode(
            schema.fluid_ledger,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get fluid_transactions() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_by_pk() {
          return new FieldNode(
            schema.fluid_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_charge_line_items() {
          return new FieldNode(
            new ArrayNode(schema.general_charge_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charge_line_items_aggregate() {
          return new FieldNode(
            schema.general_charge_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charge_line_items_by_pk() {
          return new FieldNode(
            schema.general_charge_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_charges() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_aggregate() {
          return new FieldNode(
            schema.general_charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_by_pk() {
          return new FieldNode(
            schema.general_charges,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_images() {
          return new FieldNode(
            new ArrayNode(schema.general_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.general_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get general_images_aggregate() {
          return new FieldNode(
            schema.general_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.general_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get general_images_by_pk() {
          return new FieldNode(
            schema.general_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_transfer_line_items() {
          return new FieldNode(
            new ArrayNode(schema.general_transfer_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfer_line_items_aggregate() {
          return new FieldNode(
            schema.general_transfer_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfer_line_items_by_pk() {
          return new FieldNode(
            schema.general_transfer_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_transfers() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_by_pk() {
          return new FieldNode(
            schema.general_transfers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get geography_columns() {
          return new FieldNode(
            new ArrayNode(schema.geography_columns, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geography_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get geography_columns_aggregate() {
          return new FieldNode(
            schema.geography_columns_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geography_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get geometry_columns() {
          return new FieldNode(
            new ArrayNode(schema.geometry_columns, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geometry_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get geometry_columns_aggregate() {
          return new FieldNode(
            schema.geometry_columns_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geometry_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get goose_db_version() {
          return new FieldNode(
            new ArrayNode(schema.goose_db_version, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.goose_db_version_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get goose_db_version_aggregate() {
          return new FieldNode(
            schema.goose_db_version_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.goose_db_version_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get goose_db_version_by_pk() {
          return new FieldNode(
            schema.goose_db_version,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get identification_images() {
          return new FieldNode(
            new ArrayNode(schema.identification_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identification_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identification_images_aggregate() {
          return new FieldNode(
            schema.identification_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identification_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identification_images_by_pk() {
          return new FieldNode(
            schema.identification_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get identifications() {
          return new FieldNode(
            new ArrayNode(schema.identifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identifications_aggregate() {
          return new FieldNode(
            schema.identifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identifications_by_pk() {
          return new FieldNode(
            schema.identifications,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_images() {
          return new FieldNode(
            new ArrayNode(schema.item_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_images_aggregate() {
          return new FieldNode(
            schema.item_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_images_by_pk() {
          return new FieldNode(
            schema.item_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_inspection_steps_aggregate() {
          return new FieldNode(
            schema.item_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_inspection_steps_by_pk() {
          return new FieldNode(
            schema.item_inspection_steps,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_reviews() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_aggregate() {
          return new FieldNode(
            schema.item_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_by_pk() {
          return new FieldNode(
            schema.item_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_reviews_view() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_reviews_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_reviews_view_aggregate() {
          return new FieldNode(
            schema.item_reviews_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_reviews_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.item_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders_aggregate() {
          return new FieldNode(
            schema.item_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders_by_pk() {
          return new FieldNode(
            schema.item_stakeholders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get items() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_by_pk() {
          return new FieldNode(
            schema.items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get items_community_needs() {
          return new FieldNode(
            new ArrayNode(schema.items_community_needs, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items_community_needs_aggregate() {
          return new FieldNode(
            schema.items_community_needs_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items_community_needs_by_pk() {
          return new FieldNode(
            schema.items_community_needs,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get list_items() {
          return new FieldNode(
            new ArrayNode(schema.list_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get list_items_aggregate() {
          return new FieldNode(
            schema.list_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get list_items_by_pk() {
          return new FieldNode(
            schema.list_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get locations() {
          return new FieldNode(
            new ArrayNode(schema.locations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, true);
              },
            }),
            false
          );
        },
        get locations_aggregate() {
          return new FieldNode(
            schema.locations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, true);
              },
            }),
            false
          );
        },
        get locations_by_pk() {
          return new FieldNode(
            schema.locations,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get markets() {
          return new FieldNode(
            new ArrayNode(schema.markets, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, true);
              },
            }),
            false
          );
        },
        get markets_aggregate() {
          return new FieldNode(
            schema.markets_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, true);
              },
            }),
            false
          );
        },
        get markets_by_pk() {
          return new FieldNode(
            schema.markets,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get messages() {
          return new FieldNode(
            new ArrayNode(schema.messages, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messages_aggregate() {
          return new FieldNode(
            schema.messages_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messages_by_pk() {
          return new FieldNode(
            schema.messages,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get neighborhoods() {
          return new FieldNode(
            new ArrayNode(schema.neighborhoods, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.neighborhoods_bool_exp, true);
              },
            }),
            false
          );
        },
        get neighborhoods_aggregate() {
          return new FieldNode(
            schema.neighborhoods_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.neighborhoods_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications() {
          return new FieldNode(
            new ArrayNode(schema.notifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications_aggregate() {
          return new FieldNode(
            schema.notifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications_by_pk() {
          return new FieldNode(
            schema.notifications,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get payment_accounts() {
          return new FieldNode(
            new ArrayNode(schema.payment_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payment_accounts_aggregate() {
          return new FieldNode(
            schema.payment_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payment_accounts_by_pk() {
          return new FieldNode(
            schema.payment_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get payouts() {
          return new FieldNode(
            new ArrayNode(schema.payouts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, true);
              },
            }),
            false
          );
        },
        get payouts_aggregate() {
          return new FieldNode(
            schema.payouts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, true);
              },
            }),
            false
          );
        },
        get payouts_by_pk() {
          return new FieldNode(
            schema.payouts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get permissions() {
          return new FieldNode(
            new ArrayNode(schema.permissions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.permissions_bool_exp, true);
              },
            }),
            false
          );
        },
        get permissions_aggregate() {
          return new FieldNode(
            schema.permissions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.permissions_bool_exp, true);
              },
            }),
            false
          );
        },
        get permissions_by_pk() {
          return new FieldNode(
            schema.permissions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get pg_stat_statements() {
          return new FieldNode(
            new ArrayNode(schema.pg_stat_statements, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.pg_stat_statements_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get pg_stat_statements_aggregate() {
          return new FieldNode(
            schema.pg_stat_statements_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.pg_stat_statements_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_information() {
          return new FieldNode(
            new ArrayNode(schema.phone_number_information, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.phone_number_information_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_information_aggregate() {
          return new FieldNode(
            schema.phone_number_information_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.phone_number_information_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_information_by_pk() {
          return new FieldNode(
            schema.phone_number_information,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get promo_code_uses() {
          return new FieldNode(
            new ArrayNode(schema.promo_code_uses, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_code_uses_aggregate() {
          return new FieldNode(
            schema.promo_code_uses_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_code_uses_by_pk() {
          return new FieldNode(
            schema.promo_code_uses,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get promo_codes() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.promo_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get promo_codes_aggregate() {
          return new FieldNode(
            schema.promo_codes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.promo_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get promo_codes_by_pk() {
          return new FieldNode(
            schema.promo_codes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get promo_codes_view() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_codes_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_codes_view_aggregate() {
          return new FieldNode(
            schema.promo_codes_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_codes_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get raster_columns() {
          return new FieldNode(
            new ArrayNode(schema.raster_columns, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.raster_columns_bool_exp, true);
              },
            }),
            false
          );
        },
        get raster_columns_aggregate() {
          return new FieldNode(
            schema.raster_columns_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.raster_columns_bool_exp, true);
              },
            }),
            false
          );
        },
        get raster_overviews() {
          return new FieldNode(
            new ArrayNode(schema.raster_overviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.raster_overviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get raster_overviews_aggregate() {
          return new FieldNode(
            schema.raster_overviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.raster_overviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get referral_codes() {
          return new FieldNode(
            new ArrayNode(schema.referral_codes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.referral_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get referral_codes_aggregate() {
          return new FieldNode(
            schema.referral_codes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.referral_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get referral_codes_by_pk() {
          return new FieldNode(
            schema.referral_codes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get refresh_tokens() {
          return new FieldNode(
            new ArrayNode(schema.refresh_tokens, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refresh_tokens_bool_exp, true);
              },
            }),
            false
          );
        },
        get refresh_tokens_aggregate() {
          return new FieldNode(
            schema.refresh_tokens_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refresh_tokens_bool_exp, true);
              },
            }),
            false
          );
        },
        get refresh_tokens_by_pk() {
          return new FieldNode(
            schema.refresh_tokens,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.uuid, false);
                },
              },
              true
            ),
            true
          );
        },
        get refunds() {
          return new FieldNode(
            new ArrayNode(schema.refunds, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get refunds_aggregate() {
          return new FieldNode(
            schema.refunds_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get refunds_by_pk() {
          return new FieldNode(
            schema.refunds,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reimbursements() {
          return new FieldNode(
            new ArrayNode(schema.reimbursements, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements_aggregate() {
          return new FieldNode(
            schema.reimbursements_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements_by_pk() {
          return new FieldNode(
            schema.reimbursements,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_admin_approvals() {
          return new FieldNode(
            new ArrayNode(schema.reservation_admin_approvals, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_admin_approvals_aggregate() {
          return new FieldNode(
            schema.reservation_admin_approvals_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_admin_approvals_by_pk() {
          return new FieldNode(
            schema.reservation_admin_approvals,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps_aggregate() {
          return new FieldNode(
            schema.reservation_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps_by_pk() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_reviews() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_by_pk() {
          return new FieldNode(
            schema.reservation_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.reservation_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders_aggregate() {
          return new FieldNode(
            schema.reservation_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders_by_pk() {
          return new FieldNode(
            schema.reservation_stakeholders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservations() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_aggregate() {
          return new FieldNode(
            schema.reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_by_pk() {
          return new FieldNode(
            schema.reservations,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservations_view() {
          return new FieldNode(
            new ArrayNode(schema.reservations_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservations_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservations_view_aggregate() {
          return new FieldNode(
            schema.reservations_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservations_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get sim_cards() {
          return new FieldNode(
            new ArrayNode(schema.sim_cards, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, true);
              },
            }),
            false
          );
        },
        get sim_cards_aggregate() {
          return new FieldNode(
            schema.sim_cards_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, true);
              },
            }),
            false
          );
        },
        get sim_cards_by_pk() {
          return new FieldNode(
            schema.sim_cards,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get spam_receivers() {
          return new FieldNode(
            new ArrayNode(schema.spam_receivers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_receivers_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_receivers_aggregate() {
          return new FieldNode(
            schema.spam_receivers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_receivers_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_receivers_by_pk() {
          return new FieldNode(
            schema.spam_receivers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get spam_senders() {
          return new FieldNode(
            new ArrayNode(schema.spam_senders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_senders_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_senders_aggregate() {
          return new FieldNode(
            schema.spam_senders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_senders_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_senders_by_pk() {
          return new FieldNode(
            schema.spam_senders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get spatial_ref_sys() {
          return new FieldNode(
            new ArrayNode(schema.spatial_ref_sys, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get spatial_ref_sys_aggregate() {
          return new FieldNode(
            schema.spatial_ref_sys_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get spatial_ref_sys_by_pk() {
          return new FieldNode(
            schema.spatial_ref_sys,
            new Arguments(
              {
                get srid() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get stats_approved_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_approved_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_approved_reservations_aggregate() {
          return new FieldNode(
            schema.stats_approved_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_cancelled_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations_aggregate() {
          return new FieldNode(
            schema.stats_cancelled_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_completed_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations_aggregate() {
          return new FieldNode(
            schema.stats_completed_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_denied_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations_aggregate() {
          return new FieldNode(
            schema.stats_denied_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_items() {
          return new FieldNode(
            new ArrayNode(schema.stats_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_items_aggregate() {
          return new FieldNode(
            schema.stats_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_requested_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_requested_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_requested_reservations_aggregate() {
          return new FieldNode(
            schema.stats_requested_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_returned_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations_aggregate() {
          return new FieldNode(
            schema.stats_returned_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers() {
          return new FieldNode(
            new ArrayNode(schema.stats_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers_aggregate() {
          return new FieldNode(
            schema.stats_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stripe_events() {
          return new FieldNode(
            new ArrayNode(schema.stripe_events, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stripe_events_bool_exp, true);
              },
            }),
            false
          );
        },
        get stripe_events_aggregate() {
          return new FieldNode(
            schema.stripe_events_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stripe_events_bool_exp, true);
              },
            }),
            false
          );
        },
        get stripe_events_by_pk() {
          return new FieldNode(
            schema.stripe_events,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                },
              },
              true
            ),
            true
          );
        },
        get suspension_records() {
          return new FieldNode(
            new ArrayNode(schema.suspension_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get suspension_records_aggregate() {
          return new FieldNode(
            schema.suspension_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get suspension_records_by_pk() {
          return new FieldNode(
            schema.suspension_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get telematic_devices() {
          return new FieldNode(
            new ArrayNode(schema.telematic_devices, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_devices_aggregate() {
          return new FieldNode(
            schema.telematic_devices_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_devices_by_pk() {
          return new FieldNode(
            schema.telematic_devices,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get telematic_records() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_by_pk() {
          return new FieldNode(
            schema.telematic_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get tier_scores() {
          return new FieldNode(
            new ArrayNode(schema.tier_scores, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.tier_scores_bool_exp, true);
              },
            }),
            false
          );
        },
        get tier_scores_aggregate() {
          return new FieldNode(
            schema.tier_scores_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.tier_scores_bool_exp, true);
              },
            }),
            false
          );
        },
        get tier_scores_by_pk() {
          return new FieldNode(
            schema.tier_scores,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get time_blocks() {
          return new FieldNode(
            new ArrayNode(schema.time_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get time_blocks_aggregate() {
          return new FieldNode(
            schema.time_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get time_blocks_by_pk() {
          return new FieldNode(
            schema.time_blocks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get transfer_line_items() {
          return new FieldNode(
            new ArrayNode(schema.transfer_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get transfer_line_items_aggregate() {
          return new FieldNode(
            schema.transfer_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get transfer_line_items_by_pk() {
          return new FieldNode(
            schema.transfer_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get transfers() {
          return new FieldNode(
            new ArrayNode(schema.transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_aggregate() {
          return new FieldNode(
            schema.transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_by_pk() {
          return new FieldNode(
            schema.transfers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get transfers_v2() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2_by_pk() {
          return new FieldNode(
            schema.transfers_v2,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get upvotes() {
          return new FieldNode(
            new ArrayNode(schema.upvotes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get upvotes_aggregate() {
          return new FieldNode(
            schema.upvotes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get upvotes_by_pk() {
          return new FieldNode(
            schema.upvotes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_blocks() {
          return new FieldNode(
            new ArrayNode(schema.user_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_blocks_aggregate() {
          return new FieldNode(
            schema.user_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_blocks_by_pk() {
          return new FieldNode(
            schema.user_blocks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_devices() {
          return new FieldNode(
            new ArrayNode(schema.user_devices, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_devices_aggregate() {
          return new FieldNode(
            schema.user_devices_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_devices_by_pk() {
          return new FieldNode(
            schema.user_devices,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_images() {
          return new FieldNode(
            new ArrayNode(schema.user_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_images_aggregate() {
          return new FieldNode(
            schema.user_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_images_by_pk() {
          return new FieldNode(
            schema.user_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_life_cycle_view() {
          return new FieldNode(
            new ArrayNode(schema.user_life_cycle_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.user_life_cycle_view_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_life_cycle_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_life_cycle_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_life_cycle_view_aggregate() {
          return new FieldNode(
            schema.user_life_cycle_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.user_life_cycle_view_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_life_cycle_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_life_cycle_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_lists() {
          return new FieldNode(
            new ArrayNode(schema.user_lists, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_lists_aggregate() {
          return new FieldNode(
            schema.user_lists_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_lists_by_pk() {
          return new FieldNode(
            schema.user_lists,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_messages_view() {
          return new FieldNode(
            new ArrayNode(schema.user_messages_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_messages_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_messages_view_aggregate() {
          return new FieldNode(
            schema.user_messages_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_messages_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_metadata() {
          return new FieldNode(
            new ArrayNode(schema.user_metadata, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_metadata_aggregate() {
          return new FieldNode(
            schema.user_metadata_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_permissions() {
          return new FieldNode(
            new ArrayNode(schema.user_permissions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_permissions_aggregate() {
          return new FieldNode(
            schema.user_permissions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_reviews() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_reviews_aggregate() {
          return new FieldNode(
            schema.user_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_reviews_by_pk() {
          return new FieldNode(
            schema.user_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get users() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_aggregate() {
          return new FieldNode(
            schema.users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_by_pk() {
          return new FieldNode(
            schema.users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get vehicle_insurance_rates() {
          return new FieldNode(
            new ArrayNode(schema.vehicle_insurance_rates, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.vehicle_insurance_rates_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.vehicle_insurance_rates_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get vehicle_insurance_rates_aggregate() {
          return new FieldNode(
            schema.vehicle_insurance_rates_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.vehicle_insurance_rates_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.vehicle_insurance_rates_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get vehicle_insurance_rates_by_pk() {
          return new FieldNode(
            schema.vehicle_insurance_rates,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
      },
      { name: 'query_root', extension: ((extensions as any) || {}).query_root }
    );
  },
  get raster_columns() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get extent() {
          return new FieldNode(schema.geometry, undefined, true);
        },
        get nodata_values() {
          return new FieldNode(schema._float8, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get out_db() {
          return new FieldNode(schema._bool, undefined, true);
        },
        get pixel_types() {
          return new FieldNode(schema._text, undefined, true);
        },
        get r_raster_column() {
          return new FieldNode(schema.name, undefined, true);
        },
        get r_table_catalog() {
          return new FieldNode(schema.name, undefined, true);
        },
        get r_table_name() {
          return new FieldNode(schema.name, undefined, true);
        },
        get r_table_schema() {
          return new FieldNode(schema.name, undefined, true);
        },
        get regular_blocking() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get same_alignment() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get spatial_index() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_columns',
        extension: ((extensions as any) || {}).raster_columns,
      }
    );
  },
  get raster_columns_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.raster_columns_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.raster_columns, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'raster_columns_aggregate',
        extension: ((extensions as any) || {}).raster_columns_aggregate,
      }
    );
  },
  get raster_columns_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.raster_columns_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.raster_columns_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.raster_columns_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.raster_columns_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.raster_columns_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.raster_columns_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.raster_columns_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.raster_columns_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.raster_columns_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.raster_columns_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'raster_columns_aggregate_fields',
        extension: ((extensions as any) || {}).raster_columns_aggregate_fields,
      }
    );
  },
  get raster_columns_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.raster_columns_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.raster_columns_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.raster_columns_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.raster_columns_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.raster_columns_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.raster_columns_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.raster_columns_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.raster_columns_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.raster_columns_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.raster_columns_variance_order_by,
            true
          );
        },
      },
      { name: 'raster_columns_aggregate_order_by' }
    );
  },
  get raster_columns_avg_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_avg_fields',
        extension: ((extensions as any) || {}).raster_columns_avg_fields,
      }
    );
  },
  get raster_columns_avg_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_avg_order_by' }
    );
  },
  get raster_columns_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.raster_columns_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.raster_columns_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.raster_columns_bool_exp, true),
            true
          );
        },
        get blocksize_x() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get extent() {
          return new InputNodeField(schema.geometry_comparison_exp, true);
        },
        get nodata_values() {
          return new InputNodeField(schema._float8_comparison_exp, true);
        },
        get num_bands() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get out_db() {
          return new InputNodeField(schema._bool_comparison_exp, true);
        },
        get pixel_types() {
          return new InputNodeField(schema._text_comparison_exp, true);
        },
        get r_raster_column() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get r_table_catalog() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get r_table_name() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get r_table_schema() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get regular_blocking() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get same_alignment() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get scale_x() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get scale_y() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get spatial_index() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get srid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'raster_columns_bool_exp' }
    );
  },
  get raster_columns_max_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_columns_max_fields',
        extension: ((extensions as any) || {}).raster_columns_max_fields,
      }
    );
  },
  get raster_columns_max_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_max_order_by' }
    );
  },
  get raster_columns_min_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_columns_min_fields',
        extension: ((extensions as any) || {}).raster_columns_min_fields,
      }
    );
  },
  get raster_columns_min_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_min_order_by' }
    );
  },
  get raster_columns_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get extent() {
          return new InputNodeField(schema.order_by, true);
        },
        get nodata_values() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get out_db() {
          return new InputNodeField(schema.order_by, true);
        },
        get pixel_types() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_raster_column() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_table_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_table_schema() {
          return new InputNodeField(schema.order_by, true);
        },
        get regular_blocking() {
          return new InputNodeField(schema.order_by, true);
        },
        get same_alignment() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get spatial_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_order_by' }
    );
  },
  get raster_columns_select_column() {
    return new EnumNode({ name: 'raster_columns_select_column' });
  },
  get raster_columns_stddev_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_stddev_fields',
        extension: ((extensions as any) || {}).raster_columns_stddev_fields,
      }
    );
  },
  get raster_columns_stddev_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_stddev_order_by' }
    );
  },
  get raster_columns_stddev_pop_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_stddev_pop_fields',
        extension: ((extensions as any) || {}).raster_columns_stddev_pop_fields,
      }
    );
  },
  get raster_columns_stddev_pop_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_stddev_pop_order_by' }
    );
  },
  get raster_columns_stddev_samp_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .raster_columns_stddev_samp_fields,
      }
    );
  },
  get raster_columns_stddev_samp_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_stddev_samp_order_by' }
    );
  },
  get raster_columns_sum_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_columns_sum_fields',
        extension: ((extensions as any) || {}).raster_columns_sum_fields,
      }
    );
  },
  get raster_columns_sum_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_sum_order_by' }
    );
  },
  get raster_columns_var_pop_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_var_pop_fields',
        extension: ((extensions as any) || {}).raster_columns_var_pop_fields,
      }
    );
  },
  get raster_columns_var_pop_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_var_pop_order_by' }
    );
  },
  get raster_columns_var_samp_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_var_samp_fields',
        extension: ((extensions as any) || {}).raster_columns_var_samp_fields,
      }
    );
  },
  get raster_columns_var_samp_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_var_samp_order_by' }
    );
  },
  get raster_columns_variance_fields() {
    return new ObjectNode(
      {
        get blocksize_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocksize_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get num_bands() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_x() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get scale_y() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_columns_variance_fields',
        extension: ((extensions as any) || {}).raster_columns_variance_fields,
      }
    );
  },
  get raster_columns_variance_order_by() {
    return new InputNode(
      {
        get blocksize_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocksize_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get num_bands() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_x() {
          return new InputNodeField(schema.order_by, true);
        },
        get scale_y() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_columns_variance_order_by' }
    );
  },
  get raster_overviews() {
    return new ObjectNode(
      {
        get o_raster_column() {
          return new FieldNode(schema.name, undefined, true);
        },
        get o_table_catalog() {
          return new FieldNode(schema.name, undefined, true);
        },
        get o_table_name() {
          return new FieldNode(schema.name, undefined, true);
        },
        get o_table_schema() {
          return new FieldNode(schema.name, undefined, true);
        },
        get overview_factor() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get r_raster_column() {
          return new FieldNode(schema.name, undefined, true);
        },
        get r_table_catalog() {
          return new FieldNode(schema.name, undefined, true);
        },
        get r_table_name() {
          return new FieldNode(schema.name, undefined, true);
        },
        get r_table_schema() {
          return new FieldNode(schema.name, undefined, true);
        },
      },
      {
        name: 'raster_overviews',
        extension: ((extensions as any) || {}).raster_overviews,
      }
    );
  },
  get raster_overviews_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.raster_overviews_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.raster_overviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'raster_overviews_aggregate',
        extension: ((extensions as any) || {}).raster_overviews_aggregate,
      }
    );
  },
  get raster_overviews_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.raster_overviews_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.raster_overviews_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.raster_overviews_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.raster_overviews_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.raster_overviews_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.raster_overviews_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.raster_overviews_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.raster_overviews_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.raster_overviews_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.raster_overviews_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'raster_overviews_aggregate_fields',
        extension: ((extensions as any) || {})
          .raster_overviews_aggregate_fields,
      }
    );
  },
  get raster_overviews_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.raster_overviews_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.raster_overviews_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.raster_overviews_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.raster_overviews_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.raster_overviews_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.raster_overviews_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.raster_overviews_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.raster_overviews_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.raster_overviews_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.raster_overviews_variance_order_by,
            true
          );
        },
      },
      { name: 'raster_overviews_aggregate_order_by' }
    );
  },
  get raster_overviews_avg_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_avg_fields',
        extension: ((extensions as any) || {}).raster_overviews_avg_fields,
      }
    );
  },
  get raster_overviews_avg_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_avg_order_by' }
    );
  },
  get raster_overviews_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.raster_overviews_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.raster_overviews_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.raster_overviews_bool_exp, true),
            true
          );
        },
        get o_raster_column() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get o_table_catalog() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get o_table_name() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get o_table_schema() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get overview_factor() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get r_raster_column() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get r_table_catalog() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get r_table_name() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
        get r_table_schema() {
          return new InputNodeField(schema.name_comparison_exp, true);
        },
      },
      { name: 'raster_overviews_bool_exp' }
    );
  },
  get raster_overviews_max_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_overviews_max_fields',
        extension: ((extensions as any) || {}).raster_overviews_max_fields,
      }
    );
  },
  get raster_overviews_max_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_max_order_by' }
    );
  },
  get raster_overviews_min_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_overviews_min_fields',
        extension: ((extensions as any) || {}).raster_overviews_min_fields,
      }
    );
  },
  get raster_overviews_min_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_min_order_by' }
    );
  },
  get raster_overviews_order_by() {
    return new InputNode(
      {
        get o_raster_column() {
          return new InputNodeField(schema.order_by, true);
        },
        get o_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get o_table_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get o_table_schema() {
          return new InputNodeField(schema.order_by, true);
        },
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_raster_column() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_table_catalog() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_table_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get r_table_schema() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_order_by' }
    );
  },
  get raster_overviews_select_column() {
    return new EnumNode({ name: 'raster_overviews_select_column' });
  },
  get raster_overviews_stddev_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_stddev_fields',
        extension: ((extensions as any) || {}).raster_overviews_stddev_fields,
      }
    );
  },
  get raster_overviews_stddev_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_stddev_order_by' }
    );
  },
  get raster_overviews_stddev_pop_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .raster_overviews_stddev_pop_fields,
      }
    );
  },
  get raster_overviews_stddev_pop_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_stddev_pop_order_by' }
    );
  },
  get raster_overviews_stddev_samp_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .raster_overviews_stddev_samp_fields,
      }
    );
  },
  get raster_overviews_stddev_samp_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_stddev_samp_order_by' }
    );
  },
  get raster_overviews_sum_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'raster_overviews_sum_fields',
        extension: ((extensions as any) || {}).raster_overviews_sum_fields,
      }
    );
  },
  get raster_overviews_sum_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_sum_order_by' }
    );
  },
  get raster_overviews_var_pop_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_var_pop_fields',
        extension: ((extensions as any) || {}).raster_overviews_var_pop_fields,
      }
    );
  },
  get raster_overviews_var_pop_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_var_pop_order_by' }
    );
  },
  get raster_overviews_var_samp_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_var_samp_fields',
        extension: ((extensions as any) || {}).raster_overviews_var_samp_fields,
      }
    );
  },
  get raster_overviews_var_samp_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_var_samp_order_by' }
    );
  },
  get raster_overviews_variance_fields() {
    return new ObjectNode(
      {
        get overview_factor() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'raster_overviews_variance_fields',
        extension: ((extensions as any) || {}).raster_overviews_variance_fields,
      }
    );
  },
  get raster_overviews_variance_order_by() {
    return new InputNode(
      {
        get overview_factor() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'raster_overviews_variance_order_by' }
    );
  },
  get referral_codes() {
    return new ObjectNode(
      {
        get code() {
          return new FieldNode(schema.String, undefined, false);
        },
        get creditTransactionsByReferredByCodeId() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get creditTransactionsByReferredByCodeId_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get expires_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'referral_codes',
        extension: ((extensions as any) || {}).referral_codes,
      }
    );
  },
  get referral_codes_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.referral_codes_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.referral_codes, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'referral_codes_aggregate',
        extension: ((extensions as any) || {}).referral_codes_aggregate,
      }
    );
  },
  get referral_codes_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.referral_codes_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.referral_codes_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.referral_codes_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.referral_codes_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.referral_codes_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.referral_codes_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.referral_codes_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.referral_codes_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.referral_codes_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.referral_codes_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'referral_codes_aggregate_fields',
        extension: ((extensions as any) || {}).referral_codes_aggregate_fields,
      }
    );
  },
  get referral_codes_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.referral_codes_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.referral_codes_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.referral_codes_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.referral_codes_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.referral_codes_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.referral_codes_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.referral_codes_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.referral_codes_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.referral_codes_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.referral_codes_variance_order_by,
            true
          );
        },
      },
      { name: 'referral_codes_aggregate_order_by' }
    );
  },
  get referral_codes_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.referral_codes_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.referral_codes_on_conflict, true);
        },
      },
      { name: 'referral_codes_arr_rel_insert_input' }
    );
  },
  get referral_codes_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_avg_fields',
        extension: ((extensions as any) || {}).referral_codes_avg_fields,
      }
    );
  },
  get referral_codes_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_avg_order_by' }
    );
  },
  get referral_codes_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.referral_codes_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.referral_codes_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.referral_codes_bool_exp, true),
            true
          );
        },
        get code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get creditTransactionsByReferredByCodeId() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get credit_transactions() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get expires_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'referral_codes_bool_exp' }
    );
  },
  get referral_codes_constraint() {
    return new EnumNode({ name: 'referral_codes_constraint' });
  },
  get referral_codes_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'referral_codes_inc_input' }
    );
  },
  get referral_codes_insert_input() {
    return new InputNode(
      {
        get code() {
          return new InputNodeField(schema.String, true);
        },
        get creditTransactionsByReferredByCodeId() {
          return new InputNodeField(
            schema.credit_transactions_arr_rel_insert_input,
            true
          );
        },
        get credit_transactions() {
          return new InputNodeField(
            schema.credit_transactions_arr_rel_insert_input,
            true
          );
        },
        get expires_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'referral_codes_insert_input' }
    );
  },
  get referral_codes_max_fields() {
    return new ObjectNode(
      {
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expires_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'referral_codes_max_fields',
        extension: ((extensions as any) || {}).referral_codes_max_fields,
      }
    );
  },
  get referral_codes_max_order_by() {
    return new InputNode(
      {
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get expires_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_max_order_by' }
    );
  },
  get referral_codes_min_fields() {
    return new ObjectNode(
      {
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get expires_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'referral_codes_min_fields',
        extension: ((extensions as any) || {}).referral_codes_min_fields,
      }
    );
  },
  get referral_codes_min_order_by() {
    return new InputNode(
      {
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get expires_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_min_order_by' }
    );
  },
  get referral_codes_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.referral_codes, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'referral_codes_mutation_response',
        extension: ((extensions as any) || {}).referral_codes_mutation_response,
      }
    );
  },
  get referral_codes_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.referral_codes_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.referral_codes_on_conflict, true);
        },
      },
      { name: 'referral_codes_obj_rel_insert_input' }
    );
  },
  get referral_codes_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.referral_codes_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.referral_codes_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.referral_codes_bool_exp, true);
        },
      },
      { name: 'referral_codes_on_conflict' }
    );
  },
  get referral_codes_order_by() {
    return new InputNode(
      {
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get creditTransactionsByReferredByCodeId_aggregate() {
          return new InputNodeField(
            schema.credit_transactions_aggregate_order_by,
            true
          );
        },
        get credit_transactions_aggregate() {
          return new InputNodeField(
            schema.credit_transactions_aggregate_order_by,
            true
          );
        },
        get expires_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_order_by' }
    );
  },
  get referral_codes_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'referral_codes_pk_columns_input' }
    );
  },
  get referral_codes_select_column() {
    return new EnumNode({ name: 'referral_codes_select_column' });
  },
  get referral_codes_set_input() {
    return new InputNode(
      {
        get code() {
          return new InputNodeField(schema.String, true);
        },
        get expires_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'referral_codes_set_input' }
    );
  },
  get referral_codes_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_stddev_fields',
        extension: ((extensions as any) || {}).referral_codes_stddev_fields,
      }
    );
  },
  get referral_codes_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_stddev_order_by' }
    );
  },
  get referral_codes_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_stddev_pop_fields',
        extension: ((extensions as any) || {}).referral_codes_stddev_pop_fields,
      }
    );
  },
  get referral_codes_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_stddev_pop_order_by' }
    );
  },
  get referral_codes_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .referral_codes_stddev_samp_fields,
      }
    );
  },
  get referral_codes_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_stddev_samp_order_by' }
    );
  },
  get referral_codes_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'referral_codes_sum_fields',
        extension: ((extensions as any) || {}).referral_codes_sum_fields,
      }
    );
  },
  get referral_codes_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_sum_order_by' }
    );
  },
  get referral_codes_update_column() {
    return new EnumNode({ name: 'referral_codes_update_column' });
  },
  get referral_codes_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_var_pop_fields',
        extension: ((extensions as any) || {}).referral_codes_var_pop_fields,
      }
    );
  },
  get referral_codes_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_var_pop_order_by' }
    );
  },
  get referral_codes_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_var_samp_fields',
        extension: ((extensions as any) || {}).referral_codes_var_samp_fields,
      }
    );
  },
  get referral_codes_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_var_samp_order_by' }
    );
  },
  get referral_codes_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'referral_codes_variance_fields',
        extension: ((extensions as any) || {}).referral_codes_variance_fields,
      }
    );
  },
  get referral_codes_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'referral_codes_variance_order_by' }
    );
  },
  get refresh_tokens() {
    return new ObjectNode(
      {
        get expires_on() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get id() {
          return new FieldNode(schema.uuid, undefined, false);
        },
        get selector() {
          return new FieldNode(schema.String, undefined, false);
        },
        get token_hash() {
          return new FieldNode(schema.String, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, false);
        },
      },
      {
        name: 'refresh_tokens',
        extension: ((extensions as any) || {}).refresh_tokens,
      }
    );
  },
  get refresh_tokens_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.refresh_tokens_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.refresh_tokens, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'refresh_tokens_aggregate',
        extension: ((extensions as any) || {}).refresh_tokens_aggregate,
      }
    );
  },
  get refresh_tokens_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.refresh_tokens_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.refresh_tokens_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.refresh_tokens_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.refresh_tokens_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.refresh_tokens_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.refresh_tokens_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.refresh_tokens_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.refresh_tokens_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.refresh_tokens_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.refresh_tokens_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'refresh_tokens_aggregate_fields',
        extension: ((extensions as any) || {}).refresh_tokens_aggregate_fields,
      }
    );
  },
  get refresh_tokens_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.refresh_tokens_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.refresh_tokens_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.refresh_tokens_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.refresh_tokens_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.refresh_tokens_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.refresh_tokens_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.refresh_tokens_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.refresh_tokens_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.refresh_tokens_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.refresh_tokens_variance_order_by,
            true
          );
        },
      },
      { name: 'refresh_tokens_aggregate_order_by' }
    );
  },
  get refresh_tokens_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.refresh_tokens_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.refresh_tokens_on_conflict, true);
        },
      },
      { name: 'refresh_tokens_arr_rel_insert_input' }
    );
  },
  get refresh_tokens_avg_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_avg_fields',
        extension: ((extensions as any) || {}).refresh_tokens_avg_fields,
      }
    );
  },
  get refresh_tokens_avg_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_avg_order_by' }
    );
  },
  get refresh_tokens_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.refresh_tokens_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.refresh_tokens_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.refresh_tokens_bool_exp, true),
            true
          );
        },
        get expires_on() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.uuid_comparison_exp, true);
        },
        get selector() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get token_hash() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'refresh_tokens_bool_exp' }
    );
  },
  get refresh_tokens_constraint() {
    return new EnumNode({ name: 'refresh_tokens_constraint' });
  },
  get refresh_tokens_inc_input() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'refresh_tokens_inc_input' }
    );
  },
  get refresh_tokens_insert_input() {
    return new InputNode(
      {
        get expires_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.uuid, true);
        },
        get selector() {
          return new InputNodeField(schema.String, true);
        },
        get token_hash() {
          return new InputNodeField(schema.String, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'refresh_tokens_insert_input' }
    );
  },
  get refresh_tokens_max_fields() {
    return new ObjectNode(
      {
        get expires_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.uuid, undefined, true);
        },
        get selector() {
          return new FieldNode(schema.String, undefined, true);
        },
        get token_hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_max_fields',
        extension: ((extensions as any) || {}).refresh_tokens_max_fields,
      }
    );
  },
  get refresh_tokens_max_order_by() {
    return new InputNode(
      {
        get expires_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get selector() {
          return new InputNodeField(schema.order_by, true);
        },
        get token_hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_max_order_by' }
    );
  },
  get refresh_tokens_min_fields() {
    return new ObjectNode(
      {
        get expires_on() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.uuid, undefined, true);
        },
        get selector() {
          return new FieldNode(schema.String, undefined, true);
        },
        get token_hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_min_fields',
        extension: ((extensions as any) || {}).refresh_tokens_min_fields,
      }
    );
  },
  get refresh_tokens_min_order_by() {
    return new InputNode(
      {
        get expires_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get selector() {
          return new InputNodeField(schema.order_by, true);
        },
        get token_hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_min_order_by' }
    );
  },
  get refresh_tokens_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.refresh_tokens, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'refresh_tokens_mutation_response',
        extension: ((extensions as any) || {}).refresh_tokens_mutation_response,
      }
    );
  },
  get refresh_tokens_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.refresh_tokens_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.refresh_tokens_on_conflict, true);
        },
      },
      { name: 'refresh_tokens_obj_rel_insert_input' }
    );
  },
  get refresh_tokens_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.refresh_tokens_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.refresh_tokens_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.refresh_tokens_bool_exp, true);
        },
      },
      { name: 'refresh_tokens_on_conflict' }
    );
  },
  get refresh_tokens_order_by() {
    return new InputNode(
      {
        get expires_on() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get selector() {
          return new InputNodeField(schema.order_by, true);
        },
        get token_hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_order_by' }
    );
  },
  get refresh_tokens_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.uuid, false);
        },
      },
      { name: 'refresh_tokens_pk_columns_input' }
    );
  },
  get refresh_tokens_select_column() {
    return new EnumNode({ name: 'refresh_tokens_select_column' });
  },
  get refresh_tokens_set_input() {
    return new InputNode(
      {
        get expires_on() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.uuid, true);
        },
        get selector() {
          return new InputNodeField(schema.String, true);
        },
        get token_hash() {
          return new InputNodeField(schema.String, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'refresh_tokens_set_input' }
    );
  },
  get refresh_tokens_stddev_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_stddev_fields',
        extension: ((extensions as any) || {}).refresh_tokens_stddev_fields,
      }
    );
  },
  get refresh_tokens_stddev_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_stddev_order_by' }
    );
  },
  get refresh_tokens_stddev_pop_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_stddev_pop_fields',
        extension: ((extensions as any) || {}).refresh_tokens_stddev_pop_fields,
      }
    );
  },
  get refresh_tokens_stddev_pop_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_stddev_pop_order_by' }
    );
  },
  get refresh_tokens_stddev_samp_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .refresh_tokens_stddev_samp_fields,
      }
    );
  },
  get refresh_tokens_stddev_samp_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_stddev_samp_order_by' }
    );
  },
  get refresh_tokens_sum_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_sum_fields',
        extension: ((extensions as any) || {}).refresh_tokens_sum_fields,
      }
    );
  },
  get refresh_tokens_sum_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_sum_order_by' }
    );
  },
  get refresh_tokens_update_column() {
    return new EnumNode({ name: 'refresh_tokens_update_column' });
  },
  get refresh_tokens_var_pop_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_var_pop_fields',
        extension: ((extensions as any) || {}).refresh_tokens_var_pop_fields,
      }
    );
  },
  get refresh_tokens_var_pop_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_var_pop_order_by' }
    );
  },
  get refresh_tokens_var_samp_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_var_samp_fields',
        extension: ((extensions as any) || {}).refresh_tokens_var_samp_fields,
      }
    );
  },
  get refresh_tokens_var_samp_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_var_samp_order_by' }
    );
  },
  get refresh_tokens_variance_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refresh_tokens_variance_fields',
        extension: ((extensions as any) || {}).refresh_tokens_variance_fields,
      }
    );
  },
  get refresh_tokens_variance_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refresh_tokens_variance_order_by' }
    );
  },
  get refunds() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge() {
          return new FieldNode(schema.charges, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get provider_refund_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reimbursement() {
          return new FieldNode(schema.reimbursements, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      { name: 'refunds', extension: ((extensions as any) || {}).refunds }
    );
  },
  get refunds_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.refunds_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.refunds, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'refunds_aggregate',
        extension: ((extensions as any) || {}).refunds_aggregate,
      }
    );
  },
  get refunds_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.refunds_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.refunds_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.refunds_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.refunds_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.refunds_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.refunds_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.refunds_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.refunds_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.refunds_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.refunds_variance_fields, undefined, true);
        },
      },
      {
        name: 'refunds_aggregate_fields',
        extension: ((extensions as any) || {}).refunds_aggregate_fields,
      }
    );
  },
  get refunds_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.refunds_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.refunds_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.refunds_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.refunds_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.refunds_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.refunds_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.refunds_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.refunds_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.refunds_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.refunds_variance_order_by, true);
        },
      },
      { name: 'refunds_aggregate_order_by' }
    );
  },
  get refunds_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.refunds_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.refunds_on_conflict, true);
        },
      },
      { name: 'refunds_arr_rel_insert_input' }
    );
  },
  get refunds_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_avg_fields',
        extension: ((extensions as any) || {}).refunds_avg_fields,
      }
    );
  },
  get refunds_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_avg_order_by' }
    );
  },
  get refunds_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.refunds_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.refunds_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.refunds_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get provider_refund_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reimbursement() {
          return new InputNodeField(schema.reimbursements_bool_exp, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'refunds_bool_exp' }
    );
  },
  get refunds_constraint() {
    return new EnumNode({ name: 'refunds_constraint' });
  },
  get refunds_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'refunds_inc_input' }
    );
  },
  get refunds_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_obj_rel_insert_input, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get provider_refund_id() {
          return new InputNodeField(schema.String, true);
        },
        get reimbursement() {
          return new InputNodeField(
            schema.reimbursements_obj_rel_insert_input,
            true
          );
        },
        get reimbursement_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'refunds_insert_input' }
    );
  },
  get refunds_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get provider_refund_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'refunds_max_fields',
        extension: ((extensions as any) || {}).refunds_max_fields,
      }
    );
  },
  get refunds_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_refund_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_max_order_by' }
    );
  },
  get refunds_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get provider_refund_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'refunds_min_fields',
        extension: ((extensions as any) || {}).refunds_min_fields,
      }
    );
  },
  get refunds_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_refund_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_min_order_by' }
    );
  },
  get refunds_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.refunds, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'refunds_mutation_response',
        extension: ((extensions as any) || {}).refunds_mutation_response,
      }
    );
  },
  get refunds_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.refunds_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.refunds_on_conflict, true);
        },
      },
      { name: 'refunds_obj_rel_insert_input' }
    );
  },
  get refunds_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.refunds_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.refunds_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.refunds_bool_exp, true);
        },
      },
      { name: 'refunds_on_conflict' }
    );
  },
  get refunds_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_refund_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement() {
          return new InputNodeField(schema.reimbursements_order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_order_by' }
    );
  },
  get refunds_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'refunds_pk_columns_input' }
    );
  },
  get refunds_select_column() {
    return new EnumNode({ name: 'refunds_select_column' });
  },
  get refunds_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get provider_refund_id() {
          return new InputNodeField(schema.String, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'refunds_set_input' }
    );
  },
  get refunds_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_stddev_fields',
        extension: ((extensions as any) || {}).refunds_stddev_fields,
      }
    );
  },
  get refunds_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_stddev_order_by' }
    );
  },
  get refunds_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_stddev_pop_fields',
        extension: ((extensions as any) || {}).refunds_stddev_pop_fields,
      }
    );
  },
  get refunds_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_stddev_pop_order_by' }
    );
  },
  get refunds_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_stddev_samp_fields',
        extension: ((extensions as any) || {}).refunds_stddev_samp_fields,
      }
    );
  },
  get refunds_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_stddev_samp_order_by' }
    );
  },
  get refunds_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'refunds_sum_fields',
        extension: ((extensions as any) || {}).refunds_sum_fields,
      }
    );
  },
  get refunds_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_sum_order_by' }
    );
  },
  get refunds_update_column() {
    return new EnumNode({ name: 'refunds_update_column' });
  },
  get refunds_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_var_pop_fields',
        extension: ((extensions as any) || {}).refunds_var_pop_fields,
      }
    );
  },
  get refunds_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_var_pop_order_by' }
    );
  },
  get refunds_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_var_samp_fields',
        extension: ((extensions as any) || {}).refunds_var_samp_fields,
      }
    );
  },
  get refunds_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_var_samp_order_by' }
    );
  },
  get refunds_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reimbursement_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'refunds_variance_fields',
        extension: ((extensions as any) || {}).refunds_variance_fields,
      }
    );
  },
  get refunds_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursement_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'refunds_variance_order_by' }
    );
  },
  get reimbursements() {
    return new ObjectNode(
      {
        get charge() {
          return new FieldNode(schema.charges, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get lender_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get refunds() {
          return new FieldNode(
            new ArrayNode(schema.refunds, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get refunds_aggregate() {
          return new FieldNode(
            schema.refunds_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'reimbursements',
        extension: ((extensions as any) || {}).reimbursements,
      }
    );
  },
  get reimbursements_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reimbursements_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reimbursements, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reimbursements_aggregate',
        extension: ((extensions as any) || {}).reimbursements_aggregate,
      }
    );
  },
  get reimbursements_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.reimbursements_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.reimbursements_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.reimbursements_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.reimbursements_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reimbursements_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reimbursements_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.reimbursements_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.reimbursements_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reimbursements_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reimbursements_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reimbursements_aggregate_fields',
        extension: ((extensions as any) || {}).reimbursements_aggregate_fields,
      }
    );
  },
  get reimbursements_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.reimbursements_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.reimbursements_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.reimbursements_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.reimbursements_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reimbursements_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reimbursements_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.reimbursements_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.reimbursements_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.reimbursements_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reimbursements_variance_order_by,
            true
          );
        },
      },
      { name: 'reimbursements_aggregate_order_by' }
    );
  },
  get reimbursements_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.reimbursements_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.reimbursements_on_conflict, true);
        },
      },
      { name: 'reimbursements_arr_rel_insert_input' }
    );
  },
  get reimbursements_avg_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_avg_fields',
        extension: ((extensions as any) || {}).reimbursements_avg_fields,
      }
    );
  },
  get reimbursements_avg_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_avg_order_by' }
    );
  },
  get reimbursements_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reimbursements_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.reimbursements_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reimbursements_bool_exp, true),
            true
          );
        },
        get charge() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get refunds() {
          return new InputNodeField(schema.refunds_bool_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'reimbursements_bool_exp' }
    );
  },
  get reimbursements_constraint() {
    return new EnumNode({ name: 'reimbursements_constraint' });
  },
  get reimbursements_inc_input() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'reimbursements_inc_input' }
    );
  },
  get reimbursements_insert_input() {
    return new InputNode(
      {
        get charge() {
          return new InputNodeField(schema.charges_obj_rel_insert_input, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get refunds() {
          return new InputNodeField(schema.refunds_arr_rel_insert_input, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reimbursements_insert_input' }
    );
  },
  get reimbursements_max_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reimbursements_max_fields',
        extension: ((extensions as any) || {}).reimbursements_max_fields,
      }
    );
  },
  get reimbursements_max_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_max_order_by' }
    );
  },
  get reimbursements_min_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reimbursements_min_fields',
        extension: ((extensions as any) || {}).reimbursements_min_fields,
      }
    );
  },
  get reimbursements_min_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_min_order_by' }
    );
  },
  get reimbursements_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.reimbursements, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reimbursements_mutation_response',
        extension: ((extensions as any) || {}).reimbursements_mutation_response,
      }
    );
  },
  get reimbursements_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.reimbursements_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.reimbursements_on_conflict, true);
        },
      },
      { name: 'reimbursements_obj_rel_insert_input' }
    );
  },
  get reimbursements_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.reimbursements_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.reimbursements_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.reimbursements_bool_exp, true);
        },
      },
      { name: 'reimbursements_on_conflict' }
    );
  },
  get reimbursements_order_by() {
    return new InputNode(
      {
        get charge() {
          return new InputNodeField(schema.charges_order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get refunds_aggregate() {
          return new InputNodeField(schema.refunds_aggregate_order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_order_by' }
    );
  },
  get reimbursements_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'reimbursements_pk_columns_input' }
    );
  },
  get reimbursements_select_column() {
    return new EnumNode({ name: 'reimbursements_select_column' });
  },
  get reimbursements_set_input() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reimbursements_set_input' }
    );
  },
  get reimbursements_stddev_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_stddev_fields',
        extension: ((extensions as any) || {}).reimbursements_stddev_fields,
      }
    );
  },
  get reimbursements_stddev_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_stddev_order_by' }
    );
  },
  get reimbursements_stddev_pop_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_stddev_pop_fields',
        extension: ((extensions as any) || {}).reimbursements_stddev_pop_fields,
      }
    );
  },
  get reimbursements_stddev_pop_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_stddev_pop_order_by' }
    );
  },
  get reimbursements_stddev_samp_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .reimbursements_stddev_samp_fields,
      }
    );
  },
  get reimbursements_stddev_samp_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_stddev_samp_order_by' }
    );
  },
  get reimbursements_sum_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'reimbursements_sum_fields',
        extension: ((extensions as any) || {}).reimbursements_sum_fields,
      }
    );
  },
  get reimbursements_sum_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_sum_order_by' }
    );
  },
  get reimbursements_update_column() {
    return new EnumNode({ name: 'reimbursements_update_column' });
  },
  get reimbursements_var_pop_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_var_pop_fields',
        extension: ((extensions as any) || {}).reimbursements_var_pop_fields,
      }
    );
  },
  get reimbursements_var_pop_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_var_pop_order_by' }
    );
  },
  get reimbursements_var_samp_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_var_samp_fields',
        extension: ((extensions as any) || {}).reimbursements_var_samp_fields,
      }
    );
  },
  get reimbursements_var_samp_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_var_samp_order_by' }
    );
  },
  get reimbursements_variance_fields() {
    return new ObjectNode(
      {
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fluid_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transaction_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reimbursements_variance_fields',
        extension: ((extensions as any) || {}).reimbursements_variance_fields,
      }
    );
  },
  get reimbursements_variance_order_by() {
    return new InputNode(
      {
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transaction_fee() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reimbursements_variance_order_by' }
    );
  },
  get reservation_admin_approvals() {
    return new ObjectNode(
      {
        get approved() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get notified() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'reservation_admin_approvals',
        extension: ((extensions as any) || {}).reservation_admin_approvals,
      }
    );
  },
  get reservation_admin_approvals_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reservation_admin_approvals_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reservation_admin_approvals, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_admin_approvals_aggregate',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_aggregate,
      }
    );
  },
  get reservation_admin_approvals_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.reservation_admin_approvals_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.reservation_admin_approvals_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.reservation_admin_approvals_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.reservation_admin_approvals_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reservation_admin_approvals_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reservation_admin_approvals_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.reservation_admin_approvals_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.reservation_admin_approvals_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reservation_admin_approvals_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reservation_admin_approvals_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reservation_admin_approvals_aggregate_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_aggregate_fields,
      }
    );
  },
  get reservation_admin_approvals_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.reservation_admin_approvals_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.reservation_admin_approvals_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.reservation_admin_approvals_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.reservation_admin_approvals_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reservation_admin_approvals_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reservation_admin_approvals_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.reservation_admin_approvals_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.reservation_admin_approvals_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.reservation_admin_approvals_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reservation_admin_approvals_variance_order_by,
            true
          );
        },
      },
      { name: 'reservation_admin_approvals_aggregate_order_by' }
    );
  },
  get reservation_admin_approvals_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.reservation_admin_approvals_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_admin_approvals_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_admin_approvals_arr_rel_insert_input' }
    );
  },
  get reservation_admin_approvals_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_avg_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_avg_fields,
      }
    );
  },
  get reservation_admin_approvals_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_avg_order_by' }
    );
  },
  get reservation_admin_approvals_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_admin_approvals_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.reservation_admin_approvals_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_admin_approvals_bool_exp, true),
            true
          );
        },
        get approved() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get notified() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'reservation_admin_approvals_bool_exp' }
    );
  },
  get reservation_admin_approvals_constraint() {
    return new EnumNode({ name: 'reservation_admin_approvals_constraint' });
  },
  get reservation_admin_approvals_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'reservation_admin_approvals_inc_input' }
    );
  },
  get reservation_admin_approvals_insert_input() {
    return new InputNode(
      {
        get approved() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notified() {
          return new InputNodeField(schema.Boolean, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reservation_admin_approvals_insert_input' }
    );
  },
  get reservation_admin_approvals_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_max_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_max_fields,
      }
    );
  },
  get reservation_admin_approvals_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_max_order_by' }
    );
  },
  get reservation_admin_approvals_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_min_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_min_fields,
      }
    );
  },
  get reservation_admin_approvals_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_min_order_by' }
    );
  },
  get reservation_admin_approvals_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.reservation_admin_approvals, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_admin_approvals_mutation_response',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_mutation_response,
      }
    );
  },
  get reservation_admin_approvals_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.reservation_admin_approvals_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_admin_approvals_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_admin_approvals_obj_rel_insert_input' }
    );
  },
  get reservation_admin_approvals_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.reservation_admin_approvals_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.reservation_admin_approvals_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.reservation_admin_approvals_bool_exp,
            true
          );
        },
      },
      { name: 'reservation_admin_approvals_on_conflict' }
    );
  },
  get reservation_admin_approvals_order_by() {
    return new InputNode(
      {
        get approved() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notified() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_order_by' }
    );
  },
  get reservation_admin_approvals_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'reservation_admin_approvals_pk_columns_input' }
    );
  },
  get reservation_admin_approvals_select_column() {
    return new EnumNode({ name: 'reservation_admin_approvals_select_column' });
  },
  get reservation_admin_approvals_set_input() {
    return new InputNode(
      {
        get approved() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notified() {
          return new InputNodeField(schema.Boolean, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reservation_admin_approvals_set_input' }
    );
  },
  get reservation_admin_approvals_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_stddev_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_stddev_fields,
      }
    );
  },
  get reservation_admin_approvals_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_stddev_order_by' }
    );
  },
  get reservation_admin_approvals_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_stddev_pop_fields,
      }
    );
  },
  get reservation_admin_approvals_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_stddev_pop_order_by' }
    );
  },
  get reservation_admin_approvals_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_stddev_samp_fields,
      }
    );
  },
  get reservation_admin_approvals_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_stddev_samp_order_by' }
    );
  },
  get reservation_admin_approvals_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_sum_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_sum_fields,
      }
    );
  },
  get reservation_admin_approvals_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_sum_order_by' }
    );
  },
  get reservation_admin_approvals_update_column() {
    return new EnumNode({ name: 'reservation_admin_approvals_update_column' });
  },
  get reservation_admin_approvals_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_var_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_var_pop_fields,
      }
    );
  },
  get reservation_admin_approvals_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_var_pop_order_by' }
    );
  },
  get reservation_admin_approvals_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_var_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_var_samp_fields,
      }
    );
  },
  get reservation_admin_approvals_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_var_samp_order_by' }
    );
  },
  get reservation_admin_approvals_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_admin_approvals_variance_fields',
        extension: ((extensions as any) || {})
          .reservation_admin_approvals_variance_fields,
      }
    );
  },
  get reservation_admin_approvals_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_admin_approvals_variance_order_by' }
    );
  },
  get reservation_inspection_steps() {
    return new ObjectNode(
      {
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get coordinates() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pictures() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservationInspectionStepByPreviousInspectionStepId() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            undefined,
            true
          );
        },
        get reservationInspectionStepsByPreviousInspectionStepId() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservationInspectionStepsByPreviousInspectionStepId_aggregate() {
          return new FieldNode(
            schema.reservation_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_inspection_step() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            undefined,
            true
          );
        },
        get reservation_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps_aggregate() {
          return new FieldNode(
            schema.reservation_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'reservation_inspection_steps',
        extension: ((extensions as any) || {}).reservation_inspection_steps,
      }
    );
  },
  get reservation_inspection_steps_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reservation_inspection_steps_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_inspection_steps_aggregate',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_aggregate,
      }
    );
  },
  get reservation_inspection_steps_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.reservation_inspection_steps_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.reservation_inspection_steps_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.reservation_inspection_steps_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.reservation_inspection_steps_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reservation_inspection_steps_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reservation_inspection_steps_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.reservation_inspection_steps_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.reservation_inspection_steps_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reservation_inspection_steps_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reservation_inspection_steps_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reservation_inspection_steps_aggregate_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_aggregate_fields,
      }
    );
  },
  get reservation_inspection_steps_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.reservation_inspection_steps_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.reservation_inspection_steps_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.reservation_inspection_steps_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.reservation_inspection_steps_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reservation_inspection_steps_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reservation_inspection_steps_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.reservation_inspection_steps_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.reservation_inspection_steps_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.reservation_inspection_steps_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reservation_inspection_steps_variance_order_by,
            true
          );
        },
      },
      { name: 'reservation_inspection_steps_aggregate_order_by' }
    );
  },
  get reservation_inspection_steps_append_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'reservation_inspection_steps_append_input' }
    );
  },
  get reservation_inspection_steps_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.reservation_inspection_steps_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_inspection_steps_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_inspection_steps_arr_rel_insert_input' }
    );
  },
  get reservation_inspection_steps_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_avg_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_avg_fields,
      }
    );
  },
  get reservation_inspection_steps_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_avg_order_by' }
    );
  },
  get reservation_inspection_steps_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_inspection_steps_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_inspection_steps_bool_exp, true),
            true
          );
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get label() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservationInspectionStepByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
        get reservationInspectionStepsByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation_inspection_step() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
        get reservation_inspection_steps() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'reservation_inspection_steps_bool_exp' }
    );
  },
  get reservation_inspection_steps_constraint() {
    return new EnumNode({ name: 'reservation_inspection_steps_constraint' });
  },
  get reservation_inspection_steps_delete_at_path_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'reservation_inspection_steps_delete_at_path_input' }
    );
  },
  get reservation_inspection_steps_delete_elem_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'reservation_inspection_steps_delete_elem_input' }
    );
  },
  get reservation_inspection_steps_delete_key_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'reservation_inspection_steps_delete_key_input' }
    );
  },
  get reservation_inspection_steps_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'reservation_inspection_steps_inc_input' }
    );
  },
  get reservation_inspection_steps_insert_input() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservationInspectionStepByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.reservation_inspection_steps_obj_rel_insert_input,
            true
          );
        },
        get reservationInspectionStepsByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.reservation_inspection_steps_arr_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_inspection_step() {
          return new InputNodeField(
            schema.reservation_inspection_steps_obj_rel_insert_input,
            true
          );
        },
        get reservation_inspection_steps() {
          return new InputNodeField(
            schema.reservation_inspection_steps_arr_rel_insert_input,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reservation_inspection_steps_insert_input' }
    );
  },
  get reservation_inspection_steps_max_fields() {
    return new ObjectNode(
      {
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_max_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_max_fields,
      }
    );
  },
  get reservation_inspection_steps_max_order_by() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_max_order_by' }
    );
  },
  get reservation_inspection_steps_min_fields() {
    return new ObjectNode(
      {
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_min_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_min_fields,
      }
    );
  },
  get reservation_inspection_steps_min_order_by() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_min_order_by' }
    );
  },
  get reservation_inspection_steps_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_inspection_steps_mutation_response',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_mutation_response,
      }
    );
  },
  get reservation_inspection_steps_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.reservation_inspection_steps_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_inspection_steps_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_inspection_steps_obj_rel_insert_input' }
    );
  },
  get reservation_inspection_steps_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.reservation_inspection_steps_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.reservation_inspection_steps_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
      },
      { name: 'reservation_inspection_steps_on_conflict' }
    );
  },
  get reservation_inspection_steps_order_by() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get coordinates() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get pictures() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservationInspectionStepByPreviousInspectionStepId() {
          return new InputNodeField(
            schema.reservation_inspection_steps_order_by,
            true
          );
        },
        get reservationInspectionStepsByPreviousInspectionStepId_aggregate() {
          return new InputNodeField(
            schema.reservation_inspection_steps_aggregate_order_by,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_inspection_step() {
          return new InputNodeField(
            schema.reservation_inspection_steps_order_by,
            true
          );
        },
        get reservation_inspection_steps_aggregate() {
          return new InputNodeField(
            schema.reservation_inspection_steps_aggregate_order_by,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_order_by' }
    );
  },
  get reservation_inspection_steps_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'reservation_inspection_steps_pk_columns_input' }
    );
  },
  get reservation_inspection_steps_prepend_input() {
    return new InputNode(
      {
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'reservation_inspection_steps_prepend_input' }
    );
  },
  get reservation_inspection_steps_select_column() {
    return new EnumNode({ name: 'reservation_inspection_steps_select_column' });
  },
  get reservation_inspection_steps_set_input() {
    return new InputNode(
      {
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get coordinates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reservation_inspection_steps_set_input' }
    );
  },
  get reservation_inspection_steps_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_stddev_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_stddev_fields,
      }
    );
  },
  get reservation_inspection_steps_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_stddev_order_by' }
    );
  },
  get reservation_inspection_steps_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_stddev_pop_fields,
      }
    );
  },
  get reservation_inspection_steps_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_stddev_pop_order_by' }
    );
  },
  get reservation_inspection_steps_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_stddev_samp_fields,
      }
    );
  },
  get reservation_inspection_steps_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_stddev_samp_order_by' }
    );
  },
  get reservation_inspection_steps_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_sum_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_sum_fields,
      }
    );
  },
  get reservation_inspection_steps_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_sum_order_by' }
    );
  },
  get reservation_inspection_steps_update_column() {
    return new EnumNode({ name: 'reservation_inspection_steps_update_column' });
  },
  get reservation_inspection_steps_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_var_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_var_pop_fields,
      }
    );
  },
  get reservation_inspection_steps_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_var_pop_order_by' }
    );
  },
  get reservation_inspection_steps_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_var_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_var_samp_fields,
      }
    );
  },
  get reservation_inspection_steps_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_var_samp_order_by' }
    );
  },
  get reservation_inspection_steps_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get next_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get previous_inspection_step_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_inspection_steps_variance_fields',
        extension: ((extensions as any) || {})
          .reservation_inspection_steps_variance_fields,
      }
    );
  },
  get reservation_inspection_steps_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get next_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get previous_inspection_step_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_inspection_steps_variance_order_by' }
    );
  },
  get reservation_reviews() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get complete() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get private_comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get public_comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByLenderId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByReviewerId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userBySubjectId() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'reservation_reviews',
        extension: ((extensions as any) || {}).reservation_reviews,
      }
    );
  },
  get reservation_reviews_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_reviews_aggregate',
        extension: ((extensions as any) || {}).reservation_reviews_aggregate,
      }
    );
  },
  get reservation_reviews_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.reservation_reviews_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.reservation_reviews_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.reservation_reviews_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.reservation_reviews_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reservation_reviews_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reservation_reviews_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.reservation_reviews_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.reservation_reviews_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reservation_reviews_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reservation_reviews_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reservation_reviews_aggregate_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_aggregate_fields,
      }
    );
  },
  get reservation_reviews_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.reservation_reviews_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.reservation_reviews_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.reservation_reviews_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.reservation_reviews_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reservation_reviews_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reservation_reviews_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.reservation_reviews_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.reservation_reviews_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.reservation_reviews_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reservation_reviews_variance_order_by,
            true
          );
        },
      },
      { name: 'reservation_reviews_aggregate_order_by' }
    );
  },
  get reservation_reviews_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_reviews_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_reviews_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_reviews_arr_rel_insert_input' }
    );
  },
  get reservation_reviews_avg_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_avg_fields',
        extension: ((extensions as any) || {}).reservation_reviews_avg_fields,
      }
    );
  },
  get reservation_reviews_avg_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_avg_order_by' }
    );
  },
  get reservation_reviews_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_reviews_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_reviews_bool_exp, true),
            true
          );
        },
        get borrower_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get complete() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get lender_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get private_comment() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get public_comment() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByLenderId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByReviewerId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userBySubjectId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'reservation_reviews_bool_exp' }
    );
  },
  get reservation_reviews_constraint() {
    return new EnumNode({ name: 'reservation_reviews_constraint' });
  },
  get reservation_reviews_inc_input() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get lender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'reservation_reviews_inc_input' }
    );
  },
  get reservation_reviews_insert_input() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.Int, true);
        },
        get complete() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get lender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get private_comment() {
          return new InputNodeField(schema.String, true);
        },
        get public_comment() {
          return new InputNodeField(schema.String, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByLenderId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByReviewerId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userBySubjectId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'reservation_reviews_insert_input' }
    );
  },
  get reservation_reviews_max_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get private_comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get public_comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_max_fields',
        extension: ((extensions as any) || {}).reservation_reviews_max_fields,
      }
    );
  },
  get reservation_reviews_max_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get private_comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get public_comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_max_order_by' }
    );
  },
  get reservation_reviews_min_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get private_comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get public_comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_min_fields',
        extension: ((extensions as any) || {}).reservation_reviews_min_fields,
      }
    );
  },
  get reservation_reviews_min_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get private_comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get public_comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_min_order_by' }
    );
  },
  get reservation_reviews_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_reviews_mutation_response',
        extension: ((extensions as any) || {})
          .reservation_reviews_mutation_response,
      }
    );
  },
  get reservation_reviews_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.reservation_reviews_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_reviews_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_reviews_obj_rel_insert_input' }
    );
  },
  get reservation_reviews_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.reservation_reviews_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_reviews_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
      },
      { name: 'reservation_reviews_on_conflict' }
    );
  },
  get reservation_reviews_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get complete() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get private_comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get public_comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByLenderId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByReviewerId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userBySubjectId() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'reservation_reviews_order_by' }
    );
  },
  get reservation_reviews_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'reservation_reviews_pk_columns_input' }
    );
  },
  get reservation_reviews_select_column() {
    return new EnumNode({ name: 'reservation_reviews_select_column' });
  },
  get reservation_reviews_set_input() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.Int, true);
        },
        get complete() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get lender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get private_comment() {
          return new InputNodeField(schema.String, true);
        },
        get public_comment() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reservation_reviews_set_input' }
    );
  },
  get reservation_reviews_stddev_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_stddev_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_stddev_fields,
      }
    );
  },
  get reservation_reviews_stddev_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_stddev_order_by' }
    );
  },
  get reservation_reviews_stddev_pop_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_stddev_pop_fields,
      }
    );
  },
  get reservation_reviews_stddev_pop_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_stddev_pop_order_by' }
    );
  },
  get reservation_reviews_stddev_samp_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_stddev_samp_fields,
      }
    );
  },
  get reservation_reviews_stddev_samp_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_stddev_samp_order_by' }
    );
  },
  get reservation_reviews_sum_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_sum_fields',
        extension: ((extensions as any) || {}).reservation_reviews_sum_fields,
      }
    );
  },
  get reservation_reviews_sum_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_sum_order_by' }
    );
  },
  get reservation_reviews_update_column() {
    return new EnumNode({ name: 'reservation_reviews_update_column' });
  },
  get reservation_reviews_var_pop_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_var_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_var_pop_fields,
      }
    );
  },
  get reservation_reviews_var_pop_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_var_pop_order_by' }
    );
  },
  get reservation_reviews_var_samp_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_var_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_var_samp_fields,
      }
    );
  },
  get reservation_reviews_var_samp_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_var_samp_order_by' }
    );
  },
  get reservation_reviews_variance_fields() {
    return new ObjectNode(
      {
        get borrower_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_reviews_variance_fields',
        extension: ((extensions as any) || {})
          .reservation_reviews_variance_fields,
      }
    );
  },
  get reservation_reviews_variance_order_by() {
    return new InputNode(
      {
        get borrower_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_reviews_variance_order_by' }
    );
  },
  get reservation_stakeholders() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders',
        extension: ((extensions as any) || {}).reservation_stakeholders,
      }
    );
  },
  get reservation_stakeholders_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reservation_stakeholders_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reservation_stakeholders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_stakeholders_aggregate',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_aggregate,
      }
    );
  },
  get reservation_stakeholders_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.reservation_stakeholders_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.reservation_stakeholders_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.reservation_stakeholders_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.reservation_stakeholders_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reservation_stakeholders_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reservation_stakeholders_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.reservation_stakeholders_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.reservation_stakeholders_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reservation_stakeholders_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reservation_stakeholders_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reservation_stakeholders_aggregate_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_aggregate_fields,
      }
    );
  },
  get reservation_stakeholders_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.reservation_stakeholders_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.reservation_stakeholders_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.reservation_stakeholders_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.reservation_stakeholders_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reservation_stakeholders_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reservation_stakeholders_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.reservation_stakeholders_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.reservation_stakeholders_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.reservation_stakeholders_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reservation_stakeholders_variance_order_by,
            true
          );
        },
      },
      { name: 'reservation_stakeholders_aggregate_order_by' }
    );
  },
  get reservation_stakeholders_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_stakeholders_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_stakeholders_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_stakeholders_arr_rel_insert_input' }
    );
  },
  get reservation_stakeholders_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_avg_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_avg_fields,
      }
    );
  },
  get reservation_stakeholders_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_avg_order_by' }
    );
  },
  get reservation_stakeholders_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_stakeholders_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.reservation_stakeholders_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_stakeholders_bool_exp, true),
            true
          );
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'reservation_stakeholders_bool_exp' }
    );
  },
  get reservation_stakeholders_constraint() {
    return new EnumNode({ name: 'reservation_stakeholders_constraint' });
  },
  get reservation_stakeholders_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'reservation_stakeholders_inc_input' }
    );
  },
  get reservation_stakeholders_insert_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'reservation_stakeholders_insert_input' }
    );
  },
  get reservation_stakeholders_max_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_max_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_max_fields,
      }
    );
  },
  get reservation_stakeholders_max_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_max_order_by' }
    );
  },
  get reservation_stakeholders_min_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_min_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_min_fields,
      }
    );
  },
  get reservation_stakeholders_min_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_min_order_by' }
    );
  },
  get reservation_stakeholders_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.reservation_stakeholders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservation_stakeholders_mutation_response',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_mutation_response,
      }
    );
  },
  get reservation_stakeholders_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.reservation_stakeholders_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.reservation_stakeholders_on_conflict,
            true
          );
        },
      },
      { name: 'reservation_stakeholders_obj_rel_insert_input' }
    );
  },
  get reservation_stakeholders_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.reservation_stakeholders_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.reservation_stakeholders_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.reservation_stakeholders_bool_exp,
            true
          );
        },
      },
      { name: 'reservation_stakeholders_on_conflict' }
    );
  },
  get reservation_stakeholders_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_order_by' }
    );
  },
  get reservation_stakeholders_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'reservation_stakeholders_pk_columns_input' }
    );
  },
  get reservation_stakeholders_select_column() {
    return new EnumNode({ name: 'reservation_stakeholders_select_column' });
  },
  get reservation_stakeholders_set_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'reservation_stakeholders_set_input' }
    );
  },
  get reservation_stakeholders_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_stddev_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_stddev_fields,
      }
    );
  },
  get reservation_stakeholders_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_stddev_order_by' }
    );
  },
  get reservation_stakeholders_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_stddev_pop_fields,
      }
    );
  },
  get reservation_stakeholders_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_stddev_pop_order_by' }
    );
  },
  get reservation_stakeholders_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_stddev_samp_fields,
      }
    );
  },
  get reservation_stakeholders_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_stddev_samp_order_by' }
    );
  },
  get reservation_stakeholders_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_sum_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_sum_fields,
      }
    );
  },
  get reservation_stakeholders_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_sum_order_by' }
    );
  },
  get reservation_stakeholders_update_column() {
    return new EnumNode({ name: 'reservation_stakeholders_update_column' });
  },
  get reservation_stakeholders_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_var_pop_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_var_pop_fields,
      }
    );
  },
  get reservation_stakeholders_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_var_pop_order_by' }
    );
  },
  get reservation_stakeholders_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_var_samp_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_var_samp_fields,
      }
    );
  },
  get reservation_stakeholders_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_var_samp_order_by' }
    );
  },
  get reservation_stakeholders_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservation_stakeholders_variance_fields',
        extension: ((extensions as any) || {})
          .reservation_stakeholders_variance_fields,
      }
    );
  },
  get reservation_stakeholders_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservation_stakeholders_variance_order_by' }
    );
  },
  get reservations() {
    return new ObjectNode(
      {
        get additional_charges() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancellation_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cancelled_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_overage() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get charges() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_aggregate() {
          return new FieldNode(
            schema.charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get closed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get creditTransactionsByReservationId() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get creditTransactionsByReservationId_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get credit_transactions() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get denial_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get denied_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get drop_off() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fluid_ledgers() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_ledgers_aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_transactions() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get instastart() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get is_vehicle() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_reviews() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_aggregate() {
          return new FieldNode(
            schema.item_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get late_charge_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_text() {
          return new FieldNode(schema.String, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get notifications() {
          return new FieldNode(
            new ArrayNode(schema.notifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications_aggregate() {
          return new FieldNode(
            schema.notifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get pick_up() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_code() {
          return new FieldNode(schema.promo_codes, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rates() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get reimbursements() {
          return new FieldNode(
            new ArrayNode(schema.reimbursements, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements_aggregate() {
          return new FieldNode(
            schema.reimbursements_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_admin_approvals() {
          return new FieldNode(
            new ArrayNode(schema.reservation_admin_approvals, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_admin_approvals_aggregate() {
          return new FieldNode(
            schema.reservation_admin_approvals_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps_aggregate() {
          return new FieldNode(
            schema.reservation_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.reservation_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders_aggregate() {
          return new FieldNode(
            schema.reservation_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get returned_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reviews_completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get stats_approved_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_approved_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_approved_reservations_aggregate() {
          return new FieldNode(
            schema.stats_approved_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_cancelled_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations_aggregate() {
          return new FieldNode(
            schema.stats_cancelled_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_completed_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations_aggregate() {
          return new FieldNode(
            schema.stats_completed_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_denied_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations_aggregate() {
          return new FieldNode(
            schema.stats_denied_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_requested_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_requested_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_requested_reservations_aggregate() {
          return new FieldNode(
            schema.stats_requested_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_returned_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations_aggregate() {
          return new FieldNode(
            schema.stats_returned_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get suspension_records() {
          return new FieldNode(
            new ArrayNode(schema.suspension_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get suspension_records_aggregate() {
          return new FieldNode(
            schema.suspension_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfers() {
          return new FieldNode(
            new ArrayNode(schema.transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_aggregate() {
          return new FieldNode(
            schema.transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByRenterId() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_reviews() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_reviews_aggregate() {
          return new FieldNode(
            schema.user_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
      },
      {
        name: 'reservations',
        extension: ((extensions as any) || {}).reservations,
      }
    );
  },
  get reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservations_aggregate',
        extension: ((extensions as any) || {}).reservations_aggregate,
      }
    );
  },
  get reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.reservations_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.reservations_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.reservations_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.reservations_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reservations_aggregate_fields',
        extension: ((extensions as any) || {}).reservations_aggregate_fields,
      }
    );
  },
  get reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.reservations_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.reservations_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.reservations_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.reservations_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.reservations_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.reservations_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'reservations_aggregate_order_by' }
    );
  },
  get reservations_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'reservations_append_input' }
    );
  },
  get reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.reservations_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.reservations_on_conflict, true);
        },
      },
      { name: 'reservations_arr_rel_insert_input' }
    );
  },
  get reservations_avg_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_avg_fields',
        extension: ((extensions as any) || {}).reservations_avg_fields,
      }
    );
  },
  get reservations_avg_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_avg_order_by' }
    );
  },
  get reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reservations_bool_exp, true),
            true
          );
        },
        get additional_charges() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get approved_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get cancellation_reason() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get cancelled_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get charge_overage() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get charges() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get closed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get creditTransactionsByReservationId() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get credit_transactions() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get denial_reason() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get denied_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get discount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get drop_off() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get extension_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get final_cost() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get fluid_ledgers() {
          return new InputNodeField(schema.fluid_ledger_bool_exp, true);
        },
        get fluid_transactions() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get instastart() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get item_reviews() {
          return new InputNodeField(schema.item_reviews_bool_exp, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get message_text() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get notifications() {
          return new InputNodeField(schema.notifications_bool_exp, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get pick_up() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get promo_code() {
          return new InputNodeField(schema.promo_codes_bool_exp, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get reimbursements() {
          return new InputNodeField(schema.reimbursements_bool_exp, true);
        },
        get renter_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reservation_admin_approvals() {
          return new InputNodeField(
            schema.reservation_admin_approvals_bool_exp,
            true
          );
        },
        get reservation_inspection_steps() {
          return new InputNodeField(
            schema.reservation_inspection_steps_bool_exp,
            true
          );
        },
        get reservation_reviews() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get reservation_stakeholders() {
          return new InputNodeField(
            schema.reservation_stakeholders_bool_exp,
            true
          );
        },
        get returned_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get reviews_completed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get stats_approved_reservations() {
          return new InputNodeField(
            schema.stats_approved_reservations_bool_exp,
            true
          );
        },
        get stats_cancelled_reservations() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_bool_exp,
            true
          );
        },
        get stats_completed_reservations() {
          return new InputNodeField(
            schema.stats_completed_reservations_bool_exp,
            true
          );
        },
        get stats_denied_reservations() {
          return new InputNodeField(
            schema.stats_denied_reservations_bool_exp,
            true
          );
        },
        get stats_requested_reservations() {
          return new InputNodeField(
            schema.stats_requested_reservations_bool_exp,
            true
          );
        },
        get stats_returned_reservations() {
          return new InputNodeField(
            schema.stats_returned_reservations_bool_exp,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get subtotal() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get suspension_records() {
          return new InputNodeField(schema.suspension_records_bool_exp, true);
        },
        get telematic_records() {
          return new InputNodeField(schema.telematic_records_bool_exp, true);
        },
        get total_charge() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get total_payout() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get transfers() {
          return new InputNodeField(schema.transfers_bool_exp, true);
        },
        get transfers_v2s() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByRenterId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_reviews() {
          return new InputNodeField(schema.user_reviews_bool_exp, true);
        },
      },
      { name: 'reservations_bool_exp' }
    );
  },
  get reservations_constraint() {
    return new EnumNode({ name: 'reservations_constraint' });
  },
  get reservations_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
        get rates() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'reservations_delete_at_path_input' }
    );
  },
  get reservations_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
        get rates() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'reservations_delete_elem_input' }
    );
  },
  get reservations_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
        get rates() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'reservations_delete_key_input' }
    );
  },
  get reservations_inc_input() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.Int, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get discount() {
          return new InputNodeField(schema.Int, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.Int, true);
        },
        get extension_count() {
          return new InputNodeField(schema.Int, true);
        },
        get final_cost() {
          return new InputNodeField(schema.Int, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.float8, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.float8, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.float8, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.float8, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get renter_id() {
          return new InputNodeField(schema.Int, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'reservations_inc_input' }
    );
  },
  get reservations_insert_input() {
    return new InputNode(
      {
        get additional_charges() {
          return new InputNodeField(schema._jsonb, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get cancellation_reason() {
          return new InputNodeField(schema.String, true);
        },
        get cancelled_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_overage() {
          return new InputNodeField(schema.Boolean, true);
        },
        get charges() {
          return new InputNodeField(schema.charges_arr_rel_insert_input, true);
        },
        get closed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get creditTransactionsByReservationId() {
          return new InputNodeField(
            schema.credit_transactions_arr_rel_insert_input,
            true
          );
        },
        get credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get credit_transactions() {
          return new InputNodeField(
            schema.credit_transactions_arr_rel_insert_input,
            true
          );
        },
        get denial_reason() {
          return new InputNodeField(schema.String, true);
        },
        get denied_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get discount() {
          return new InputNodeField(schema.Int, true);
        },
        get drop_off() {
          return new InputNodeField(schema.timestamp, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.Int, true);
        },
        get extension_count() {
          return new InputNodeField(schema.Int, true);
        },
        get final_cost() {
          return new InputNodeField(schema.Int, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fluid_ledgers() {
          return new InputNodeField(
            schema.fluid_ledger_arr_rel_insert_input,
            true
          );
        },
        get fluid_transactions() {
          return new InputNodeField(
            schema.fluid_transactions_arr_rel_insert_input,
            true
          );
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.float8, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.float8, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get instastart() {
          return new InputNodeField(schema.Boolean, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.Boolean, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_reviews() {
          return new InputNodeField(
            schema.item_reviews_arr_rel_insert_input,
            true
          );
        },
        get late_charge_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get message_text() {
          return new InputNodeField(schema.String, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.float8, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.float8, true);
        },
        get notifications() {
          return new InputNodeField(
            schema.notifications_arr_rel_insert_input,
            true
          );
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get pick_up() {
          return new InputNodeField(schema.timestamp, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_code() {
          return new InputNodeField(
            schema.promo_codes_obj_rel_insert_input,
            true
          );
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get reimbursements() {
          return new InputNodeField(
            schema.reimbursements_arr_rel_insert_input,
            true
          );
        },
        get renter_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_admin_approvals() {
          return new InputNodeField(
            schema.reservation_admin_approvals_arr_rel_insert_input,
            true
          );
        },
        get reservation_inspection_steps() {
          return new InputNodeField(
            schema.reservation_inspection_steps_arr_rel_insert_input,
            true
          );
        },
        get reservation_reviews() {
          return new InputNodeField(
            schema.reservation_reviews_arr_rel_insert_input,
            true
          );
        },
        get reservation_stakeholders() {
          return new InputNodeField(
            schema.reservation_stakeholders_arr_rel_insert_input,
            true
          );
        },
        get returned_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get reviews_completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get stats_approved_reservations() {
          return new InputNodeField(
            schema.stats_approved_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_cancelled_reservations() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_completed_reservations() {
          return new InputNodeField(
            schema.stats_completed_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_denied_reservations() {
          return new InputNodeField(
            schema.stats_denied_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_requested_reservations() {
          return new InputNodeField(
            schema.stats_requested_reservations_arr_rel_insert_input,
            true
          );
        },
        get stats_returned_reservations() {
          return new InputNodeField(
            schema.stats_returned_reservations_arr_rel_insert_input,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get suspension_records() {
          return new InputNodeField(
            schema.suspension_records_arr_rel_insert_input,
            true
          );
        },
        get telematic_records() {
          return new InputNodeField(
            schema.telematic_records_arr_rel_insert_input,
            true
          );
        },
        get total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transfers() {
          return new InputNodeField(
            schema.transfers_arr_rel_insert_input,
            true
          );
        },
        get transfers_v2s() {
          return new InputNodeField(
            schema.transfers_v2_arr_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByRenterId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_reviews() {
          return new InputNodeField(
            schema.user_reviews_arr_rel_insert_input,
            true
          );
        },
      },
      { name: 'reservations_insert_input' }
    );
  },
  get reservations_max_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancellation_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cancelled_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get closed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get denial_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get denied_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get drop_off() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_text() {
          return new FieldNode(schema.String, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get pick_up() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get returned_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reviews_completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservations_max_fields',
        extension: ((extensions as any) || {}).reservations_max_fields,
      }
    );
  },
  get reservations_max_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get closed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get denial_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get drop_off() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_text() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get pick_up() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviews_completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_max_order_by' }
    );
  },
  get reservations_min_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get approved_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancellation_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get cancelled_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get closed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get denial_reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get denied_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get drop_off() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_text() {
          return new FieldNode(schema.String, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get pick_up() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get returned_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reviews_completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservations_min_fields',
        extension: ((extensions as any) || {}).reservations_min_fields,
      }
    );
  },
  get reservations_min_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get closed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get denial_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get drop_off() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_text() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get pick_up() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get returned_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviews_completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_min_order_by' }
    );
  },
  get reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservations_mutation_response',
        extension: ((extensions as any) || {}).reservations_mutation_response,
      }
    );
  },
  get reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.reservations_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.reservations_on_conflict, true);
        },
      },
      { name: 'reservations_obj_rel_insert_input' }
    );
  },
  get reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.reservations_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.reservations_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
      },
      { name: 'reservations_on_conflict' }
    );
  },
  get reservations_order_by() {
    return new InputNode(
      {
        get additional_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get approved_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_overage() {
          return new InputNodeField(schema.order_by, true);
        },
        get charges_aggregate() {
          return new InputNodeField(schema.charges_aggregate_order_by, true);
        },
        get closed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get creditTransactionsByReservationId_aggregate() {
          return new InputNodeField(
            schema.credit_transactions_aggregate_order_by,
            true
          );
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_transactions_aggregate() {
          return new InputNodeField(
            schema.credit_transactions_aggregate_order_by,
            true
          );
        },
        get denial_reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get denied_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get drop_off() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluid_ledgers_aggregate() {
          return new InputNodeField(
            schema.fluid_ledger_aggregate_order_by,
            true
          );
        },
        get fluid_transactions_aggregate() {
          return new InputNodeField(
            schema.fluid_transactions_aggregate_order_by,
            true
          );
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get instastart() {
          return new InputNodeField(schema.order_by, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_reviews_aggregate() {
          return new InputNodeField(
            schema.item_reviews_aggregate_order_by,
            true
          );
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_text() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get notifications_aggregate() {
          return new InputNodeField(
            schema.notifications_aggregate_order_by,
            true
          );
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get pick_up() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code() {
          return new InputNodeField(schema.promo_codes_order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get rates() {
          return new InputNodeField(schema.order_by, true);
        },
        get reimbursements_aggregate() {
          return new InputNodeField(
            schema.reimbursements_aggregate_order_by,
            true
          );
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_admin_approvals_aggregate() {
          return new InputNodeField(
            schema.reservation_admin_approvals_aggregate_order_by,
            true
          );
        },
        get reservation_inspection_steps_aggregate() {
          return new InputNodeField(
            schema.reservation_inspection_steps_aggregate_order_by,
            true
          );
        },
        get reservation_reviews_aggregate() {
          return new InputNodeField(
            schema.reservation_reviews_aggregate_order_by,
            true
          );
        },
        get reservation_stakeholders_aggregate() {
          return new InputNodeField(
            schema.reservation_stakeholders_aggregate_order_by,
            true
          );
        },
        get returned_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviews_completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get stats_approved_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_approved_reservations_aggregate_order_by,
            true
          );
        },
        get stats_cancelled_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_aggregate_order_by,
            true
          );
        },
        get stats_completed_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_completed_reservations_aggregate_order_by,
            true
          );
        },
        get stats_denied_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_denied_reservations_aggregate_order_by,
            true
          );
        },
        get stats_requested_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_requested_reservations_aggregate_order_by,
            true
          );
        },
        get stats_returned_reservations_aggregate() {
          return new InputNodeField(
            schema.stats_returned_reservations_aggregate_order_by,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get suspension_records_aggregate() {
          return new InputNodeField(
            schema.suspension_records_aggregate_order_by,
            true
          );
        },
        get telematic_records_aggregate() {
          return new InputNodeField(
            schema.telematic_records_aggregate_order_by,
            true
          );
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_aggregate() {
          return new InputNodeField(schema.transfers_aggregate_order_by, true);
        },
        get transfers_v2s_aggregate() {
          return new InputNodeField(
            schema.transfers_v2_aggregate_order_by,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByRenterId() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_reviews_aggregate() {
          return new InputNodeField(
            schema.user_reviews_aggregate_order_by,
            true
          );
        },
      },
      { name: 'reservations_order_by' }
    );
  },
  get reservations_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'reservations_pk_columns_input' }
    );
  },
  get reservations_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'reservations_prepend_input' }
    );
  },
  get reservations_select_column() {
    return new EnumNode({ name: 'reservations_select_column' });
  },
  get reservations_set_input() {
    return new InputNode(
      {
        get additional_charges() {
          return new InputNodeField(schema._jsonb, true);
        },
        get advanced_notice_minutes() {
          return new InputNodeField(schema.Int, true);
        },
        get approved_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get cancellation_reason() {
          return new InputNodeField(schema.String, true);
        },
        get cancelled_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.Int, true);
        },
        get charge_overage() {
          return new InputNodeField(schema.Boolean, true);
        },
        get closed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get denial_reason() {
          return new InputNodeField(schema.String, true);
        },
        get denied_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get discount() {
          return new InputNodeField(schema.Int, true);
        },
        get drop_off() {
          return new InputNodeField(schema.timestamp, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.Int, true);
        },
        get extension_count() {
          return new InputNodeField(schema.Int, true);
        },
        get final_cost() {
          return new InputNodeField(schema.Int, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.float8, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.float8, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get instastart() {
          return new InputNodeField(schema.Boolean, true);
        },
        get is_vehicle() {
          return new InputNodeField(schema.Boolean, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get message_text() {
          return new InputNodeField(schema.String, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.float8, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.float8, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get pick_up() {
          return new InputNodeField(schema.timestamp, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get renter_id() {
          return new InputNodeField(schema.Int, true);
        },
        get returned_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get reviews_completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.Int, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.Int, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get subtotal() {
          return new InputNodeField(schema.Int, true);
        },
        get total_charge() {
          return new InputNodeField(schema.Int, true);
        },
        get total_payout() {
          return new InputNodeField(schema.Int, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'reservations_set_input' }
    );
  },
  get reservations_stddev_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_stddev_fields',
        extension: ((extensions as any) || {}).reservations_stddev_fields,
      }
    );
  },
  get reservations_stddev_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_stddev_order_by' }
    );
  },
  get reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_stddev_pop_fields',
        extension: ((extensions as any) || {}).reservations_stddev_pop_fields,
      }
    );
  },
  get reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_stddev_pop_order_by' }
    );
  },
  get reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_stddev_samp_fields',
        extension: ((extensions as any) || {}).reservations_stddev_samp_fields,
      }
    );
  },
  get reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_stddev_samp_order_by' }
    );
  },
  get reservations_sum_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'reservations_sum_fields',
        extension: ((extensions as any) || {}).reservations_sum_fields,
      }
    );
  },
  get reservations_sum_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_sum_order_by' }
    );
  },
  get reservations_update_column() {
    return new EnumNode({ name: 'reservations_update_column' });
  },
  get reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_var_pop_fields',
        extension: ((extensions as any) || {}).reservations_var_pop_fields,
      }
    );
  },
  get reservations_var_pop_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_var_pop_order_by' }
    );
  },
  get reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_var_samp_fields',
        extension: ((extensions as any) || {}).reservations_var_samp_fields,
      }
    );
  },
  get reservations_var_samp_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_var_samp_order_by' }
    );
  },
  get reservations_variance_fields() {
    return new ObjectNode(
      {
        get advanced_notice_minutes() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get cancelled_by_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get duration_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get extension_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get first_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get fuel_level_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charge_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get maximum_late_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_dropoff() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get mileage_at_pickup() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get overall_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_credit_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_platform_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_promo_discount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get second_transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subtotal() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_charge() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_payout() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_promo_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_variance_fields',
        extension: ((extensions as any) || {}).reservations_variance_fields,
      }
    );
  },
  get reservations_variance_order_by() {
    return new InputNode(
      {
        get advanced_notice_minutes() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancelled_by_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get duration_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get extension_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_level_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charge_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get maximum_late_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_dropoff() {
          return new InputNodeField(schema.order_by, true);
        },
        get mileage_at_pickup() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get overall_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_credit_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_platform_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_promo_discount() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get subtotal() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_charge() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_payout() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_promo_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_amount() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_variance_order_by' }
    );
  },
  get reservations_view() {
    return new ObjectNode(
      {
        get actual_rental_time() {
          return new FieldNode(schema.interval, undefined, true);
        },
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get drop_off() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estimated_rental_time() {
          return new FieldNode(schema.interval, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner_first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pick_up() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get renter_device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get renter_first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get res_confirmed() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get res_requested() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservations_view',
        extension: ((extensions as any) || {}).reservations_view,
      }
    );
  },
  get reservations_view_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.reservations_view_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.reservations_view, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'reservations_view_aggregate',
        extension: ((extensions as any) || {}).reservations_view_aggregate,
      }
    );
  },
  get reservations_view_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.reservations_view_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.reservations_view_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.reservations_view_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.reservations_view_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.reservations_view_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.reservations_view_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.reservations_view_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.reservations_view_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.reservations_view_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.reservations_view_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'reservations_view_aggregate_fields',
        extension: ((extensions as any) || {})
          .reservations_view_aggregate_fields,
      }
    );
  },
  get reservations_view_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.reservations_view_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.reservations_view_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.reservations_view_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.reservations_view_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.reservations_view_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.reservations_view_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.reservations_view_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.reservations_view_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.reservations_view_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.reservations_view_variance_order_by,
            true
          );
        },
      },
      { name: 'reservations_view_aggregate_order_by' }
    );
  },
  get reservations_view_avg_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_avg_fields',
        extension: ((extensions as any) || {}).reservations_view_avg_fields,
      }
    );
  },
  get reservations_view_avg_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_avg_order_by' }
    );
  },
  get reservations_view_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.reservations_view_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.reservations_view_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.reservations_view_bool_exp, true),
            true
          );
        },
        get actual_rental_time() {
          return new InputNodeField(schema.interval_comparison_exp, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get charge_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get drop_off() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get estimated_rental_time() {
          return new InputNodeField(schema.interval_comparison_exp, true);
        },
        get final_cost() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get item_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get late_charges() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get owner_device_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get owner_first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get owner_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get owner_last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get pick_up() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get renter_device_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get renter_first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get renter_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get renter_last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get res_confirmed() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get res_requested() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reservation_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get started_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'reservations_view_bool_exp' }
    );
  },
  get reservations_view_max_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get drop_off() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner_first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pick_up() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get renter_device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get renter_first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get res_confirmed() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get res_requested() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservations_view_max_fields',
        extension: ((extensions as any) || {}).reservations_view_max_fields,
      }
    );
  },
  get reservations_view_max_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get drop_off() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get pick_up() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get res_confirmed() {
          return new InputNodeField(schema.order_by, true);
        },
        get res_requested() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_max_order_by' }
    );
  },
  get reservations_view_min_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get drop_off() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner_first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get pick_up() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get renter_device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get renter_first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get res_confirmed() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get res_requested() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get started_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'reservations_view_min_fields',
        extension: ((extensions as any) || {}).reservations_view_min_fields,
      }
    );
  },
  get reservations_view_min_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get drop_off() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get pick_up() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get res_confirmed() {
          return new InputNodeField(schema.order_by, true);
        },
        get res_requested() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_min_order_by' }
    );
  },
  get reservations_view_order_by() {
    return new InputNode(
      {
        get actual_rental_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get code() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get drop_off() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_rental_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get pick_up() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get res_confirmed() {
          return new InputNodeField(schema.order_by, true);
        },
        get res_requested() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get started_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_order_by' }
    );
  },
  get reservations_view_select_column() {
    return new EnumNode({ name: 'reservations_view_select_column' });
  },
  get reservations_view_stddev_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_stddev_fields',
        extension: ((extensions as any) || {}).reservations_view_stddev_fields,
      }
    );
  },
  get reservations_view_stddev_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_stddev_order_by' }
    );
  },
  get reservations_view_stddev_pop_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .reservations_view_stddev_pop_fields,
      }
    );
  },
  get reservations_view_stddev_pop_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_stddev_pop_order_by' }
    );
  },
  get reservations_view_stddev_samp_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .reservations_view_stddev_samp_fields,
      }
    );
  },
  get reservations_view_stddev_samp_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_stddev_samp_order_by' }
    );
  },
  get reservations_view_sum_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'reservations_view_sum_fields',
        extension: ((extensions as any) || {}).reservations_view_sum_fields,
      }
    );
  },
  get reservations_view_sum_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_sum_order_by' }
    );
  },
  get reservations_view_var_pop_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_var_pop_fields',
        extension: ((extensions as any) || {}).reservations_view_var_pop_fields,
      }
    );
  },
  get reservations_view_var_pop_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_var_pop_order_by' }
    );
  },
  get reservations_view_var_samp_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_var_samp_fields',
        extension: ((extensions as any) || {})
          .reservations_view_var_samp_fields,
      }
    );
  },
  get reservations_view_var_samp_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_var_samp_order_by' }
    );
  },
  get reservations_view_variance_fields() {
    return new ObjectNode(
      {
        get cancellation_fee() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_amt() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get estimated_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get final_cost() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get late_charges() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get owner_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get renter_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'reservations_view_variance_fields',
        extension: ((extensions as any) || {})
          .reservations_view_variance_fields,
      }
    );
  },
  get reservations_view_variance_order_by() {
    return new InputNode(
      {
        get cancellation_fee() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_amt() {
          return new InputNodeField(schema.order_by, true);
        },
        get estimated_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get final_cost() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get late_charges() {
          return new InputNodeField(schema.order_by, true);
        },
        get owner_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get renter_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'reservations_view_variance_order_by' }
    );
  },
  get sim_cards() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get imei() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get telematic_device() {
          return new FieldNode(schema.telematic_devices, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      { name: 'sim_cards', extension: ((extensions as any) || {}).sim_cards }
    );
  },
  get sim_cards_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.sim_cards_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.sim_cards, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'sim_cards_aggregate',
        extension: ((extensions as any) || {}).sim_cards_aggregate,
      }
    );
  },
  get sim_cards_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.sim_cards_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.sim_cards_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.sim_cards_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.sim_cards_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.sim_cards_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.sim_cards_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.sim_cards_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.sim_cards_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.sim_cards_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.sim_cards_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'sim_cards_aggregate_fields',
        extension: ((extensions as any) || {}).sim_cards_aggregate_fields,
      }
    );
  },
  get sim_cards_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.sim_cards_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.sim_cards_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.sim_cards_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.sim_cards_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.sim_cards_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.sim_cards_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.sim_cards_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.sim_cards_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.sim_cards_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.sim_cards_variance_order_by, true);
        },
      },
      { name: 'sim_cards_aggregate_order_by' }
    );
  },
  get sim_cards_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.sim_cards_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.sim_cards_on_conflict, true);
        },
      },
      { name: 'sim_cards_arr_rel_insert_input' }
    );
  },
  get sim_cards_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_avg_fields',
        extension: ((extensions as any) || {}).sim_cards_avg_fields,
      }
    );
  },
  get sim_cards_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_avg_order_by' }
    );
  },
  get sim_cards_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.sim_cards_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.sim_cards_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.sim_cards_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get imei() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get telematic_device() {
          return new InputNodeField(schema.telematic_devices_bool_exp, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'sim_cards_bool_exp' }
    );
  },
  get sim_cards_constraint() {
    return new EnumNode({ name: 'sim_cards_constraint' });
  },
  get sim_cards_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'sim_cards_inc_input' }
    );
  },
  get sim_cards_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get imei() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get telematic_device() {
          return new InputNodeField(
            schema.telematic_devices_obj_rel_insert_input,
            true
          );
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'sim_cards_insert_input' }
    );
  },
  get sim_cards_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get imei() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'sim_cards_max_fields',
        extension: ((extensions as any) || {}).sim_cards_max_fields,
      }
    );
  },
  get sim_cards_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get imei() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_max_order_by' }
    );
  },
  get sim_cards_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get imei() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'sim_cards_min_fields',
        extension: ((extensions as any) || {}).sim_cards_min_fields,
      }
    );
  },
  get sim_cards_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get imei() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_min_order_by' }
    );
  },
  get sim_cards_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.sim_cards, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'sim_cards_mutation_response',
        extension: ((extensions as any) || {}).sim_cards_mutation_response,
      }
    );
  },
  get sim_cards_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.sim_cards_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.sim_cards_on_conflict, true);
        },
      },
      { name: 'sim_cards_obj_rel_insert_input' }
    );
  },
  get sim_cards_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.sim_cards_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.sim_cards_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.sim_cards_bool_exp, true);
        },
      },
      { name: 'sim_cards_on_conflict' }
    );
  },
  get sim_cards_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get imei() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device() {
          return new InputNodeField(schema.telematic_devices_order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_order_by' }
    );
  },
  get sim_cards_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'sim_cards_pk_columns_input' }
    );
  },
  get sim_cards_select_column() {
    return new EnumNode({ name: 'sim_cards_select_column' });
  },
  get sim_cards_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get imei() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'sim_cards_set_input' }
    );
  },
  get sim_cards_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_stddev_fields',
        extension: ((extensions as any) || {}).sim_cards_stddev_fields,
      }
    );
  },
  get sim_cards_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_stddev_order_by' }
    );
  },
  get sim_cards_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_stddev_pop_fields',
        extension: ((extensions as any) || {}).sim_cards_stddev_pop_fields,
      }
    );
  },
  get sim_cards_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_stddev_pop_order_by' }
    );
  },
  get sim_cards_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_stddev_samp_fields',
        extension: ((extensions as any) || {}).sim_cards_stddev_samp_fields,
      }
    );
  },
  get sim_cards_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_stddev_samp_order_by' }
    );
  },
  get sim_cards_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'sim_cards_sum_fields',
        extension: ((extensions as any) || {}).sim_cards_sum_fields,
      }
    );
  },
  get sim_cards_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_sum_order_by' }
    );
  },
  get sim_cards_update_column() {
    return new EnumNode({ name: 'sim_cards_update_column' });
  },
  get sim_cards_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_var_pop_fields',
        extension: ((extensions as any) || {}).sim_cards_var_pop_fields,
      }
    );
  },
  get sim_cards_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_var_pop_order_by' }
    );
  },
  get sim_cards_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_var_samp_fields',
        extension: ((extensions as any) || {}).sim_cards_var_samp_fields,
      }
    );
  },
  get sim_cards_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_var_samp_order_by' }
    );
  },
  get sim_cards_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'sim_cards_variance_fields',
        extension: ((extensions as any) || {}).sim_cards_variance_fields,
      }
    );
  },
  get sim_cards_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'sim_cards_variance_order_by' }
    );
  },
  get smallint() {
    return new ScalarNode({
      name: 'smallint',
      extension: ((extensions as any) || {}).smallint,
    });
  },
  get smallint_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.smallint, true);
        },
        get _gt() {
          return new InputNodeField(schema.smallint, true);
        },
        get _gte() {
          return new InputNodeField(schema.smallint, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.smallint, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.smallint, true);
        },
        get _lte() {
          return new InputNodeField(schema.smallint, true);
        },
        get _neq() {
          return new InputNodeField(schema.smallint, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.smallint, true), true);
        },
      },
      { name: 'smallint_comparison_exp' }
    );
  },
  get spam_receivers() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get spam_sender() {
          return new FieldNode(schema.spam_senders, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_receivers',
        extension: ((extensions as any) || {}).spam_receivers,
      }
    );
  },
  get spam_receivers_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.spam_receivers_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.spam_receivers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'spam_receivers_aggregate',
        extension: ((extensions as any) || {}).spam_receivers_aggregate,
      }
    );
  },
  get spam_receivers_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.spam_receivers_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.spam_receivers_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.spam_receivers_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.spam_receivers_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.spam_receivers_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.spam_receivers_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.spam_receivers_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.spam_receivers_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.spam_receivers_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.spam_receivers_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'spam_receivers_aggregate_fields',
        extension: ((extensions as any) || {}).spam_receivers_aggregate_fields,
      }
    );
  },
  get spam_receivers_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.spam_receivers_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.spam_receivers_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.spam_receivers_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.spam_receivers_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.spam_receivers_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.spam_receivers_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.spam_receivers_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.spam_receivers_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.spam_receivers_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.spam_receivers_variance_order_by,
            true
          );
        },
      },
      { name: 'spam_receivers_aggregate_order_by' }
    );
  },
  get spam_receivers_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.spam_receivers_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.spam_receivers_on_conflict, true);
        },
      },
      { name: 'spam_receivers_arr_rel_insert_input' }
    );
  },
  get spam_receivers_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_avg_fields',
        extension: ((extensions as any) || {}).spam_receivers_avg_fields,
      }
    );
  },
  get spam_receivers_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_avg_order_by' }
    );
  },
  get spam_receivers_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.spam_receivers_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.spam_receivers_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.spam_receivers_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get spam_sender() {
          return new InputNodeField(schema.spam_senders_bool_exp, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'spam_receivers_bool_exp' }
    );
  },
  get spam_receivers_constraint() {
    return new EnumNode({ name: 'spam_receivers_constraint' });
  },
  get spam_receivers_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spam_receivers_inc_input' }
    );
  },
  get spam_receivers_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get spam_sender() {
          return new InputNodeField(
            schema.spam_senders_obj_rel_insert_input,
            true
          );
        },
        get spam_sender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spam_receivers_insert_input' }
    );
  },
  get spam_receivers_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_receivers_max_fields',
        extension: ((extensions as any) || {}).spam_receivers_max_fields,
      }
    );
  },
  get spam_receivers_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_max_order_by' }
    );
  },
  get spam_receivers_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_receivers_min_fields',
        extension: ((extensions as any) || {}).spam_receivers_min_fields,
      }
    );
  },
  get spam_receivers_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_min_order_by' }
    );
  },
  get spam_receivers_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.spam_receivers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'spam_receivers_mutation_response',
        extension: ((extensions as any) || {}).spam_receivers_mutation_response,
      }
    );
  },
  get spam_receivers_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.spam_receivers_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.spam_receivers_on_conflict, true);
        },
      },
      { name: 'spam_receivers_obj_rel_insert_input' }
    );
  },
  get spam_receivers_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.spam_receivers_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.spam_receivers_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.spam_receivers_bool_exp, true);
        },
      },
      { name: 'spam_receivers_on_conflict' }
    );
  },
  get spam_receivers_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender() {
          return new InputNodeField(schema.spam_senders_order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_order_by' }
    );
  },
  get spam_receivers_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'spam_receivers_pk_columns_input' }
    );
  },
  get spam_receivers_select_column() {
    return new EnumNode({ name: 'spam_receivers_select_column' });
  },
  get spam_receivers_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spam_receivers_set_input' }
    );
  },
  get spam_receivers_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_stddev_fields',
        extension: ((extensions as any) || {}).spam_receivers_stddev_fields,
      }
    );
  },
  get spam_receivers_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_stddev_order_by' }
    );
  },
  get spam_receivers_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_stddev_pop_fields',
        extension: ((extensions as any) || {}).spam_receivers_stddev_pop_fields,
      }
    );
  },
  get spam_receivers_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_stddev_pop_order_by' }
    );
  },
  get spam_receivers_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .spam_receivers_stddev_samp_fields,
      }
    );
  },
  get spam_receivers_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_stddev_samp_order_by' }
    );
  },
  get spam_receivers_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_receivers_sum_fields',
        extension: ((extensions as any) || {}).spam_receivers_sum_fields,
      }
    );
  },
  get spam_receivers_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_sum_order_by' }
    );
  },
  get spam_receivers_update_column() {
    return new EnumNode({ name: 'spam_receivers_update_column' });
  },
  get spam_receivers_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_var_pop_fields',
        extension: ((extensions as any) || {}).spam_receivers_var_pop_fields,
      }
    );
  },
  get spam_receivers_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_var_pop_order_by' }
    );
  },
  get spam_receivers_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_var_samp_fields',
        extension: ((extensions as any) || {}).spam_receivers_var_samp_fields,
      }
    );
  },
  get spam_receivers_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_var_samp_order_by' }
    );
  },
  get spam_receivers_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get spam_sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_receivers_variance_fields',
        extension: ((extensions as any) || {}).spam_receivers_variance_fields,
      }
    );
  },
  get spam_receivers_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_receivers_variance_order_by' }
    );
  },
  get spam_senders() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get spam_receivers() {
          return new FieldNode(
            new ArrayNode(schema.spam_receivers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_receivers_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_receivers_aggregate() {
          return new FieldNode(
            schema.spam_receivers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_receivers_bool_exp, true);
              },
            }),
            false
          );
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_senders',
        extension: ((extensions as any) || {}).spam_senders,
      }
    );
  },
  get spam_senders_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.spam_senders_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.spam_senders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'spam_senders_aggregate',
        extension: ((extensions as any) || {}).spam_senders_aggregate,
      }
    );
  },
  get spam_senders_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.spam_senders_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.spam_senders_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.spam_senders_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.spam_senders_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.spam_senders_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.spam_senders_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.spam_senders_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.spam_senders_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.spam_senders_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.spam_senders_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'spam_senders_aggregate_fields',
        extension: ((extensions as any) || {}).spam_senders_aggregate_fields,
      }
    );
  },
  get spam_senders_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.spam_senders_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.spam_senders_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.spam_senders_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.spam_senders_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.spam_senders_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.spam_senders_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.spam_senders_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.spam_senders_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.spam_senders_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.spam_senders_variance_order_by,
            true
          );
        },
      },
      { name: 'spam_senders_aggregate_order_by' }
    );
  },
  get spam_senders_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.spam_senders_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.spam_senders_on_conflict, true);
        },
      },
      { name: 'spam_senders_arr_rel_insert_input' }
    );
  },
  get spam_senders_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_avg_fields',
        extension: ((extensions as any) || {}).spam_senders_avg_fields,
      }
    );
  },
  get spam_senders_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_avg_order_by' }
    );
  },
  get spam_senders_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.spam_senders_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.spam_senders_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.spam_senders_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get message() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get spam_receivers() {
          return new InputNodeField(schema.spam_receivers_bool_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'spam_senders_bool_exp' }
    );
  },
  get spam_senders_constraint() {
    return new EnumNode({ name: 'spam_senders_constraint' });
  },
  get spam_senders_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spam_senders_inc_input' }
    );
  },
  get spam_senders_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get message() {
          return new InputNodeField(schema.String, true);
        },
        get spam_receivers() {
          return new InputNodeField(
            schema.spam_receivers_arr_rel_insert_input,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spam_senders_insert_input' }
    );
  },
  get spam_senders_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_senders_max_fields',
        extension: ((extensions as any) || {}).spam_senders_max_fields,
      }
    );
  },
  get spam_senders_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_max_order_by' }
    );
  },
  get spam_senders_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_senders_min_fields',
        extension: ((extensions as any) || {}).spam_senders_min_fields,
      }
    );
  },
  get spam_senders_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_min_order_by' }
    );
  },
  get spam_senders_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.spam_senders, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'spam_senders_mutation_response',
        extension: ((extensions as any) || {}).spam_senders_mutation_response,
      }
    );
  },
  get spam_senders_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.spam_senders_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.spam_senders_on_conflict, true);
        },
      },
      { name: 'spam_senders_obj_rel_insert_input' }
    );
  },
  get spam_senders_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.spam_senders_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.spam_senders_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.spam_senders_bool_exp, true);
        },
      },
      { name: 'spam_senders_on_conflict' }
    );
  },
  get spam_senders_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get spam_receivers_aggregate() {
          return new InputNodeField(
            schema.spam_receivers_aggregate_order_by,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_order_by' }
    );
  },
  get spam_senders_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'spam_senders_pk_columns_input' }
    );
  },
  get spam_senders_select_column() {
    return new EnumNode({ name: 'spam_senders_select_column' });
  },
  get spam_senders_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get message() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spam_senders_set_input' }
    );
  },
  get spam_senders_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_stddev_fields',
        extension: ((extensions as any) || {}).spam_senders_stddev_fields,
      }
    );
  },
  get spam_senders_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_stddev_order_by' }
    );
  },
  get spam_senders_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_stddev_pop_fields',
        extension: ((extensions as any) || {}).spam_senders_stddev_pop_fields,
      }
    );
  },
  get spam_senders_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_stddev_pop_order_by' }
    );
  },
  get spam_senders_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_stddev_samp_fields',
        extension: ((extensions as any) || {}).spam_senders_stddev_samp_fields,
      }
    );
  },
  get spam_senders_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_stddev_samp_order_by' }
    );
  },
  get spam_senders_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spam_senders_sum_fields',
        extension: ((extensions as any) || {}).spam_senders_sum_fields,
      }
    );
  },
  get spam_senders_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_sum_order_by' }
    );
  },
  get spam_senders_update_column() {
    return new EnumNode({ name: 'spam_senders_update_column' });
  },
  get spam_senders_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_var_pop_fields',
        extension: ((extensions as any) || {}).spam_senders_var_pop_fields,
      }
    );
  },
  get spam_senders_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_var_pop_order_by' }
    );
  },
  get spam_senders_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_var_samp_fields',
        extension: ((extensions as any) || {}).spam_senders_var_samp_fields,
      }
    );
  },
  get spam_senders_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_var_samp_order_by' }
    );
  },
  get spam_senders_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spam_senders_variance_fields',
        extension: ((extensions as any) || {}).spam_senders_variance_fields,
      }
    );
  },
  get spam_senders_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spam_senders_variance_order_by' }
    );
  },
  get spatial_ref_sys() {
    return new ObjectNode(
      {
        get auth_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get auth_srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get proj4text() {
          return new FieldNode(schema.String, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get srtext() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys',
        extension: ((extensions as any) || {}).spatial_ref_sys,
      }
    );
  },
  get spatial_ref_sys_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.spatial_ref_sys_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.spatial_ref_sys, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'spatial_ref_sys_aggregate',
        extension: ((extensions as any) || {}).spatial_ref_sys_aggregate,
      }
    );
  },
  get spatial_ref_sys_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.spatial_ref_sys_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.spatial_ref_sys_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.spatial_ref_sys_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.spatial_ref_sys_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.spatial_ref_sys_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.spatial_ref_sys_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.spatial_ref_sys_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.spatial_ref_sys_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.spatial_ref_sys_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.spatial_ref_sys_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'spatial_ref_sys_aggregate_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_aggregate_fields,
      }
    );
  },
  get spatial_ref_sys_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.spatial_ref_sys_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.spatial_ref_sys_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.spatial_ref_sys_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.spatial_ref_sys_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.spatial_ref_sys_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.spatial_ref_sys_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.spatial_ref_sys_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.spatial_ref_sys_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.spatial_ref_sys_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.spatial_ref_sys_variance_order_by,
            true
          );
        },
      },
      { name: 'spatial_ref_sys_aggregate_order_by' }
    );
  },
  get spatial_ref_sys_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.spatial_ref_sys_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.spatial_ref_sys_on_conflict, true);
        },
      },
      { name: 'spatial_ref_sys_arr_rel_insert_input' }
    );
  },
  get spatial_ref_sys_avg_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_avg_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_avg_fields,
      }
    );
  },
  get spatial_ref_sys_avg_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_avg_order_by' }
    );
  },
  get spatial_ref_sys_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.spatial_ref_sys_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.spatial_ref_sys_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.spatial_ref_sys_bool_exp, true),
            true
          );
        },
        get auth_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get auth_srid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get proj4text() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get srid() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get srtext() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'spatial_ref_sys_bool_exp' }
    );
  },
  get spatial_ref_sys_constraint() {
    return new EnumNode({ name: 'spatial_ref_sys_constraint' });
  },
  get spatial_ref_sys_inc_input() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.Int, true);
        },
        get srid() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'spatial_ref_sys_inc_input' }
    );
  },
  get spatial_ref_sys_insert_input() {
    return new InputNode(
      {
        get auth_name() {
          return new InputNodeField(schema.String, true);
        },
        get auth_srid() {
          return new InputNodeField(schema.Int, true);
        },
        get proj4text() {
          return new InputNodeField(schema.String, true);
        },
        get srid() {
          return new InputNodeField(schema.Int, true);
        },
        get srtext() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'spatial_ref_sys_insert_input' }
    );
  },
  get spatial_ref_sys_max_fields() {
    return new ObjectNode(
      {
        get auth_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get auth_srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get proj4text() {
          return new FieldNode(schema.String, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srtext() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_max_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_max_fields,
      }
    );
  },
  get spatial_ref_sys_max_order_by() {
    return new InputNode(
      {
        get auth_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get proj4text() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srtext() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_max_order_by' }
    );
  },
  get spatial_ref_sys_min_fields() {
    return new ObjectNode(
      {
        get auth_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get auth_srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get proj4text() {
          return new FieldNode(schema.String, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srtext() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_min_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_min_fields,
      }
    );
  },
  get spatial_ref_sys_min_order_by() {
    return new InputNode(
      {
        get auth_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get proj4text() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srtext() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_min_order_by' }
    );
  },
  get spatial_ref_sys_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.spatial_ref_sys, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'spatial_ref_sys_mutation_response',
        extension: ((extensions as any) || {})
          .spatial_ref_sys_mutation_response,
      }
    );
  },
  get spatial_ref_sys_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.spatial_ref_sys_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.spatial_ref_sys_on_conflict, true);
        },
      },
      { name: 'spatial_ref_sys_obj_rel_insert_input' }
    );
  },
  get spatial_ref_sys_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.spatial_ref_sys_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.spatial_ref_sys_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.spatial_ref_sys_bool_exp, true);
        },
      },
      { name: 'spatial_ref_sys_on_conflict' }
    );
  },
  get spatial_ref_sys_order_by() {
    return new InputNode(
      {
        get auth_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get proj4text() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srtext() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_order_by' }
    );
  },
  get spatial_ref_sys_pk_columns_input() {
    return new InputNode(
      {
        get srid() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'spatial_ref_sys_pk_columns_input' }
    );
  },
  get spatial_ref_sys_select_column() {
    return new EnumNode({ name: 'spatial_ref_sys_select_column' });
  },
  get spatial_ref_sys_set_input() {
    return new InputNode(
      {
        get auth_name() {
          return new InputNodeField(schema.String, true);
        },
        get auth_srid() {
          return new InputNodeField(schema.Int, true);
        },
        get proj4text() {
          return new InputNodeField(schema.String, true);
        },
        get srid() {
          return new InputNodeField(schema.Int, true);
        },
        get srtext() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'spatial_ref_sys_set_input' }
    );
  },
  get spatial_ref_sys_stddev_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_stddev_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_stddev_fields,
      }
    );
  },
  get spatial_ref_sys_stddev_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_stddev_order_by' }
    );
  },
  get spatial_ref_sys_stddev_pop_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .spatial_ref_sys_stddev_pop_fields,
      }
    );
  },
  get spatial_ref_sys_stddev_pop_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_stddev_pop_order_by' }
    );
  },
  get spatial_ref_sys_stddev_samp_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .spatial_ref_sys_stddev_samp_fields,
      }
    );
  },
  get spatial_ref_sys_stddev_samp_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_stddev_samp_order_by' }
    );
  },
  get spatial_ref_sys_sum_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_sum_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_sum_fields,
      }
    );
  },
  get spatial_ref_sys_sum_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_sum_order_by' }
    );
  },
  get spatial_ref_sys_update_column() {
    return new EnumNode({ name: 'spatial_ref_sys_update_column' });
  },
  get spatial_ref_sys_var_pop_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_var_pop_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_var_pop_fields,
      }
    );
  },
  get spatial_ref_sys_var_pop_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_var_pop_order_by' }
    );
  },
  get spatial_ref_sys_var_samp_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_var_samp_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_var_samp_fields,
      }
    );
  },
  get spatial_ref_sys_var_samp_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_var_samp_order_by' }
    );
  },
  get spatial_ref_sys_variance_fields() {
    return new ObjectNode(
      {
        get auth_srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get srid() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'spatial_ref_sys_variance_fields',
        extension: ((extensions as any) || {}).spatial_ref_sys_variance_fields,
      }
    );
  },
  get spatial_ref_sys_variance_order_by() {
    return new InputNode(
      {
        get auth_srid() {
          return new InputNodeField(schema.order_by, true);
        },
        get srid() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'spatial_ref_sys_variance_order_by' }
    );
  },
  get st_d_within_geography_input() {
    return new InputNode(
      {
        get distance() {
          return new InputNodeField(schema.Float, false);
        },
        get from() {
          return new InputNodeField(schema.geography, false);
        },
        get use_spheroid() {
          return new InputNodeField(schema.Boolean, true);
        },
      },
      { name: 'st_d_within_geography_input' }
    );
  },
  get st_d_within_input() {
    return new InputNode(
      {
        get distance() {
          return new InputNodeField(schema.Float, false);
        },
        get from() {
          return new InputNodeField(schema.geometry, false);
        },
      },
      { name: 'st_d_within_input' }
    );
  },
  get stats_approved_reservations() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations',
        extension: ((extensions as any) || {}).stats_approved_reservations,
      }
    );
  },
  get stats_approved_reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_approved_reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_approved_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_approved_reservations_aggregate',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_aggregate,
      }
    );
  },
  get stats_approved_reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_approved_reservations_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_approved_reservations_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_approved_reservations_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_approved_reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_approved_reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_approved_reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_approved_reservations_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_approved_reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_approved_reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_approved_reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_approved_reservations_aggregate_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_aggregate_fields,
      }
    );
  },
  get stats_approved_reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.stats_approved_reservations_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.stats_approved_reservations_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.stats_approved_reservations_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_approved_reservations_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_approved_reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_approved_reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.stats_approved_reservations_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_approved_reservations_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_approved_reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_approved_reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_approved_reservations_aggregate_order_by' }
    );
  },
  get stats_approved_reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_approved_reservations_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_approved_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_approved_reservations_arr_rel_insert_input' }
    );
  },
  get stats_approved_reservations_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_avg_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_avg_fields,
      }
    );
  },
  get stats_approved_reservations_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_avg_order_by' }
    );
  },
  get stats_approved_reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_approved_reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.stats_approved_reservations_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_approved_reservations_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_approved_reservations_bool_exp' }
    );
  },
  get stats_approved_reservations_constraint() {
    return new EnumNode({ name: 'stats_approved_reservations_constraint' });
  },
  get stats_approved_reservations_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_approved_reservations_inc_input' }
    );
  },
  get stats_approved_reservations_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_approved_reservations_insert_input' }
    );
  },
  get stats_approved_reservations_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_max_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_max_fields,
      }
    );
  },
  get stats_approved_reservations_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_max_order_by' }
    );
  },
  get stats_approved_reservations_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_min_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_min_fields,
      }
    );
  },
  get stats_approved_reservations_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_min_order_by' }
    );
  },
  get stats_approved_reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_approved_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_approved_reservations_mutation_response',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_mutation_response,
      }
    );
  },
  get stats_approved_reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.stats_approved_reservations_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_approved_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_approved_reservations_obj_rel_insert_input' }
    );
  },
  get stats_approved_reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.stats_approved_reservations_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_approved_reservations_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.stats_approved_reservations_bool_exp,
            true
          );
        },
      },
      { name: 'stats_approved_reservations_on_conflict' }
    );
  },
  get stats_approved_reservations_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_order_by' }
    );
  },
  get stats_approved_reservations_select_column() {
    return new EnumNode({ name: 'stats_approved_reservations_select_column' });
  },
  get stats_approved_reservations_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_approved_reservations_set_input' }
    );
  },
  get stats_approved_reservations_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_stddev_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_stddev_fields,
      }
    );
  },
  get stats_approved_reservations_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_stddev_order_by' }
    );
  },
  get stats_approved_reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_stddev_pop_fields,
      }
    );
  },
  get stats_approved_reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_stddev_pop_order_by' }
    );
  },
  get stats_approved_reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_stddev_samp_fields,
      }
    );
  },
  get stats_approved_reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_stddev_samp_order_by' }
    );
  },
  get stats_approved_reservations_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_sum_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_sum_fields,
      }
    );
  },
  get stats_approved_reservations_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_sum_order_by' }
    );
  },
  get stats_approved_reservations_update_column() {
    return new EnumNode({ name: 'stats_approved_reservations_update_column' });
  },
  get stats_approved_reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_var_pop_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_var_pop_fields,
      }
    );
  },
  get stats_approved_reservations_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_var_pop_order_by' }
    );
  },
  get stats_approved_reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_var_samp_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_var_samp_fields,
      }
    );
  },
  get stats_approved_reservations_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_var_samp_order_by' }
    );
  },
  get stats_approved_reservations_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_approved_reservations_variance_fields',
        extension: ((extensions as any) || {})
          .stats_approved_reservations_variance_fields,
      }
    );
  },
  get stats_approved_reservations_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_approved_reservations_variance_order_by' }
    );
  },
  get stats_cancelled_reservations() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations',
        extension: ((extensions as any) || {}).stats_cancelled_reservations,
      }
    );
  },
  get stats_cancelled_reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_cancelled_reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_cancelled_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_cancelled_reservations_aggregate',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_aggregate,
      }
    );
  },
  get stats_cancelled_reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_cancelled_reservations_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_cancelled_reservations_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_cancelled_reservations_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_cancelled_reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_cancelled_reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_cancelled_reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_cancelled_reservations_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_cancelled_reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_cancelled_reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_cancelled_reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_cancelled_reservations_aggregate_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_aggregate_fields,
      }
    );
  },
  get stats_cancelled_reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_cancelled_reservations_aggregate_order_by' }
    );
  },
  get stats_cancelled_reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_cancelled_reservations_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_cancelled_reservations_arr_rel_insert_input' }
    );
  },
  get stats_cancelled_reservations_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_avg_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_avg_fields,
      }
    );
  },
  get stats_cancelled_reservations_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_avg_order_by' }
    );
  },
  get stats_cancelled_reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_cancelled_reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_cancelled_reservations_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_cancelled_reservations_bool_exp' }
    );
  },
  get stats_cancelled_reservations_constraint() {
    return new EnumNode({ name: 'stats_cancelled_reservations_constraint' });
  },
  get stats_cancelled_reservations_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_cancelled_reservations_inc_input' }
    );
  },
  get stats_cancelled_reservations_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_cancelled_reservations_insert_input' }
    );
  },
  get stats_cancelled_reservations_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_max_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_max_fields,
      }
    );
  },
  get stats_cancelled_reservations_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_max_order_by' }
    );
  },
  get stats_cancelled_reservations_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_min_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_min_fields,
      }
    );
  },
  get stats_cancelled_reservations_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_min_order_by' }
    );
  },
  get stats_cancelled_reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_cancelled_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_cancelled_reservations_mutation_response',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_mutation_response,
      }
    );
  },
  get stats_cancelled_reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_cancelled_reservations_obj_rel_insert_input' }
    );
  },
  get stats_cancelled_reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_cancelled_reservations_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.stats_cancelled_reservations_bool_exp,
            true
          );
        },
      },
      { name: 'stats_cancelled_reservations_on_conflict' }
    );
  },
  get stats_cancelled_reservations_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_order_by' }
    );
  },
  get stats_cancelled_reservations_select_column() {
    return new EnumNode({ name: 'stats_cancelled_reservations_select_column' });
  },
  get stats_cancelled_reservations_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_cancelled_reservations_set_input' }
    );
  },
  get stats_cancelled_reservations_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_stddev_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_stddev_fields,
      }
    );
  },
  get stats_cancelled_reservations_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_stddev_order_by' }
    );
  },
  get stats_cancelled_reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_stddev_pop_fields,
      }
    );
  },
  get stats_cancelled_reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_stddev_pop_order_by' }
    );
  },
  get stats_cancelled_reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_stddev_samp_fields,
      }
    );
  },
  get stats_cancelled_reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_stddev_samp_order_by' }
    );
  },
  get stats_cancelled_reservations_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_sum_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_sum_fields,
      }
    );
  },
  get stats_cancelled_reservations_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_sum_order_by' }
    );
  },
  get stats_cancelled_reservations_update_column() {
    return new EnumNode({ name: 'stats_cancelled_reservations_update_column' });
  },
  get stats_cancelled_reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_var_pop_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_var_pop_fields,
      }
    );
  },
  get stats_cancelled_reservations_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_var_pop_order_by' }
    );
  },
  get stats_cancelled_reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_var_samp_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_var_samp_fields,
      }
    );
  },
  get stats_cancelled_reservations_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_var_samp_order_by' }
    );
  },
  get stats_cancelled_reservations_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_cancelled_reservations_variance_fields',
        extension: ((extensions as any) || {})
          .stats_cancelled_reservations_variance_fields,
      }
    );
  },
  get stats_cancelled_reservations_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_cancelled_reservations_variance_order_by' }
    );
  },
  get stats_completed_reservations() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations',
        extension: ((extensions as any) || {}).stats_completed_reservations,
      }
    );
  },
  get stats_completed_reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_completed_reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_completed_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_completed_reservations_aggregate',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_aggregate,
      }
    );
  },
  get stats_completed_reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_completed_reservations_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_completed_reservations_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_completed_reservations_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_completed_reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_completed_reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_completed_reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_completed_reservations_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_completed_reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_completed_reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_completed_reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_completed_reservations_aggregate_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_aggregate_fields,
      }
    );
  },
  get stats_completed_reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.stats_completed_reservations_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.stats_completed_reservations_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.stats_completed_reservations_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_completed_reservations_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_completed_reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_completed_reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.stats_completed_reservations_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_completed_reservations_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_completed_reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_completed_reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_completed_reservations_aggregate_order_by' }
    );
  },
  get stats_completed_reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_completed_reservations_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_completed_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_completed_reservations_arr_rel_insert_input' }
    );
  },
  get stats_completed_reservations_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_avg_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_avg_fields,
      }
    );
  },
  get stats_completed_reservations_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_avg_order_by' }
    );
  },
  get stats_completed_reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_completed_reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.stats_completed_reservations_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_completed_reservations_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_completed_reservations_bool_exp' }
    );
  },
  get stats_completed_reservations_constraint() {
    return new EnumNode({ name: 'stats_completed_reservations_constraint' });
  },
  get stats_completed_reservations_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_completed_reservations_inc_input' }
    );
  },
  get stats_completed_reservations_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_completed_reservations_insert_input' }
    );
  },
  get stats_completed_reservations_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_max_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_max_fields,
      }
    );
  },
  get stats_completed_reservations_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_max_order_by' }
    );
  },
  get stats_completed_reservations_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_min_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_min_fields,
      }
    );
  },
  get stats_completed_reservations_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_min_order_by' }
    );
  },
  get stats_completed_reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_completed_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_completed_reservations_mutation_response',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_mutation_response,
      }
    );
  },
  get stats_completed_reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.stats_completed_reservations_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_completed_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_completed_reservations_obj_rel_insert_input' }
    );
  },
  get stats_completed_reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.stats_completed_reservations_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_completed_reservations_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.stats_completed_reservations_bool_exp,
            true
          );
        },
      },
      { name: 'stats_completed_reservations_on_conflict' }
    );
  },
  get stats_completed_reservations_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_order_by' }
    );
  },
  get stats_completed_reservations_select_column() {
    return new EnumNode({ name: 'stats_completed_reservations_select_column' });
  },
  get stats_completed_reservations_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_completed_reservations_set_input' }
    );
  },
  get stats_completed_reservations_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_stddev_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_stddev_fields,
      }
    );
  },
  get stats_completed_reservations_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_stddev_order_by' }
    );
  },
  get stats_completed_reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_stddev_pop_fields,
      }
    );
  },
  get stats_completed_reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_stddev_pop_order_by' }
    );
  },
  get stats_completed_reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_stddev_samp_fields,
      }
    );
  },
  get stats_completed_reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_stddev_samp_order_by' }
    );
  },
  get stats_completed_reservations_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_sum_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_sum_fields,
      }
    );
  },
  get stats_completed_reservations_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_sum_order_by' }
    );
  },
  get stats_completed_reservations_update_column() {
    return new EnumNode({ name: 'stats_completed_reservations_update_column' });
  },
  get stats_completed_reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_var_pop_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_var_pop_fields,
      }
    );
  },
  get stats_completed_reservations_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_var_pop_order_by' }
    );
  },
  get stats_completed_reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_var_samp_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_var_samp_fields,
      }
    );
  },
  get stats_completed_reservations_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_var_samp_order_by' }
    );
  },
  get stats_completed_reservations_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_completed_reservations_variance_fields',
        extension: ((extensions as any) || {})
          .stats_completed_reservations_variance_fields,
      }
    );
  },
  get stats_completed_reservations_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_completed_reservations_variance_order_by' }
    );
  },
  get stats_denied_reservations() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations',
        extension: ((extensions as any) || {}).stats_denied_reservations,
      }
    );
  },
  get stats_denied_reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_denied_reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_denied_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_denied_reservations_aggregate',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_aggregate,
      }
    );
  },
  get stats_denied_reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_denied_reservations_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_denied_reservations_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_denied_reservations_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_denied_reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_denied_reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_denied_reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_denied_reservations_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_denied_reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_denied_reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_denied_reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_denied_reservations_aggregate_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_aggregate_fields,
      }
    );
  },
  get stats_denied_reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.stats_denied_reservations_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.stats_denied_reservations_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.stats_denied_reservations_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_denied_reservations_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_denied_reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_denied_reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.stats_denied_reservations_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_denied_reservations_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_denied_reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_denied_reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_denied_reservations_aggregate_order_by' }
    );
  },
  get stats_denied_reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.stats_denied_reservations_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_denied_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_denied_reservations_arr_rel_insert_input' }
    );
  },
  get stats_denied_reservations_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_avg_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_avg_fields,
      }
    );
  },
  get stats_denied_reservations_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_avg_order_by' }
    );
  },
  get stats_denied_reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_denied_reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.stats_denied_reservations_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_denied_reservations_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_denied_reservations_bool_exp' }
    );
  },
  get stats_denied_reservations_constraint() {
    return new EnumNode({ name: 'stats_denied_reservations_constraint' });
  },
  get stats_denied_reservations_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_denied_reservations_inc_input' }
    );
  },
  get stats_denied_reservations_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_denied_reservations_insert_input' }
    );
  },
  get stats_denied_reservations_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_max_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_max_fields,
      }
    );
  },
  get stats_denied_reservations_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_max_order_by' }
    );
  },
  get stats_denied_reservations_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_min_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_min_fields,
      }
    );
  },
  get stats_denied_reservations_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_min_order_by' }
    );
  },
  get stats_denied_reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_denied_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_denied_reservations_mutation_response',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_mutation_response,
      }
    );
  },
  get stats_denied_reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.stats_denied_reservations_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_denied_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_denied_reservations_obj_rel_insert_input' }
    );
  },
  get stats_denied_reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.stats_denied_reservations_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_denied_reservations_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.stats_denied_reservations_bool_exp,
            true
          );
        },
      },
      { name: 'stats_denied_reservations_on_conflict' }
    );
  },
  get stats_denied_reservations_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_order_by' }
    );
  },
  get stats_denied_reservations_select_column() {
    return new EnumNode({ name: 'stats_denied_reservations_select_column' });
  },
  get stats_denied_reservations_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_denied_reservations_set_input' }
    );
  },
  get stats_denied_reservations_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_stddev_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_stddev_fields,
      }
    );
  },
  get stats_denied_reservations_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_stddev_order_by' }
    );
  },
  get stats_denied_reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_stddev_pop_fields,
      }
    );
  },
  get stats_denied_reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_stddev_pop_order_by' }
    );
  },
  get stats_denied_reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_stddev_samp_fields,
      }
    );
  },
  get stats_denied_reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_stddev_samp_order_by' }
    );
  },
  get stats_denied_reservations_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_sum_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_sum_fields,
      }
    );
  },
  get stats_denied_reservations_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_sum_order_by' }
    );
  },
  get stats_denied_reservations_update_column() {
    return new EnumNode({ name: 'stats_denied_reservations_update_column' });
  },
  get stats_denied_reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_var_pop_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_var_pop_fields,
      }
    );
  },
  get stats_denied_reservations_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_var_pop_order_by' }
    );
  },
  get stats_denied_reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_var_samp_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_var_samp_fields,
      }
    );
  },
  get stats_denied_reservations_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_var_samp_order_by' }
    );
  },
  get stats_denied_reservations_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_denied_reservations_variance_fields',
        extension: ((extensions as any) || {})
          .stats_denied_reservations_variance_fields,
      }
    );
  },
  get stats_denied_reservations_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_denied_reservations_variance_order_by' }
    );
  },
  get stats_items() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_items',
        extension: ((extensions as any) || {}).stats_items,
      }
    );
  },
  get stats_items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_items_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_items_aggregate',
        extension: ((extensions as any) || {}).stats_items_aggregate,
      }
    );
  },
  get stats_items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.stats_items_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.stats_items_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.stats_items_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.stats_items_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_items_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.stats_items_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_items_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_items_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_items_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_items_aggregate_fields',
        extension: ((extensions as any) || {}).stats_items_aggregate_fields,
      }
    );
  },
  get stats_items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.stats_items_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.stats_items_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.stats_items_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.stats_items_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_items_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_items_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.stats_items_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.stats_items_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.stats_items_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.stats_items_variance_order_by, true);
        },
      },
      { name: 'stats_items_aggregate_order_by' }
    );
  },
  get stats_items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.stats_items_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.stats_items_on_conflict, true);
        },
      },
      { name: 'stats_items_arr_rel_insert_input' }
    );
  },
  get stats_items_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_avg_fields',
        extension: ((extensions as any) || {}).stats_items_avg_fields,
      }
    );
  },
  get stats_items_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_avg_order_by' }
    );
  },
  get stats_items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.stats_items_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_items_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_items_bool_exp' }
    );
  },
  get stats_items_constraint() {
    return new EnumNode({ name: 'stats_items_constraint' });
  },
  get stats_items_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_items_inc_input' }
    );
  },
  get stats_items_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_items_insert_input' }
    );
  },
  get stats_items_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_items_max_fields',
        extension: ((extensions as any) || {}).stats_items_max_fields,
      }
    );
  },
  get stats_items_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_max_order_by' }
    );
  },
  get stats_items_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_items_min_fields',
        extension: ((extensions as any) || {}).stats_items_min_fields,
      }
    );
  },
  get stats_items_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_min_order_by' }
    );
  },
  get stats_items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_items_mutation_response',
        extension: ((extensions as any) || {}).stats_items_mutation_response,
      }
    );
  },
  get stats_items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.stats_items_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.stats_items_on_conflict, true);
        },
      },
      { name: 'stats_items_obj_rel_insert_input' }
    );
  },
  get stats_items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.stats_items_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.stats_items_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.stats_items_bool_exp, true);
        },
      },
      { name: 'stats_items_on_conflict' }
    );
  },
  get stats_items_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_order_by' }
    );
  },
  get stats_items_select_column() {
    return new EnumNode({ name: 'stats_items_select_column' });
  },
  get stats_items_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_items_set_input' }
    );
  },
  get stats_items_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_stddev_fields',
        extension: ((extensions as any) || {}).stats_items_stddev_fields,
      }
    );
  },
  get stats_items_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_stddev_order_by' }
    );
  },
  get stats_items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_stddev_pop_fields',
        extension: ((extensions as any) || {}).stats_items_stddev_pop_fields,
      }
    );
  },
  get stats_items_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_stddev_pop_order_by' }
    );
  },
  get stats_items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_stddev_samp_fields',
        extension: ((extensions as any) || {}).stats_items_stddev_samp_fields,
      }
    );
  },
  get stats_items_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_stddev_samp_order_by' }
    );
  },
  get stats_items_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_items_sum_fields',
        extension: ((extensions as any) || {}).stats_items_sum_fields,
      }
    );
  },
  get stats_items_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_sum_order_by' }
    );
  },
  get stats_items_update_column() {
    return new EnumNode({ name: 'stats_items_update_column' });
  },
  get stats_items_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_var_pop_fields',
        extension: ((extensions as any) || {}).stats_items_var_pop_fields,
      }
    );
  },
  get stats_items_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_var_pop_order_by' }
    );
  },
  get stats_items_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_var_samp_fields',
        extension: ((extensions as any) || {}).stats_items_var_samp_fields,
      }
    );
  },
  get stats_items_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_var_samp_order_by' }
    );
  },
  get stats_items_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_items_variance_fields',
        extension: ((extensions as any) || {}).stats_items_variance_fields,
      }
    );
  },
  get stats_items_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_items_variance_order_by' }
    );
  },
  get stats_requested_reservations() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations',
        extension: ((extensions as any) || {}).stats_requested_reservations,
      }
    );
  },
  get stats_requested_reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_requested_reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_requested_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_requested_reservations_aggregate',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_aggregate,
      }
    );
  },
  get stats_requested_reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_requested_reservations_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_requested_reservations_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_requested_reservations_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_requested_reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_requested_reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_requested_reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_requested_reservations_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_requested_reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_requested_reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_requested_reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_requested_reservations_aggregate_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_aggregate_fields,
      }
    );
  },
  get stats_requested_reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.stats_requested_reservations_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.stats_requested_reservations_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.stats_requested_reservations_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_requested_reservations_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_requested_reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_requested_reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.stats_requested_reservations_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_requested_reservations_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_requested_reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_requested_reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_requested_reservations_aggregate_order_by' }
    );
  },
  get stats_requested_reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_requested_reservations_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_requested_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_requested_reservations_arr_rel_insert_input' }
    );
  },
  get stats_requested_reservations_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_avg_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_avg_fields,
      }
    );
  },
  get stats_requested_reservations_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_avg_order_by' }
    );
  },
  get stats_requested_reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_requested_reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.stats_requested_reservations_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_requested_reservations_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_requested_reservations_bool_exp' }
    );
  },
  get stats_requested_reservations_constraint() {
    return new EnumNode({ name: 'stats_requested_reservations_constraint' });
  },
  get stats_requested_reservations_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_requested_reservations_inc_input' }
    );
  },
  get stats_requested_reservations_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_requested_reservations_insert_input' }
    );
  },
  get stats_requested_reservations_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_max_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_max_fields,
      }
    );
  },
  get stats_requested_reservations_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_max_order_by' }
    );
  },
  get stats_requested_reservations_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_min_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_min_fields,
      }
    );
  },
  get stats_requested_reservations_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_min_order_by' }
    );
  },
  get stats_requested_reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_requested_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_requested_reservations_mutation_response',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_mutation_response,
      }
    );
  },
  get stats_requested_reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.stats_requested_reservations_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_requested_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_requested_reservations_obj_rel_insert_input' }
    );
  },
  get stats_requested_reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.stats_requested_reservations_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_requested_reservations_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.stats_requested_reservations_bool_exp,
            true
          );
        },
      },
      { name: 'stats_requested_reservations_on_conflict' }
    );
  },
  get stats_requested_reservations_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_order_by' }
    );
  },
  get stats_requested_reservations_select_column() {
    return new EnumNode({ name: 'stats_requested_reservations_select_column' });
  },
  get stats_requested_reservations_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_requested_reservations_set_input' }
    );
  },
  get stats_requested_reservations_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_stddev_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_stddev_fields,
      }
    );
  },
  get stats_requested_reservations_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_stddev_order_by' }
    );
  },
  get stats_requested_reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_stddev_pop_fields,
      }
    );
  },
  get stats_requested_reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_stddev_pop_order_by' }
    );
  },
  get stats_requested_reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_stddev_samp_fields,
      }
    );
  },
  get stats_requested_reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_stddev_samp_order_by' }
    );
  },
  get stats_requested_reservations_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_sum_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_sum_fields,
      }
    );
  },
  get stats_requested_reservations_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_sum_order_by' }
    );
  },
  get stats_requested_reservations_update_column() {
    return new EnumNode({ name: 'stats_requested_reservations_update_column' });
  },
  get stats_requested_reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_var_pop_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_var_pop_fields,
      }
    );
  },
  get stats_requested_reservations_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_var_pop_order_by' }
    );
  },
  get stats_requested_reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_var_samp_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_var_samp_fields,
      }
    );
  },
  get stats_requested_reservations_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_var_samp_order_by' }
    );
  },
  get stats_requested_reservations_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_requested_reservations_variance_fields',
        extension: ((extensions as any) || {})
          .stats_requested_reservations_variance_fields,
      }
    );
  },
  get stats_requested_reservations_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_requested_reservations_variance_order_by' }
    );
  },
  get stats_returned_reservations() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations',
        extension: ((extensions as any) || {}).stats_returned_reservations,
      }
    );
  },
  get stats_returned_reservations_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_returned_reservations_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_returned_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_returned_reservations_aggregate',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_aggregate,
      }
    );
  },
  get stats_returned_reservations_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_returned_reservations_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_returned_reservations_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_returned_reservations_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_returned_reservations_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_returned_reservations_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_returned_reservations_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_returned_reservations_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_returned_reservations_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_returned_reservations_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_returned_reservations_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_returned_reservations_aggregate_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_aggregate_fields,
      }
    );
  },
  get stats_returned_reservations_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.stats_returned_reservations_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.stats_returned_reservations_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.stats_returned_reservations_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_returned_reservations_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_returned_reservations_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_returned_reservations_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.stats_returned_reservations_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_returned_reservations_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_returned_reservations_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_returned_reservations_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_returned_reservations_aggregate_order_by' }
    );
  },
  get stats_returned_reservations_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_returned_reservations_insert_input,
              false
            ),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_returned_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_returned_reservations_arr_rel_insert_input' }
    );
  },
  get stats_returned_reservations_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_avg_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_avg_fields,
      }
    );
  },
  get stats_returned_reservations_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_avg_order_by' }
    );
  },
  get stats_returned_reservations_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_returned_reservations_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.stats_returned_reservations_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_returned_reservations_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'stats_returned_reservations_bool_exp' }
    );
  },
  get stats_returned_reservations_constraint() {
    return new EnumNode({ name: 'stats_returned_reservations_constraint' });
  },
  get stats_returned_reservations_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_returned_reservations_inc_input' }
    );
  },
  get stats_returned_reservations_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_returned_reservations_insert_input' }
    );
  },
  get stats_returned_reservations_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_max_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_max_fields,
      }
    );
  },
  get stats_returned_reservations_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_max_order_by' }
    );
  },
  get stats_returned_reservations_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_min_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_min_fields,
      }
    );
  },
  get stats_returned_reservations_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_min_order_by' }
    );
  },
  get stats_returned_reservations_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_returned_reservations, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_returned_reservations_mutation_response',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_mutation_response,
      }
    );
  },
  get stats_returned_reservations_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.stats_returned_reservations_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.stats_returned_reservations_on_conflict,
            true
          );
        },
      },
      { name: 'stats_returned_reservations_obj_rel_insert_input' }
    );
  },
  get stats_returned_reservations_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.stats_returned_reservations_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(
              schema.stats_returned_reservations_update_column,
              false
            ),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.stats_returned_reservations_bool_exp,
            true
          );
        },
      },
      { name: 'stats_returned_reservations_on_conflict' }
    );
  },
  get stats_returned_reservations_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_order_by' }
    );
  },
  get stats_returned_reservations_select_column() {
    return new EnumNode({ name: 'stats_returned_reservations_select_column' });
  },
  get stats_returned_reservations_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_returned_reservations_set_input' }
    );
  },
  get stats_returned_reservations_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_stddev_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_stddev_fields,
      }
    );
  },
  get stats_returned_reservations_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_stddev_order_by' }
    );
  },
  get stats_returned_reservations_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_stddev_pop_fields,
      }
    );
  },
  get stats_returned_reservations_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_stddev_pop_order_by' }
    );
  },
  get stats_returned_reservations_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_stddev_samp_fields,
      }
    );
  },
  get stats_returned_reservations_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_stddev_samp_order_by' }
    );
  },
  get stats_returned_reservations_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_sum_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_sum_fields,
      }
    );
  },
  get stats_returned_reservations_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_sum_order_by' }
    );
  },
  get stats_returned_reservations_update_column() {
    return new EnumNode({ name: 'stats_returned_reservations_update_column' });
  },
  get stats_returned_reservations_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_var_pop_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_var_pop_fields,
      }
    );
  },
  get stats_returned_reservations_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_var_pop_order_by' }
    );
  },
  get stats_returned_reservations_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_var_samp_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_var_samp_fields,
      }
    );
  },
  get stats_returned_reservations_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_var_samp_order_by' }
    );
  },
  get stats_returned_reservations_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_returned_reservations_variance_fields',
        extension: ((extensions as any) || {})
          .stats_returned_reservations_variance_fields,
      }
    );
  },
  get stats_returned_reservations_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_returned_reservations_variance_order_by' }
    );
  },
  get stats_transfers() {
    return new ObjectNode(
      {
        get daily_statistic() {
          return new FieldNode(schema.daily_statistics, undefined, true);
        },
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get transfers_v2() {
          return new FieldNode(schema.transfers_v2, undefined, true);
        },
      },
      {
        name: 'stats_transfers',
        extension: ((extensions as any) || {}).stats_transfers,
      }
    );
  },
  get stats_transfers_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stats_transfers_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stats_transfers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_transfers_aggregate',
        extension: ((extensions as any) || {}).stats_transfers_aggregate,
      }
    );
  },
  get stats_transfers_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.stats_transfers_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stats_transfers_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stats_transfers_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.stats_transfers_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.stats_transfers_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.stats_transfers_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.stats_transfers_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.stats_transfers_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.stats_transfers_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.stats_transfers_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stats_transfers_aggregate_fields',
        extension: ((extensions as any) || {}).stats_transfers_aggregate_fields,
      }
    );
  },
  get stats_transfers_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.stats_transfers_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.stats_transfers_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.stats_transfers_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.stats_transfers_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.stats_transfers_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.stats_transfers_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.stats_transfers_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.stats_transfers_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.stats_transfers_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.stats_transfers_variance_order_by,
            true
          );
        },
      },
      { name: 'stats_transfers_aggregate_order_by' }
    );
  },
  get stats_transfers_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.stats_transfers_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.stats_transfers_on_conflict, true);
        },
      },
      { name: 'stats_transfers_arr_rel_insert_input' }
    );
  },
  get stats_transfers_avg_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_avg_fields',
        extension: ((extensions as any) || {}).stats_transfers_avg_fields,
      }
    );
  },
  get stats_transfers_avg_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_avg_order_by' }
    );
  },
  get stats_transfers_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stats_transfers_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.stats_transfers_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stats_transfers_bool_exp, true),
            true
          );
        },
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get transfers_v2() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
      },
      { name: 'stats_transfers_bool_exp' }
    );
  },
  get stats_transfers_constraint() {
    return new EnumNode({ name: 'stats_transfers_constraint' });
  },
  get stats_transfers_inc_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_transfers_inc_input' }
    );
  },
  get stats_transfers_insert_input() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(
            schema.daily_statistics_obj_rel_insert_input,
            true
          );
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get transfers_v2() {
          return new InputNodeField(
            schema.transfers_v2_obj_rel_insert_input,
            true
          );
        },
      },
      { name: 'stats_transfers_insert_input' }
    );
  },
  get stats_transfers_max_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_transfers_max_fields',
        extension: ((extensions as any) || {}).stats_transfers_max_fields,
      }
    );
  },
  get stats_transfers_max_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_max_order_by' }
    );
  },
  get stats_transfers_min_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_transfers_min_fields',
        extension: ((extensions as any) || {}).stats_transfers_min_fields,
      }
    );
  },
  get stats_transfers_min_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_min_order_by' }
    );
  },
  get stats_transfers_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stats_transfers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stats_transfers_mutation_response',
        extension: ((extensions as any) || {})
          .stats_transfers_mutation_response,
      }
    );
  },
  get stats_transfers_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.stats_transfers_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.stats_transfers_on_conflict, true);
        },
      },
      { name: 'stats_transfers_obj_rel_insert_input' }
    );
  },
  get stats_transfers_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.stats_transfers_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.stats_transfers_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.stats_transfers_bool_exp, true);
        },
      },
      { name: 'stats_transfers_on_conflict' }
    );
  },
  get stats_transfers_order_by() {
    return new InputNode(
      {
        get daily_statistic() {
          return new InputNodeField(schema.daily_statistics_order_by, true);
        },
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_v2() {
          return new InputNodeField(schema.transfers_v2_order_by, true);
        },
      },
      { name: 'stats_transfers_order_by' }
    );
  },
  get stats_transfers_select_column() {
    return new EnumNode({ name: 'stats_transfers_select_column' });
  },
  get stats_transfers_set_input() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'stats_transfers_set_input' }
    );
  },
  get stats_transfers_stddev_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_stddev_fields',
        extension: ((extensions as any) || {}).stats_transfers_stddev_fields,
      }
    );
  },
  get stats_transfers_stddev_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_stddev_order_by' }
    );
  },
  get stats_transfers_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .stats_transfers_stddev_pop_fields,
      }
    );
  },
  get stats_transfers_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_stddev_pop_order_by' }
    );
  },
  get stats_transfers_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .stats_transfers_stddev_samp_fields,
      }
    );
  },
  get stats_transfers_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_stddev_samp_order_by' }
    );
  },
  get stats_transfers_sum_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'stats_transfers_sum_fields',
        extension: ((extensions as any) || {}).stats_transfers_sum_fields,
      }
    );
  },
  get stats_transfers_sum_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_sum_order_by' }
    );
  },
  get stats_transfers_update_column() {
    return new EnumNode({ name: 'stats_transfers_update_column' });
  },
  get stats_transfers_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_var_pop_fields',
        extension: ((extensions as any) || {}).stats_transfers_var_pop_fields,
      }
    );
  },
  get stats_transfers_var_pop_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_var_pop_order_by' }
    );
  },
  get stats_transfers_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_var_samp_fields',
        extension: ((extensions as any) || {}).stats_transfers_var_samp_fields,
      }
    );
  },
  get stats_transfers_var_samp_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_var_samp_order_by' }
    );
  },
  get stats_transfers_variance_fields() {
    return new ObjectNode(
      {
        get daily_statistic_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'stats_transfers_variance_fields',
        extension: ((extensions as any) || {}).stats_transfers_variance_fields,
      }
    );
  },
  get stats_transfers_variance_order_by() {
    return new InputNode(
      {
        get daily_statistic_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stats_transfers_variance_order_by' }
    );
  },
  get stripe_events() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'stripe_events',
        extension: ((extensions as any) || {}).stripe_events,
      }
    );
  },
  get stripe_events_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.stripe_events_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.stripe_events, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stripe_events_aggregate',
        extension: ((extensions as any) || {}).stripe_events_aggregate,
      }
    );
  },
  get stripe_events_aggregate_fields() {
    return new ObjectNode(
      {
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.stripe_events_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.stripe_events_min_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'stripe_events_aggregate_fields',
        extension: ((extensions as any) || {}).stripe_events_aggregate_fields,
      }
    );
  },
  get stripe_events_aggregate_order_by() {
    return new InputNode(
      {
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.stripe_events_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.stripe_events_min_order_by, true);
        },
      },
      { name: 'stripe_events_aggregate_order_by' }
    );
  },
  get stripe_events_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.stripe_events_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.stripe_events_on_conflict, true);
        },
      },
      { name: 'stripe_events_arr_rel_insert_input' }
    );
  },
  get stripe_events_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.stripe_events_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.stripe_events_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.stripe_events_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'stripe_events_bool_exp' }
    );
  },
  get stripe_events_constraint() {
    return new EnumNode({ name: 'stripe_events_constraint' });
  },
  get stripe_events_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'stripe_events_insert_input' }
    );
  },
  get stripe_events_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'stripe_events_max_fields',
        extension: ((extensions as any) || {}).stripe_events_max_fields,
      }
    );
  },
  get stripe_events_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stripe_events_max_order_by' }
    );
  },
  get stripe_events_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'stripe_events_min_fields',
        extension: ((extensions as any) || {}).stripe_events_min_fields,
      }
    );
  },
  get stripe_events_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stripe_events_min_order_by' }
    );
  },
  get stripe_events_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.stripe_events, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'stripe_events_mutation_response',
        extension: ((extensions as any) || {}).stripe_events_mutation_response,
      }
    );
  },
  get stripe_events_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.stripe_events_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.stripe_events_on_conflict, true);
        },
      },
      { name: 'stripe_events_obj_rel_insert_input' }
    );
  },
  get stripe_events_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.stripe_events_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.stripe_events_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.stripe_events_bool_exp, true);
        },
      },
      { name: 'stripe_events_on_conflict' }
    );
  },
  get stripe_events_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'stripe_events_order_by' }
    );
  },
  get stripe_events_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, false);
        },
      },
      { name: 'stripe_events_pk_columns_input' }
    );
  },
  get stripe_events_select_column() {
    return new EnumNode({ name: 'stripe_events_select_column' });
  },
  get stripe_events_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.String, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'stripe_events_set_input' }
    );
  },
  get stripe_events_update_column() {
    return new EnumNode({ name: 'stripe_events_update_column' });
  },
  get subscription_root() {
    return new ObjectNode(
      {
        get World() {
          return new FieldNode(
            new ArrayNode(schema.World, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.World_bool_exp, true);
              },
            }),
            false
          );
        },
        get World_aggregate() {
          return new FieldNode(
            schema.World_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.World_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.World_bool_exp, true);
              },
            }),
            false
          );
        },
        get World_by_pk() {
          return new FieldNode(
            schema.World,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get _Migration() {
          return new FieldNode(
            new ArrayNode(schema._Migration, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema._Migration_bool_exp, true);
              },
            }),
            false
          );
        },
        get _Migration_aggregate() {
          return new FieldNode(
            schema._Migration_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema._Migration_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema._Migration_bool_exp, true);
              },
            }),
            false
          );
        },
        get _Migration_by_pk() {
          return new FieldNode(
            schema._Migration,
            new Arguments(
              {
                get revision() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get bad_actors() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.bad_actors_bool_exp, true);
              },
            }),
            false
          );
        },
        get bad_actors_aggregate() {
          return new FieldNode(
            schema.bad_actors_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.bad_actors_bool_exp, true);
              },
            }),
            false
          );
        },
        get bad_actors_associated_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_associated_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_associated_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_associated_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_associated_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_associated_users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get bad_actors_by_pk() {
          return new FieldNode(
            schema.bad_actors,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get bad_actors_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users_by_pk() {
          return new FieldNode(
            schema.bad_actors_users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get balance_transactions() {
          return new FieldNode(
            new ArrayNode(schema.balance_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.balance_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get balance_transactions_aggregate() {
          return new FieldNode(
            schema.balance_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.balance_transactions_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.balance_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.balance_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get balance_transactions_by_pk() {
          return new FieldNode(
            schema.balance_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get business_cases() {
          return new FieldNode(
            new ArrayNode(schema.business_cases, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.business_cases_bool_exp, true);
              },
            }),
            false
          );
        },
        get business_cases_aggregate() {
          return new FieldNode(
            schema.business_cases_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.business_cases_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.business_cases_bool_exp, true);
              },
            }),
            false
          );
        },
        get business_cases_by_pk() {
          return new FieldNode(
            schema.business_cases,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get categories() {
          return new FieldNode(
            new ArrayNode(schema.categories, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.categories_bool_exp, true);
              },
            }),
            false
          );
        },
        get categories_aggregate() {
          return new FieldNode(
            schema.categories_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.categories_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.categories_bool_exp, true);
              },
            }),
            false
          );
        },
        get categories_by_pk() {
          return new FieldNode(
            schema.categories,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get charge_account_records() {
          return new FieldNode(
            new ArrayNode(schema.charge_account_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_account_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_account_records_aggregate() {
          return new FieldNode(
            schema.charge_account_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_account_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_account_records_by_pk() {
          return new FieldNode(
            schema.charge_account_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get charge_accounts() {
          return new FieldNode(
            new ArrayNode(schema.charge_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts_aggregate() {
          return new FieldNode(
            schema.charge_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts_by_pk() {
          return new FieldNode(
            schema.charge_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get charge_line_items() {
          return new FieldNode(
            new ArrayNode(schema.charge_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_line_items_aggregate() {
          return new FieldNode(
            schema.charge_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_line_items_by_pk() {
          return new FieldNode(
            schema.charge_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get charges() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_aggregate() {
          return new FieldNode(
            schema.charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_by_pk() {
          return new FieldNode(
            schema.charges,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get chats() {
          return new FieldNode(
            new ArrayNode(schema.chats, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.chats_bool_exp, true);
              },
            }),
            false
          );
        },
        get chats_aggregate() {
          return new FieldNode(
            schema.chats_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.chats_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.chats_bool_exp, true);
              },
            }),
            false
          );
        },
        get credit_transactions() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_by_pk() {
          return new FieldNode(
            schema.credit_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get daily_statistics() {
          return new FieldNode(
            new ArrayNode(schema.daily_statistics, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get daily_statistics_aggregate() {
          return new FieldNode(
            schema.daily_statistics_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get daily_statistics_by_pk() {
          return new FieldNode(
            schema.daily_statistics,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get dodge_fleet_orders() {
          return new FieldNode(
            new ArrayNode(schema.dodge_fleet_orders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get dodge_fleet_orders_aggregate() {
          return new FieldNode(
            schema.dodge_fleet_orders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.dodge_fleet_orders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.dodge_fleet_orders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get dodge_fleet_orders_by_pk() {
          return new FieldNode(
            schema.dodge_fleet_orders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get external_accounts() {
          return new FieldNode(
            new ArrayNode(schema.external_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get external_accounts_aggregate() {
          return new FieldNode(
            schema.external_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.external_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.external_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get external_accounts_by_pk() {
          return new FieldNode(
            schema.external_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get fluid_ledger() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_ledger_aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_ledger_by_pk() {
          return new FieldNode(
            schema.fluid_ledger,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get fluid_transactions() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_by_pk() {
          return new FieldNode(
            schema.fluid_transactions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_charge_line_items() {
          return new FieldNode(
            new ArrayNode(schema.general_charge_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charge_line_items_aggregate() {
          return new FieldNode(
            schema.general_charge_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_charge_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charge_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charge_line_items_by_pk() {
          return new FieldNode(
            schema.general_charge_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_charges() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_aggregate() {
          return new FieldNode(
            schema.general_charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_by_pk() {
          return new FieldNode(
            schema.general_charges,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_images() {
          return new FieldNode(
            new ArrayNode(schema.general_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.general_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get general_images_aggregate() {
          return new FieldNode(
            schema.general_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.general_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get general_images_by_pk() {
          return new FieldNode(
            schema.general_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_transfer_line_items() {
          return new FieldNode(
            new ArrayNode(schema.general_transfer_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfer_line_items_aggregate() {
          return new FieldNode(
            schema.general_transfer_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.general_transfer_line_items_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfer_line_items_by_pk() {
          return new FieldNode(
            schema.general_transfer_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get general_transfers() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_by_pk() {
          return new FieldNode(
            schema.general_transfers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get geography_columns() {
          return new FieldNode(
            new ArrayNode(schema.geography_columns, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geography_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get geography_columns_aggregate() {
          return new FieldNode(
            schema.geography_columns_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geography_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geography_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get geometry_columns() {
          return new FieldNode(
            new ArrayNode(schema.geometry_columns, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geometry_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get geometry_columns_aggregate() {
          return new FieldNode(
            schema.geometry_columns_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.geometry_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.geometry_columns_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get goose_db_version() {
          return new FieldNode(
            new ArrayNode(schema.goose_db_version, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.goose_db_version_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get goose_db_version_aggregate() {
          return new FieldNode(
            schema.goose_db_version_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.goose_db_version_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.goose_db_version_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get goose_db_version_by_pk() {
          return new FieldNode(
            schema.goose_db_version,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get identification_images() {
          return new FieldNode(
            new ArrayNode(schema.identification_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identification_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identification_images_aggregate() {
          return new FieldNode(
            schema.identification_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.identification_images_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identification_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identification_images_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identification_images_by_pk() {
          return new FieldNode(
            schema.identification_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get identifications() {
          return new FieldNode(
            new ArrayNode(schema.identifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identifications_aggregate() {
          return new FieldNode(
            schema.identifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identifications_by_pk() {
          return new FieldNode(
            schema.identifications,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_images() {
          return new FieldNode(
            new ArrayNode(schema.item_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_images_aggregate() {
          return new FieldNode(
            schema.item_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_images_by_pk() {
          return new FieldNode(
            schema.item_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.item_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_inspection_steps_aggregate() {
          return new FieldNode(
            schema.item_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.item_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_inspection_steps_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_inspection_steps_by_pk() {
          return new FieldNode(
            schema.item_inspection_steps,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_reviews() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_aggregate() {
          return new FieldNode(
            schema.item_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_by_pk() {
          return new FieldNode(
            schema.item_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get item_reviews_view() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_reviews_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_reviews_view_aggregate() {
          return new FieldNode(
            schema.item_reviews_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_reviews_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.item_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders_aggregate() {
          return new FieldNode(
            schema.item_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders_by_pk() {
          return new FieldNode(
            schema.item_stakeholders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get items() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_by_pk() {
          return new FieldNode(
            schema.items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get items_community_needs() {
          return new FieldNode(
            new ArrayNode(schema.items_community_needs, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items_community_needs_aggregate() {
          return new FieldNode(
            schema.items_community_needs_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.items_community_needs_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_community_needs_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.items_community_needs_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items_community_needs_by_pk() {
          return new FieldNode(
            schema.items_community_needs,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get list_items() {
          return new FieldNode(
            new ArrayNode(schema.list_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get list_items_aggregate() {
          return new FieldNode(
            schema.list_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get list_items_by_pk() {
          return new FieldNode(
            schema.list_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get locations() {
          return new FieldNode(
            new ArrayNode(schema.locations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, true);
              },
            }),
            false
          );
        },
        get locations_aggregate() {
          return new FieldNode(
            schema.locations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, true);
              },
            }),
            false
          );
        },
        get locations_by_pk() {
          return new FieldNode(
            schema.locations,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get markets() {
          return new FieldNode(
            new ArrayNode(schema.markets, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, true);
              },
            }),
            false
          );
        },
        get markets_aggregate() {
          return new FieldNode(
            schema.markets_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.markets_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.markets_bool_exp, true);
              },
            }),
            false
          );
        },
        get markets_by_pk() {
          return new FieldNode(
            schema.markets,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get messages() {
          return new FieldNode(
            new ArrayNode(schema.messages, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messages_aggregate() {
          return new FieldNode(
            schema.messages_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messages_by_pk() {
          return new FieldNode(
            schema.messages,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get neighborhoods() {
          return new FieldNode(
            new ArrayNode(schema.neighborhoods, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.neighborhoods_bool_exp, true);
              },
            }),
            false
          );
        },
        get neighborhoods_aggregate() {
          return new FieldNode(
            schema.neighborhoods_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.neighborhoods_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.neighborhoods_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications() {
          return new FieldNode(
            new ArrayNode(schema.notifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications_aggregate() {
          return new FieldNode(
            schema.notifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications_by_pk() {
          return new FieldNode(
            schema.notifications,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get payment_accounts() {
          return new FieldNode(
            new ArrayNode(schema.payment_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payment_accounts_aggregate() {
          return new FieldNode(
            schema.payment_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payment_accounts_by_pk() {
          return new FieldNode(
            schema.payment_accounts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get payouts() {
          return new FieldNode(
            new ArrayNode(schema.payouts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, true);
              },
            }),
            false
          );
        },
        get payouts_aggregate() {
          return new FieldNode(
            schema.payouts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payouts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.payouts_bool_exp, true);
              },
            }),
            false
          );
        },
        get payouts_by_pk() {
          return new FieldNode(
            schema.payouts,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get permissions() {
          return new FieldNode(
            new ArrayNode(schema.permissions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.permissions_bool_exp, true);
              },
            }),
            false
          );
        },
        get permissions_aggregate() {
          return new FieldNode(
            schema.permissions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.permissions_bool_exp, true);
              },
            }),
            false
          );
        },
        get permissions_by_pk() {
          return new FieldNode(
            schema.permissions,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get pg_stat_statements() {
          return new FieldNode(
            new ArrayNode(schema.pg_stat_statements, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.pg_stat_statements_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get pg_stat_statements_aggregate() {
          return new FieldNode(
            schema.pg_stat_statements_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.pg_stat_statements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.pg_stat_statements_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_information() {
          return new FieldNode(
            new ArrayNode(schema.phone_number_information, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.phone_number_information_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_information_aggregate() {
          return new FieldNode(
            schema.phone_number_information_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.phone_number_information_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_information_by_pk() {
          return new FieldNode(
            schema.phone_number_information,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get promo_code_uses() {
          return new FieldNode(
            new ArrayNode(schema.promo_code_uses, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_code_uses_aggregate() {
          return new FieldNode(
            schema.promo_code_uses_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_code_uses_by_pk() {
          return new FieldNode(
            schema.promo_code_uses,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get promo_codes() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.promo_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get promo_codes_aggregate() {
          return new FieldNode(
            schema.promo_codes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.promo_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get promo_codes_by_pk() {
          return new FieldNode(
            schema.promo_codes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get promo_codes_view() {
          return new FieldNode(
            new ArrayNode(schema.promo_codes_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_codes_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_codes_view_aggregate() {
          return new FieldNode(
            schema.promo_codes_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_codes_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_codes_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get raster_columns() {
          return new FieldNode(
            new ArrayNode(schema.raster_columns, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.raster_columns_bool_exp, true);
              },
            }),
            false
          );
        },
        get raster_columns_aggregate() {
          return new FieldNode(
            schema.raster_columns_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_columns_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.raster_columns_bool_exp, true);
              },
            }),
            false
          );
        },
        get raster_overviews() {
          return new FieldNode(
            new ArrayNode(schema.raster_overviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.raster_overviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get raster_overviews_aggregate() {
          return new FieldNode(
            schema.raster_overviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.raster_overviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.raster_overviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get referral_codes() {
          return new FieldNode(
            new ArrayNode(schema.referral_codes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.referral_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get referral_codes_aggregate() {
          return new FieldNode(
            schema.referral_codes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.referral_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get referral_codes_by_pk() {
          return new FieldNode(
            schema.referral_codes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get refresh_tokens() {
          return new FieldNode(
            new ArrayNode(schema.refresh_tokens, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refresh_tokens_bool_exp, true);
              },
            }),
            false
          );
        },
        get refresh_tokens_aggregate() {
          return new FieldNode(
            schema.refresh_tokens_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refresh_tokens_bool_exp, true);
              },
            }),
            false
          );
        },
        get refresh_tokens_by_pk() {
          return new FieldNode(
            schema.refresh_tokens,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.uuid, false);
                },
              },
              true
            ),
            true
          );
        },
        get refunds() {
          return new FieldNode(
            new ArrayNode(schema.refunds, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get refunds_aggregate() {
          return new FieldNode(
            schema.refunds_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refunds_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refunds_bool_exp, true);
              },
            }),
            false
          );
        },
        get refunds_by_pk() {
          return new FieldNode(
            schema.refunds,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reimbursements() {
          return new FieldNode(
            new ArrayNode(schema.reimbursements, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements_aggregate() {
          return new FieldNode(
            schema.reimbursements_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reimbursements_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reimbursements_bool_exp, true);
              },
            }),
            false
          );
        },
        get reimbursements_by_pk() {
          return new FieldNode(
            schema.reimbursements,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_admin_approvals() {
          return new FieldNode(
            new ArrayNode(schema.reservation_admin_approvals, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_admin_approvals_aggregate() {
          return new FieldNode(
            schema.reservation_admin_approvals_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_admin_approvals_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_admin_approvals_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_admin_approvals_by_pk() {
          return new FieldNode(
            schema.reservation_admin_approvals,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_inspection_steps() {
          return new FieldNode(
            new ArrayNode(schema.reservation_inspection_steps, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps_aggregate() {
          return new FieldNode(
            schema.reservation_inspection_steps_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_inspection_steps_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_inspection_steps_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_inspection_steps_by_pk() {
          return new FieldNode(
            schema.reservation_inspection_steps,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_reviews() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_by_pk() {
          return new FieldNode(
            schema.reservation_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservation_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.reservation_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders_aggregate() {
          return new FieldNode(
            schema.reservation_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders_by_pk() {
          return new FieldNode(
            schema.reservation_stakeholders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservations() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_aggregate() {
          return new FieldNode(
            schema.reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_by_pk() {
          return new FieldNode(
            schema.reservations,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get reservations_view() {
          return new FieldNode(
            new ArrayNode(schema.reservations_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservations_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservations_view_aggregate() {
          return new FieldNode(
            schema.reservations_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservations_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get sim_cards() {
          return new FieldNode(
            new ArrayNode(schema.sim_cards, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, true);
              },
            }),
            false
          );
        },
        get sim_cards_aggregate() {
          return new FieldNode(
            schema.sim_cards_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, true);
              },
            }),
            false
          );
        },
        get sim_cards_by_pk() {
          return new FieldNode(
            schema.sim_cards,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get spam_receivers() {
          return new FieldNode(
            new ArrayNode(schema.spam_receivers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_receivers_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_receivers_aggregate() {
          return new FieldNode(
            schema.spam_receivers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_receivers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_receivers_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_receivers_by_pk() {
          return new FieldNode(
            schema.spam_receivers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get spam_senders() {
          return new FieldNode(
            new ArrayNode(schema.spam_senders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_senders_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_senders_aggregate() {
          return new FieldNode(
            schema.spam_senders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spam_senders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.spam_senders_bool_exp, true);
              },
            }),
            false
          );
        },
        get spam_senders_by_pk() {
          return new FieldNode(
            schema.spam_senders,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get spatial_ref_sys() {
          return new FieldNode(
            new ArrayNode(schema.spatial_ref_sys, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get spatial_ref_sys_aggregate() {
          return new FieldNode(
            schema.spatial_ref_sys_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.spatial_ref_sys_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.spatial_ref_sys_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get spatial_ref_sys_by_pk() {
          return new FieldNode(
            schema.spatial_ref_sys,
            new Arguments(
              {
                get srid() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get stats_approved_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_approved_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_approved_reservations_aggregate() {
          return new FieldNode(
            schema.stats_approved_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_approved_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_approved_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_cancelled_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_cancelled_reservations_aggregate() {
          return new FieldNode(
            schema.stats_cancelled_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_cancelled_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_cancelled_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_completed_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_completed_reservations_aggregate() {
          return new FieldNode(
            schema.stats_completed_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_completed_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_completed_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_denied_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_denied_reservations_aggregate() {
          return new FieldNode(
            schema.stats_denied_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_denied_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_denied_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_items() {
          return new FieldNode(
            new ArrayNode(schema.stats_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_items_aggregate() {
          return new FieldNode(
            schema.stats_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stats_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get stats_requested_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_requested_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_requested_reservations_aggregate() {
          return new FieldNode(
            schema.stats_requested_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_requested_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_requested_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations() {
          return new FieldNode(
            new ArrayNode(schema.stats_returned_reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_returned_reservations_aggregate() {
          return new FieldNode(
            schema.stats_returned_reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.stats_returned_reservations_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_returned_reservations_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers() {
          return new FieldNode(
            new ArrayNode(schema.stats_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers_aggregate() {
          return new FieldNode(
            schema.stats_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stripe_events() {
          return new FieldNode(
            new ArrayNode(schema.stripe_events, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stripe_events_bool_exp, true);
              },
            }),
            false
          );
        },
        get stripe_events_aggregate() {
          return new FieldNode(
            schema.stripe_events_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stripe_events_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.stripe_events_bool_exp, true);
              },
            }),
            false
          );
        },
        get stripe_events_by_pk() {
          return new FieldNode(
            schema.stripe_events,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.String, false);
                },
              },
              true
            ),
            true
          );
        },
        get suspension_records() {
          return new FieldNode(
            new ArrayNode(schema.suspension_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get suspension_records_aggregate() {
          return new FieldNode(
            schema.suspension_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get suspension_records_by_pk() {
          return new FieldNode(
            schema.suspension_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get telematic_devices() {
          return new FieldNode(
            new ArrayNode(schema.telematic_devices, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_devices_aggregate() {
          return new FieldNode(
            schema.telematic_devices_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_devices_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_devices_by_pk() {
          return new FieldNode(
            schema.telematic_devices,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get telematic_records() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_by_pk() {
          return new FieldNode(
            schema.telematic_records,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.bigint, false);
                },
              },
              true
            ),
            true
          );
        },
        get tier_scores() {
          return new FieldNode(
            new ArrayNode(schema.tier_scores, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.tier_scores_bool_exp, true);
              },
            }),
            false
          );
        },
        get tier_scores_aggregate() {
          return new FieldNode(
            schema.tier_scores_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.tier_scores_bool_exp, true);
              },
            }),
            false
          );
        },
        get tier_scores_by_pk() {
          return new FieldNode(
            schema.tier_scores,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get time_blocks() {
          return new FieldNode(
            new ArrayNode(schema.time_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get time_blocks_aggregate() {
          return new FieldNode(
            schema.time_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.time_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get time_blocks_by_pk() {
          return new FieldNode(
            schema.time_blocks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get transfer_line_items() {
          return new FieldNode(
            new ArrayNode(schema.transfer_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get transfer_line_items_aggregate() {
          return new FieldNode(
            schema.transfer_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get transfer_line_items_by_pk() {
          return new FieldNode(
            schema.transfer_line_items,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get transfers() {
          return new FieldNode(
            new ArrayNode(schema.transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_aggregate() {
          return new FieldNode(
            schema.transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_by_pk() {
          return new FieldNode(
            schema.transfers,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get transfers_v2() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2_by_pk() {
          return new FieldNode(
            schema.transfers_v2,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get upvotes() {
          return new FieldNode(
            new ArrayNode(schema.upvotes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get upvotes_aggregate() {
          return new FieldNode(
            schema.upvotes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get upvotes_by_pk() {
          return new FieldNode(
            schema.upvotes,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_blocks() {
          return new FieldNode(
            new ArrayNode(schema.user_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_blocks_aggregate() {
          return new FieldNode(
            schema.user_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_blocks_by_pk() {
          return new FieldNode(
            schema.user_blocks,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_devices() {
          return new FieldNode(
            new ArrayNode(schema.user_devices, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_devices_aggregate() {
          return new FieldNode(
            schema.user_devices_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_devices_by_pk() {
          return new FieldNode(
            schema.user_devices,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_images() {
          return new FieldNode(
            new ArrayNode(schema.user_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_images_aggregate() {
          return new FieldNode(
            schema.user_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_images_by_pk() {
          return new FieldNode(
            schema.user_images,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_life_cycle_view() {
          return new FieldNode(
            new ArrayNode(schema.user_life_cycle_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.user_life_cycle_view_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_life_cycle_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_life_cycle_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_life_cycle_view_aggregate() {
          return new FieldNode(
            schema.user_life_cycle_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.user_life_cycle_view_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_life_cycle_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_life_cycle_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_lists() {
          return new FieldNode(
            new ArrayNode(schema.user_lists, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_lists_aggregate() {
          return new FieldNode(
            schema.user_lists_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_lists_by_pk() {
          return new FieldNode(
            schema.user_lists,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get user_messages_view() {
          return new FieldNode(
            new ArrayNode(schema.user_messages_view, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_messages_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_messages_view_aggregate() {
          return new FieldNode(
            schema.user_messages_view_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_messages_view_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_metadata() {
          return new FieldNode(
            new ArrayNode(schema.user_metadata, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_metadata_aggregate() {
          return new FieldNode(
            schema.user_metadata_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_permissions() {
          return new FieldNode(
            new ArrayNode(schema.user_permissions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_permissions_aggregate() {
          return new FieldNode(
            schema.user_permissions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_reviews() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_reviews_aggregate() {
          return new FieldNode(
            schema.user_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_reviews_by_pk() {
          return new FieldNode(
            schema.user_reviews,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get users() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_aggregate() {
          return new FieldNode(
            schema.users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.users_bool_exp, true);
              },
            }),
            false
          );
        },
        get users_by_pk() {
          return new FieldNode(
            schema.users,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
        get vehicle_insurance_rates() {
          return new FieldNode(
            new ArrayNode(schema.vehicle_insurance_rates, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.vehicle_insurance_rates_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.vehicle_insurance_rates_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get vehicle_insurance_rates_aggregate() {
          return new FieldNode(
            schema.vehicle_insurance_rates_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.vehicle_insurance_rates_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.vehicle_insurance_rates_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.vehicle_insurance_rates_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get vehicle_insurance_rates_by_pk() {
          return new FieldNode(
            schema.vehicle_insurance_rates,
            new Arguments(
              {
                get id() {
                  return new ArgumentsField(schema.Int, false);
                },
              },
              true
            ),
            true
          );
        },
      },
      {
        name: 'subscription_root',
        extension: ((extensions as any) || {}).subscription_root,
      }
    );
  },
  get suspension_records() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'suspension_records',
        extension: ((extensions as any) || {}).suspension_records,
      }
    );
  },
  get suspension_records_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.suspension_records_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.suspension_records, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'suspension_records_aggregate',
        extension: ((extensions as any) || {}).suspension_records_aggregate,
      }
    );
  },
  get suspension_records_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.suspension_records_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.suspension_records_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.suspension_records_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.suspension_records_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.suspension_records_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.suspension_records_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.suspension_records_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.suspension_records_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.suspension_records_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.suspension_records_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'suspension_records_aggregate_fields',
        extension: ((extensions as any) || {})
          .suspension_records_aggregate_fields,
      }
    );
  },
  get suspension_records_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.suspension_records_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.suspension_records_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.suspension_records_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.suspension_records_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.suspension_records_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.suspension_records_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.suspension_records_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.suspension_records_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.suspension_records_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.suspension_records_variance_order_by,
            true
          );
        },
      },
      { name: 'suspension_records_aggregate_order_by' }
    );
  },
  get suspension_records_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.suspension_records_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.suspension_records_on_conflict,
            true
          );
        },
      },
      { name: 'suspension_records_arr_rel_insert_input' }
    );
  },
  get suspension_records_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_avg_fields',
        extension: ((extensions as any) || {}).suspension_records_avg_fields,
      }
    );
  },
  get suspension_records_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_avg_order_by' }
    );
  },
  get suspension_records_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.suspension_records_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.suspension_records_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.suspension_records_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reason() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
      },
      { name: 'suspension_records_bool_exp' }
    );
  },
  get suspension_records_constraint() {
    return new EnumNode({ name: 'suspension_records_constraint' });
  },
  get suspension_records_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'suspension_records_inc_input' }
    );
  },
  get suspension_records_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get reason() {
          return new InputNodeField(schema.String, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'suspension_records_insert_input' }
    );
  },
  get suspension_records_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'suspension_records_max_fields',
        extension: ((extensions as any) || {}).suspension_records_max_fields,
      }
    );
  },
  get suspension_records_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_max_order_by' }
    );
  },
  get suspension_records_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reason() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'suspension_records_min_fields',
        extension: ((extensions as any) || {}).suspension_records_min_fields,
      }
    );
  },
  get suspension_records_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_min_order_by' }
    );
  },
  get suspension_records_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.suspension_records, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'suspension_records_mutation_response',
        extension: ((extensions as any) || {})
          .suspension_records_mutation_response,
      }
    );
  },
  get suspension_records_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.suspension_records_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.suspension_records_on_conflict,
            true
          );
        },
      },
      { name: 'suspension_records_obj_rel_insert_input' }
    );
  },
  get suspension_records_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.suspension_records_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.suspension_records_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.suspension_records_bool_exp, true);
        },
      },
      { name: 'suspension_records_on_conflict' }
    );
  },
  get suspension_records_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get reason() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_order_by' }
    );
  },
  get suspension_records_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'suspension_records_pk_columns_input' }
    );
  },
  get suspension_records_select_column() {
    return new EnumNode({ name: 'suspension_records_select_column' });
  },
  get suspension_records_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get notes() {
          return new InputNodeField(schema.String, true);
        },
        get reason() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'suspension_records_set_input' }
    );
  },
  get suspension_records_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_stddev_fields',
        extension: ((extensions as any) || {}).suspension_records_stddev_fields,
      }
    );
  },
  get suspension_records_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_stddev_order_by' }
    );
  },
  get suspension_records_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .suspension_records_stddev_pop_fields,
      }
    );
  },
  get suspension_records_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_stddev_pop_order_by' }
    );
  },
  get suspension_records_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .suspension_records_stddev_samp_fields,
      }
    );
  },
  get suspension_records_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_stddev_samp_order_by' }
    );
  },
  get suspension_records_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'suspension_records_sum_fields',
        extension: ((extensions as any) || {}).suspension_records_sum_fields,
      }
    );
  },
  get suspension_records_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_sum_order_by' }
    );
  },
  get suspension_records_update_column() {
    return new EnumNode({ name: 'suspension_records_update_column' });
  },
  get suspension_records_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_var_pop_fields',
        extension: ((extensions as any) || {})
          .suspension_records_var_pop_fields,
      }
    );
  },
  get suspension_records_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_var_pop_order_by' }
    );
  },
  get suspension_records_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_var_samp_fields',
        extension: ((extensions as any) || {})
          .suspension_records_var_samp_fields,
      }
    );
  },
  get suspension_records_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_var_samp_order_by' }
    );
  },
  get suspension_records_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'suspension_records_variance_fields',
        extension: ((extensions as any) || {})
          .suspension_records_variance_fields,
      }
    );
  },
  get suspension_records_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'suspension_records_variance_order_by' }
    );
  },
  get telematic_devices() {
    return new ObjectNode(
      {
        get battery_sensing_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get configuration() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get device_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get door_lock_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get door_sensing_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get engine_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fuel_sensing_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get ignition_sensing_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get installed() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ismi() {
          return new FieldNode(schema.String, undefined, true);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get locking_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get mobilizing_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get model() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sim_cards() {
          return new FieldNode(
            new ArrayNode(schema.sim_cards, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, true);
              },
            }),
            false
          );
        },
        get sim_cards_aggregate() {
          return new FieldNode(
            schema.sim_cards_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.sim_cards_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.sim_cards_bool_exp, true);
              },
            }),
            false
          );
        },
        get sim_provider_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get telematic_records() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'telematic_devices',
        extension: ((extensions as any) || {}).telematic_devices,
      }
    );
  },
  get telematic_devices_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.telematic_devices_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.telematic_devices, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'telematic_devices_aggregate',
        extension: ((extensions as any) || {}).telematic_devices_aggregate,
      }
    );
  },
  get telematic_devices_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.telematic_devices_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_devices_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.telematic_devices_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.telematic_devices_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.telematic_devices_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.telematic_devices_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.telematic_devices_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.telematic_devices_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.telematic_devices_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.telematic_devices_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.telematic_devices_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'telematic_devices_aggregate_fields',
        extension: ((extensions as any) || {})
          .telematic_devices_aggregate_fields,
      }
    );
  },
  get telematic_devices_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.telematic_devices_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.telematic_devices_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.telematic_devices_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.telematic_devices_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.telematic_devices_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.telematic_devices_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.telematic_devices_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.telematic_devices_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.telematic_devices_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.telematic_devices_variance_order_by,
            true
          );
        },
      },
      { name: 'telematic_devices_aggregate_order_by' }
    );
  },
  get telematic_devices_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_devices_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.telematic_devices_on_conflict, true);
        },
      },
      { name: 'telematic_devices_arr_rel_insert_input' }
    );
  },
  get telematic_devices_avg_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_avg_fields',
        extension: ((extensions as any) || {}).telematic_devices_avg_fields,
      }
    );
  },
  get telematic_devices_avg_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_avg_order_by' }
    );
  },
  get telematic_devices_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_devices_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.telematic_devices_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_devices_bool_exp, true),
            true
          );
        },
        get battery_sensing_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get configuration() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get dedicated() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get device_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get door_lock_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get door_sensing_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get engine_status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fuel_sensing_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get ignition_sensing_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get installed() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get ismi() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get locking_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get mobilizing_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get model() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get sim_cards() {
          return new InputNodeField(schema.sim_cards_bool_exp, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get telematic_records() {
          return new InputNodeField(schema.telematic_records_bool_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'telematic_devices_bool_exp' }
    );
  },
  get telematic_devices_constraint() {
    return new EnumNode({ name: 'telematic_devices_constraint' });
  },
  get telematic_devices_inc_input() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.Int, true);
        },
        get dedicated() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get installed() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'telematic_devices_inc_input' }
    );
  },
  get telematic_devices_insert_input() {
    return new InputNode(
      {
        get battery_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get configuration() {
          return new InputNodeField(schema.Int, true);
        },
        get dedicated() {
          return new InputNodeField(schema.Int, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get device_id() {
          return new InputNodeField(schema.String, true);
        },
        get door_lock_status() {
          return new InputNodeField(schema.String, true);
        },
        get door_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get engine_status() {
          return new InputNodeField(schema.String, true);
        },
        get fuel_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get ignition_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get installed() {
          return new InputNodeField(schema.Int, true);
        },
        get ismi() {
          return new InputNodeField(schema.String, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get locking_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get mobilizing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get model() {
          return new InputNodeField(schema.String, true);
        },
        get sim_cards() {
          return new InputNodeField(
            schema.sim_cards_arr_rel_insert_input,
            true
          );
        },
        get sim_provider_id() {
          return new InputNodeField(schema.Int, true);
        },
        get telematic_records() {
          return new InputNodeField(
            schema.telematic_records_arr_rel_insert_input,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'telematic_devices_insert_input' }
    );
  },
  get telematic_devices_max_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get device_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get door_lock_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get engine_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ismi() {
          return new FieldNode(schema.String, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get model() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'telematic_devices_max_fields',
        extension: ((extensions as any) || {}).telematic_devices_max_fields,
      }
    );
  },
  get telematic_devices_max_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get door_lock_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get engine_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get ismi() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_max_order_by' }
    );
  },
  get telematic_devices_min_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get device_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get door_lock_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get engine_status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get ismi() {
          return new FieldNode(schema.String, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get model() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'telematic_devices_min_fields',
        extension: ((extensions as any) || {}).telematic_devices_min_fields,
      }
    );
  },
  get telematic_devices_min_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get door_lock_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get engine_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get ismi() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get model() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_min_order_by' }
    );
  },
  get telematic_devices_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.telematic_devices, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'telematic_devices_mutation_response',
        extension: ((extensions as any) || {})
          .telematic_devices_mutation_response,
      }
    );
  },
  get telematic_devices_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.telematic_devices_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.telematic_devices_on_conflict, true);
        },
      },
      { name: 'telematic_devices_obj_rel_insert_input' }
    );
  },
  get telematic_devices_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.telematic_devices_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_devices_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.telematic_devices_bool_exp, true);
        },
      },
      { name: 'telematic_devices_on_conflict' }
    );
  },
  get telematic_devices_order_by() {
    return new InputNode(
      {
        get battery_sensing_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get door_lock_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get door_sensing_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get engine_status() {
          return new InputNodeField(schema.order_by, true);
        },
        get fuel_sensing_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get ignition_sensing_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get ismi() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get locking_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get mobilizing_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get model() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_cards_aggregate() {
          return new InputNodeField(schema.sim_cards_aggregate_order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_records_aggregate() {
          return new InputNodeField(
            schema.telematic_records_aggregate_order_by,
            true
          );
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_order_by' }
    );
  },
  get telematic_devices_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'telematic_devices_pk_columns_input' }
    );
  },
  get telematic_devices_select_column() {
    return new EnumNode({ name: 'telematic_devices_select_column' });
  },
  get telematic_devices_set_input() {
    return new InputNode(
      {
        get battery_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get configuration() {
          return new InputNodeField(schema.Int, true);
        },
        get dedicated() {
          return new InputNodeField(schema.Int, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get device_id() {
          return new InputNodeField(schema.String, true);
        },
        get door_lock_status() {
          return new InputNodeField(schema.String, true);
        },
        get door_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get engine_status() {
          return new InputNodeField(schema.String, true);
        },
        get fuel_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get identifier() {
          return new InputNodeField(schema.String, true);
        },
        get ignition_sensing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get installed() {
          return new InputNodeField(schema.Int, true);
        },
        get ismi() {
          return new InputNodeField(schema.String, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get locking_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get mobilizing_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get model() {
          return new InputNodeField(schema.String, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.Int, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'telematic_devices_set_input' }
    );
  },
  get telematic_devices_stddev_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_stddev_fields',
        extension: ((extensions as any) || {}).telematic_devices_stddev_fields,
      }
    );
  },
  get telematic_devices_stddev_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_stddev_order_by' }
    );
  },
  get telematic_devices_stddev_pop_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .telematic_devices_stddev_pop_fields,
      }
    );
  },
  get telematic_devices_stddev_pop_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_stddev_pop_order_by' }
    );
  },
  get telematic_devices_stddev_samp_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .telematic_devices_stddev_samp_fields,
      }
    );
  },
  get telematic_devices_stddev_samp_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_stddev_samp_order_by' }
    );
  },
  get telematic_devices_sum_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'telematic_devices_sum_fields',
        extension: ((extensions as any) || {}).telematic_devices_sum_fields,
      }
    );
  },
  get telematic_devices_sum_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_sum_order_by' }
    );
  },
  get telematic_devices_update_column() {
    return new EnumNode({ name: 'telematic_devices_update_column' });
  },
  get telematic_devices_var_pop_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_var_pop_fields',
        extension: ((extensions as any) || {}).telematic_devices_var_pop_fields,
      }
    );
  },
  get telematic_devices_var_pop_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_var_pop_order_by' }
    );
  },
  get telematic_devices_var_samp_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_var_samp_fields',
        extension: ((extensions as any) || {})
          .telematic_devices_var_samp_fields,
      }
    );
  },
  get telematic_devices_var_samp_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_var_samp_order_by' }
    );
  },
  get telematic_devices_variance_fields() {
    return new ObjectNode(
      {
        get configuration() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get dedicated() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get installed() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sim_provider_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_devices_variance_fields',
        extension: ((extensions as any) || {})
          .telematic_devices_variance_fields,
      }
    );
  },
  get telematic_devices_variance_order_by() {
    return new InputNode(
      {
        get configuration() {
          return new InputNodeField(schema.order_by, true);
        },
        get dedicated() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get installed() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sim_provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_devices_variance_order_by' }
    );
  },
  get telematic_records() {
    return new ObjectNode(
      {
        get action() {
          return new FieldNode(schema.String, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get requester_notified() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get telematic_device() {
          return new FieldNode(schema.telematic_devices, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'telematic_records',
        extension: ((extensions as any) || {}).telematic_records,
      }
    );
  },
  get telematic_records_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'telematic_records_aggregate',
        extension: ((extensions as any) || {}).telematic_records_aggregate,
      }
    );
  },
  get telematic_records_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.telematic_records_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.telematic_records_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.telematic_records_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.telematic_records_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.telematic_records_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.telematic_records_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.telematic_records_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.telematic_records_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.telematic_records_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.telematic_records_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'telematic_records_aggregate_fields',
        extension: ((extensions as any) || {})
          .telematic_records_aggregate_fields,
      }
    );
  },
  get telematic_records_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.telematic_records_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.telematic_records_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.telematic_records_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.telematic_records_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.telematic_records_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.telematic_records_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.telematic_records_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.telematic_records_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.telematic_records_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.telematic_records_variance_order_by,
            true
          );
        },
      },
      { name: 'telematic_records_aggregate_order_by' }
    );
  },
  get telematic_records_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_records_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.telematic_records_on_conflict, true);
        },
      },
      { name: 'telematic_records_arr_rel_insert_input' }
    );
  },
  get telematic_records_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_avg_fields',
        extension: ((extensions as any) || {}).telematic_records_avg_fields,
      }
    );
  },
  get telematic_records_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_avg_order_by' }
    );
  },
  get telematic_records_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_records_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.telematic_records_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_records_bool_exp, true),
            true
          );
        },
        get action() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get requester_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get requester_notified() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get telematic_device() {
          return new InputNodeField(schema.telematic_devices_bool_exp, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'telematic_records_bool_exp' }
    );
  },
  get telematic_records_constraint() {
    return new EnumNode({ name: 'telematic_records_constraint' });
  },
  get telematic_records_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get requester_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint, true);
        },
      },
      { name: 'telematic_records_inc_input' }
    );
  },
  get telematic_records_insert_input() {
    return new InputNode(
      {
        get action() {
          return new InputNodeField(schema.String, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get requester_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get requester_notified() {
          return new InputNodeField(schema.Boolean, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get telematic_device() {
          return new InputNodeField(
            schema.telematic_devices_obj_rel_insert_input,
            true
          );
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'telematic_records_insert_input' }
    );
  },
  get telematic_records_max_fields() {
    return new ObjectNode(
      {
        get action() {
          return new FieldNode(schema.String, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'telematic_records_max_fields',
        extension: ((extensions as any) || {}).telematic_records_max_fields,
      }
    );
  },
  get telematic_records_max_order_by() {
    return new InputNode(
      {
        get action() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_max_order_by' }
    );
  },
  get telematic_records_min_fields() {
    return new ObjectNode(
      {
        get action() {
          return new FieldNode(schema.String, undefined, true);
        },
        get completed_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'telematic_records_min_fields',
        extension: ((extensions as any) || {}).telematic_records_min_fields,
      }
    );
  },
  get telematic_records_min_order_by() {
    return new InputNode(
      {
        get action() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_min_order_by' }
    );
  },
  get telematic_records_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'telematic_records_mutation_response',
        extension: ((extensions as any) || {})
          .telematic_records_mutation_response,
      }
    );
  },
  get telematic_records_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.telematic_records_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.telematic_records_on_conflict, true);
        },
      },
      { name: 'telematic_records_obj_rel_insert_input' }
    );
  },
  get telematic_records_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.telematic_records_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.telematic_records_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.telematic_records_bool_exp, true);
        },
      },
      { name: 'telematic_records_on_conflict' }
    );
  },
  get telematic_records_order_by() {
    return new InputNode(
      {
        get action() {
          return new InputNodeField(schema.order_by, true);
        },
        get completed_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_notified() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device() {
          return new InputNodeField(schema.telematic_devices_order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'telematic_records_order_by' }
    );
  },
  get telematic_records_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.bigint, false);
        },
      },
      { name: 'telematic_records_pk_columns_input' }
    );
  },
  get telematic_records_select_column() {
    return new EnumNode({ name: 'telematic_records_select_column' });
  },
  get telematic_records_set_input() {
    return new InputNode(
      {
        get action() {
          return new InputNodeField(schema.String, true);
        },
        get completed_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.bigint, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get requester_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get requester_notified() {
          return new InputNodeField(schema.Boolean, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'telematic_records_set_input' }
    );
  },
  get telematic_records_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_stddev_fields',
        extension: ((extensions as any) || {}).telematic_records_stddev_fields,
      }
    );
  },
  get telematic_records_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_stddev_order_by' }
    );
  },
  get telematic_records_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .telematic_records_stddev_pop_fields,
      }
    );
  },
  get telematic_records_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_stddev_pop_order_by' }
    );
  },
  get telematic_records_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .telematic_records_stddev_samp_fields,
      }
    );
  },
  get telematic_records_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_stddev_samp_order_by' }
    );
  },
  get telematic_records_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
      },
      {
        name: 'telematic_records_sum_fields',
        extension: ((extensions as any) || {}).telematic_records_sum_fields,
      }
    );
  },
  get telematic_records_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_sum_order_by' }
    );
  },
  get telematic_records_update_column() {
    return new EnumNode({ name: 'telematic_records_update_column' });
  },
  get telematic_records_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_var_pop_fields',
        extension: ((extensions as any) || {}).telematic_records_var_pop_fields,
      }
    );
  },
  get telematic_records_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_var_pop_order_by' }
    );
  },
  get telematic_records_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_var_samp_fields',
        extension: ((extensions as any) || {})
          .telematic_records_var_samp_fields,
      }
    );
  },
  get telematic_records_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_var_samp_order_by' }
    );
  },
  get telematic_records_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get requester_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get telematic_device_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'telematic_records_variance_fields',
        extension: ((extensions as any) || {})
          .telematic_records_variance_fields,
      }
    );
  },
  get telematic_records_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get requester_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get telematic_device_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'telematic_records_variance_order_by' }
    );
  },
  get tier_scores() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get level() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get upper_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'tier_scores',
        extension: ((extensions as any) || {}).tier_scores,
      }
    );
  },
  get tier_scores_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.tier_scores_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.tier_scores, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'tier_scores_aggregate',
        extension: ((extensions as any) || {}).tier_scores_aggregate,
      }
    );
  },
  get tier_scores_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.tier_scores_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.tier_scores_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.tier_scores_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.tier_scores_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.tier_scores_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.tier_scores_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.tier_scores_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.tier_scores_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.tier_scores_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.tier_scores_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.tier_scores_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'tier_scores_aggregate_fields',
        extension: ((extensions as any) || {}).tier_scores_aggregate_fields,
      }
    );
  },
  get tier_scores_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.tier_scores_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.tier_scores_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.tier_scores_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.tier_scores_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.tier_scores_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.tier_scores_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.tier_scores_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.tier_scores_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.tier_scores_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.tier_scores_variance_order_by, true);
        },
      },
      { name: 'tier_scores_aggregate_order_by' }
    );
  },
  get tier_scores_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.tier_scores_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.tier_scores_on_conflict, true);
        },
      },
      { name: 'tier_scores_arr_rel_insert_input' }
    );
  },
  get tier_scores_avg_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_avg_fields',
        extension: ((extensions as any) || {}).tier_scores_avg_fields,
      }
    );
  },
  get tier_scores_avg_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_avg_order_by' }
    );
  },
  get tier_scores_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.tier_scores_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.tier_scores_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.tier_scores_bool_exp, true),
            true
          );
        },
        get deposit() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get level() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
      },
      { name: 'tier_scores_bool_exp' }
    );
  },
  get tier_scores_constraint() {
    return new EnumNode({ name: 'tier_scores_constraint' });
  },
  get tier_scores_inc_input() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get level() {
          return new InputNodeField(schema.Int, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.numeric, true);
        },
      },
      { name: 'tier_scores_inc_input' }
    );
  },
  get tier_scores_insert_input() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get level() {
          return new InputNodeField(schema.Int, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.numeric, true);
        },
      },
      { name: 'tier_scores_insert_input' }
    );
  },
  get tier_scores_max_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'tier_scores_max_fields',
        extension: ((extensions as any) || {}).tier_scores_max_fields,
      }
    );
  },
  get tier_scores_max_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_max_order_by' }
    );
  },
  get tier_scores_min_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'tier_scores_min_fields',
        extension: ((extensions as any) || {}).tier_scores_min_fields,
      }
    );
  },
  get tier_scores_min_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_min_order_by' }
    );
  },
  get tier_scores_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.tier_scores, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'tier_scores_mutation_response',
        extension: ((extensions as any) || {}).tier_scores_mutation_response,
      }
    );
  },
  get tier_scores_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.tier_scores_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.tier_scores_on_conflict, true);
        },
      },
      { name: 'tier_scores_obj_rel_insert_input' }
    );
  },
  get tier_scores_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.tier_scores_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.tier_scores_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.tier_scores_bool_exp, true);
        },
      },
      { name: 'tier_scores_on_conflict' }
    );
  },
  get tier_scores_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_order_by' }
    );
  },
  get tier_scores_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'tier_scores_pk_columns_input' }
    );
  },
  get tier_scores_select_column() {
    return new EnumNode({ name: 'tier_scores_select_column' });
  },
  get tier_scores_set_input() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get level() {
          return new InputNodeField(schema.Int, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.numeric, true);
        },
      },
      { name: 'tier_scores_set_input' }
    );
  },
  get tier_scores_stddev_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_stddev_fields',
        extension: ((extensions as any) || {}).tier_scores_stddev_fields,
      }
    );
  },
  get tier_scores_stddev_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_stddev_order_by' }
    );
  },
  get tier_scores_stddev_pop_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_stddev_pop_fields',
        extension: ((extensions as any) || {}).tier_scores_stddev_pop_fields,
      }
    );
  },
  get tier_scores_stddev_pop_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_stddev_pop_order_by' }
    );
  },
  get tier_scores_stddev_samp_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_stddev_samp_fields',
        extension: ((extensions as any) || {}).tier_scores_stddev_samp_fields,
      }
    );
  },
  get tier_scores_stddev_samp_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_stddev_samp_order_by' }
    );
  },
  get tier_scores_sum_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
      },
      {
        name: 'tier_scores_sum_fields',
        extension: ((extensions as any) || {}).tier_scores_sum_fields,
      }
    );
  },
  get tier_scores_sum_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_sum_order_by' }
    );
  },
  get tier_scores_update_column() {
    return new EnumNode({ name: 'tier_scores_update_column' });
  },
  get tier_scores_var_pop_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_var_pop_fields',
        extension: ((extensions as any) || {}).tier_scores_var_pop_fields,
      }
    );
  },
  get tier_scores_var_pop_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_var_pop_order_by' }
    );
  },
  get tier_scores_var_samp_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_var_samp_fields',
        extension: ((extensions as any) || {}).tier_scores_var_samp_fields,
      }
    );
  },
  get tier_scores_var_samp_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_var_samp_order_by' }
    );
  },
  get tier_scores_variance_fields() {
    return new ObjectNode(
      {
        get deposit() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get level() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get lower_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get upper_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'tier_scores_variance_fields',
        extension: ((extensions as any) || {}).tier_scores_variance_fields,
      }
    );
  },
  get tier_scores_variance_order_by() {
    return new InputNode(
      {
        get deposit() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get level() {
          return new InputNodeField(schema.order_by, true);
        },
        get lower_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get upper_rating() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'tier_scores_variance_order_by' }
    );
  },
  get time_blocks() {
    return new ObjectNode(
      {
        get end_time() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get start_time() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'time_blocks',
        extension: ((extensions as any) || {}).time_blocks,
      }
    );
  },
  get time_blocks_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.time_blocks_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.time_blocks, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'time_blocks_aggregate',
        extension: ((extensions as any) || {}).time_blocks_aggregate,
      }
    );
  },
  get time_blocks_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.time_blocks_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.time_blocks_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.time_blocks_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.time_blocks_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.time_blocks_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.time_blocks_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.time_blocks_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.time_blocks_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.time_blocks_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.time_blocks_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.time_blocks_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'time_blocks_aggregate_fields',
        extension: ((extensions as any) || {}).time_blocks_aggregate_fields,
      }
    );
  },
  get time_blocks_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.time_blocks_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.time_blocks_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.time_blocks_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.time_blocks_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.time_blocks_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.time_blocks_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.time_blocks_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.time_blocks_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.time_blocks_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.time_blocks_variance_order_by, true);
        },
      },
      { name: 'time_blocks_aggregate_order_by' }
    );
  },
  get time_blocks_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.time_blocks_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.time_blocks_on_conflict, true);
        },
      },
      { name: 'time_blocks_arr_rel_insert_input' }
    );
  },
  get time_blocks_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_avg_fields',
        extension: ((extensions as any) || {}).time_blocks_avg_fields,
      }
    );
  },
  get time_blocks_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_avg_order_by' }
    );
  },
  get time_blocks_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.time_blocks_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.time_blocks_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.time_blocks_bool_exp, true),
            true
          );
        },
        get end_time() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get start_time() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'time_blocks_bool_exp' }
    );
  },
  get time_blocks_constraint() {
    return new EnumNode({ name: 'time_blocks_constraint' });
  },
  get time_blocks_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'time_blocks_inc_input' }
    );
  },
  get time_blocks_insert_input() {
    return new InputNode(
      {
        get end_time() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get start_time() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'time_blocks_insert_input' }
    );
  },
  get time_blocks_max_fields() {
    return new ObjectNode(
      {
        get end_time() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get start_time() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'time_blocks_max_fields',
        extension: ((extensions as any) || {}).time_blocks_max_fields,
      }
    );
  },
  get time_blocks_max_order_by() {
    return new InputNode(
      {
        get end_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get start_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_max_order_by' }
    );
  },
  get time_blocks_min_fields() {
    return new ObjectNode(
      {
        get end_time() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get start_time() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'time_blocks_min_fields',
        extension: ((extensions as any) || {}).time_blocks_min_fields,
      }
    );
  },
  get time_blocks_min_order_by() {
    return new InputNode(
      {
        get end_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get start_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_min_order_by' }
    );
  },
  get time_blocks_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.time_blocks, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'time_blocks_mutation_response',
        extension: ((extensions as any) || {}).time_blocks_mutation_response,
      }
    );
  },
  get time_blocks_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.time_blocks_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.time_blocks_on_conflict, true);
        },
      },
      { name: 'time_blocks_obj_rel_insert_input' }
    );
  },
  get time_blocks_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.time_blocks_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.time_blocks_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.time_blocks_bool_exp, true);
        },
      },
      { name: 'time_blocks_on_conflict' }
    );
  },
  get time_blocks_order_by() {
    return new InputNode(
      {
        get end_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get start_time() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_order_by' }
    );
  },
  get time_blocks_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'time_blocks_pk_columns_input' }
    );
  },
  get time_blocks_select_column() {
    return new EnumNode({ name: 'time_blocks_select_column' });
  },
  get time_blocks_set_input() {
    return new InputNode(
      {
        get end_time() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get start_time() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'time_blocks_set_input' }
    );
  },
  get time_blocks_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_stddev_fields',
        extension: ((extensions as any) || {}).time_blocks_stddev_fields,
      }
    );
  },
  get time_blocks_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_stddev_order_by' }
    );
  },
  get time_blocks_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_stddev_pop_fields',
        extension: ((extensions as any) || {}).time_blocks_stddev_pop_fields,
      }
    );
  },
  get time_blocks_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_stddev_pop_order_by' }
    );
  },
  get time_blocks_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_stddev_samp_fields',
        extension: ((extensions as any) || {}).time_blocks_stddev_samp_fields,
      }
    );
  },
  get time_blocks_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_stddev_samp_order_by' }
    );
  },
  get time_blocks_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'time_blocks_sum_fields',
        extension: ((extensions as any) || {}).time_blocks_sum_fields,
      }
    );
  },
  get time_blocks_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_sum_order_by' }
    );
  },
  get time_blocks_update_column() {
    return new EnumNode({ name: 'time_blocks_update_column' });
  },
  get time_blocks_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_var_pop_fields',
        extension: ((extensions as any) || {}).time_blocks_var_pop_fields,
      }
    );
  },
  get time_blocks_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_var_pop_order_by' }
    );
  },
  get time_blocks_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_var_samp_fields',
        extension: ((extensions as any) || {}).time_blocks_var_samp_fields,
      }
    );
  },
  get time_blocks_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_var_samp_order_by' }
    );
  },
  get time_blocks_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'time_blocks_variance_fields',
        extension: ((extensions as any) || {}).time_blocks_variance_fields,
      }
    );
  },
  get time_blocks_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'time_blocks_variance_order_by' }
    );
  },
  get timestamp() {
    return new ScalarNode({
      name: 'timestamp',
      extension: ((extensions as any) || {}).timestamp,
    });
  },
  get timestamp_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _gt() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _gte() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _in() {
          return new InputNodeField(
            new ArrayNode(schema.timestamp, true),
            true
          );
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _lte() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _neq() {
          return new InputNodeField(schema.timestamp, true);
        },
        get _nin() {
          return new InputNodeField(
            new ArrayNode(schema.timestamp, true),
            true
          );
        },
      },
      { name: 'timestamp_comparison_exp' }
    );
  },
  get transfer_line_items() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfers_v2() {
          return new FieldNode(schema.transfers_v2, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'transfer_line_items',
        extension: ((extensions as any) || {}).transfer_line_items,
      }
    );
  },
  get transfer_line_items_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.transfer_line_items_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.transfer_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'transfer_line_items_aggregate',
        extension: ((extensions as any) || {}).transfer_line_items_aggregate,
      }
    );
  },
  get transfer_line_items_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.transfer_line_items_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.transfer_line_items_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.transfer_line_items_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.transfer_line_items_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.transfer_line_items_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.transfer_line_items_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.transfer_line_items_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.transfer_line_items_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.transfer_line_items_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.transfer_line_items_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'transfer_line_items_aggregate_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_aggregate_fields,
      }
    );
  },
  get transfer_line_items_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.transfer_line_items_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.transfer_line_items_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.transfer_line_items_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.transfer_line_items_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.transfer_line_items_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.transfer_line_items_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.transfer_line_items_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.transfer_line_items_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.transfer_line_items_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.transfer_line_items_variance_order_by,
            true
          );
        },
      },
      { name: 'transfer_line_items_aggregate_order_by' }
    );
  },
  get transfer_line_items_append_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'transfer_line_items_append_input' }
    );
  },
  get transfer_line_items_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.transfer_line_items_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.transfer_line_items_on_conflict,
            true
          );
        },
      },
      { name: 'transfer_line_items_arr_rel_insert_input' }
    );
  },
  get transfer_line_items_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_avg_fields',
        extension: ((extensions as any) || {}).transfer_line_items_avg_fields,
      }
    );
  },
  get transfer_line_items_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_avg_order_by' }
    );
  },
  get transfer_line_items_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.transfer_line_items_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.transfer_line_items_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.transfer_line_items_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get transfers_v2() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'transfer_line_items_bool_exp' }
    );
  },
  get transfer_line_items_constraint() {
    return new EnumNode({ name: 'transfer_line_items_constraint' });
  },
  get transfer_line_items_delete_at_path_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'transfer_line_items_delete_at_path_input' }
    );
  },
  get transfer_line_items_delete_elem_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfer_line_items_delete_elem_input' }
    );
  },
  get transfer_line_items_delete_key_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'transfer_line_items_delete_key_input' }
    );
  },
  get transfer_line_items_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfer_line_items_inc_input' }
    );
  },
  get transfer_line_items_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get transfers_v2() {
          return new InputNodeField(
            schema.transfers_v2_obj_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'transfer_line_items_insert_input' }
    );
  },
  get transfer_line_items_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_max_fields',
        extension: ((extensions as any) || {}).transfer_line_items_max_fields,
      }
    );
  },
  get transfer_line_items_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_max_order_by' }
    );
  },
  get transfer_line_items_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_min_fields',
        extension: ((extensions as any) || {}).transfer_line_items_min_fields,
      }
    );
  },
  get transfer_line_items_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_min_order_by' }
    );
  },
  get transfer_line_items_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.transfer_line_items, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'transfer_line_items_mutation_response',
        extension: ((extensions as any) || {})
          .transfer_line_items_mutation_response,
      }
    );
  },
  get transfer_line_items_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.transfer_line_items_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.transfer_line_items_on_conflict,
            true
          );
        },
      },
      { name: 'transfer_line_items_obj_rel_insert_input' }
    );
  },
  get transfer_line_items_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.transfer_line_items_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.transfer_line_items_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.transfer_line_items_bool_exp, true);
        },
      },
      { name: 'transfer_line_items_on_conflict' }
    );
  },
  get transfer_line_items_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get details() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get name() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_v2() {
          return new InputNodeField(schema.transfers_v2_order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_order_by' }
    );
  },
  get transfer_line_items_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'transfer_line_items_pk_columns_input' }
    );
  },
  get transfer_line_items_prepend_input() {
    return new InputNode(
      {
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'transfer_line_items_prepend_input' }
    );
  },
  get transfer_line_items_select_column() {
    return new EnumNode({ name: 'transfer_line_items_select_column' });
  },
  get transfer_line_items_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get name() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'transfer_line_items_set_input' }
    );
  },
  get transfer_line_items_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_stddev_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_stddev_fields,
      }
    );
  },
  get transfer_line_items_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_stddev_order_by' }
    );
  },
  get transfer_line_items_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_stddev_pop_fields,
      }
    );
  },
  get transfer_line_items_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_stddev_pop_order_by' }
    );
  },
  get transfer_line_items_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_stddev_samp_fields,
      }
    );
  },
  get transfer_line_items_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_stddev_samp_order_by' }
    );
  },
  get transfer_line_items_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_sum_fields',
        extension: ((extensions as any) || {}).transfer_line_items_sum_fields,
      }
    );
  },
  get transfer_line_items_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_sum_order_by' }
    );
  },
  get transfer_line_items_update_column() {
    return new EnumNode({ name: 'transfer_line_items_update_column' });
  },
  get transfer_line_items_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_var_pop_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_var_pop_fields,
      }
    );
  },
  get transfer_line_items_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_var_pop_order_by' }
    );
  },
  get transfer_line_items_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_var_samp_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_var_samp_fields,
      }
    );
  },
  get transfer_line_items_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_var_samp_order_by' }
    );
  },
  get transfer_line_items_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get transfer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfer_line_items_variance_fields',
        extension: ((extensions as any) || {})
          .transfer_line_items_variance_fields,
      }
    );
  },
  get transfer_line_items_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfer_line_items_variance_order_by' }
    );
  },
  get transfers() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      { name: 'transfers', extension: ((extensions as any) || {}).transfers }
    );
  },
  get transfers_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.transfers_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.transfers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'transfers_aggregate',
        extension: ((extensions as any) || {}).transfers_aggregate,
      }
    );
  },
  get transfers_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.transfers_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.transfers_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.transfers_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.transfers_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.transfers_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.transfers_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.transfers_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.transfers_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.transfers_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.transfers_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'transfers_aggregate_fields',
        extension: ((extensions as any) || {}).transfers_aggregate_fields,
      }
    );
  },
  get transfers_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.transfers_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.transfers_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.transfers_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.transfers_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.transfers_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.transfers_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.transfers_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.transfers_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.transfers_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.transfers_variance_order_by, true);
        },
      },
      { name: 'transfers_aggregate_order_by' }
    );
  },
  get transfers_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.transfers_on_conflict, true);
        },
      },
      { name: 'transfers_arr_rel_insert_input' }
    );
  },
  get transfers_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_avg_fields',
        extension: ((extensions as any) || {}).transfers_avg_fields,
      }
    );
  },
  get transfers_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_avg_order_by' }
    );
  },
  get transfers_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.transfers_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'transfers_bool_exp' }
    );
  },
  get transfers_constraint() {
    return new EnumNode({ name: 'transfers_constraint' });
  },
  get transfers_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfers_inc_input' }
    );
  },
  get transfers_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfers_insert_input' }
    );
  },
  get transfers_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_max_fields',
        extension: ((extensions as any) || {}).transfers_max_fields,
      }
    );
  },
  get transfers_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_max_order_by' }
    );
  },
  get transfers_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_min_fields',
        extension: ((extensions as any) || {}).transfers_min_fields,
      }
    );
  },
  get transfers_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_min_order_by' }
    );
  },
  get transfers_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.transfers, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'transfers_mutation_response',
        extension: ((extensions as any) || {}).transfers_mutation_response,
      }
    );
  },
  get transfers_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.transfers_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.transfers_on_conflict, true);
        },
      },
      { name: 'transfers_obj_rel_insert_input' }
    );
  },
  get transfers_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.transfers_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.transfers_bool_exp, true);
        },
      },
      { name: 'transfers_on_conflict' }
    );
  },
  get transfers_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_order_by' }
    );
  },
  get transfers_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'transfers_pk_columns_input' }
    );
  },
  get transfers_select_column() {
    return new EnumNode({ name: 'transfers_select_column' });
  },
  get transfers_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfers_set_input' }
    );
  },
  get transfers_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_stddev_fields',
        extension: ((extensions as any) || {}).transfers_stddev_fields,
      }
    );
  },
  get transfers_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_stddev_order_by' }
    );
  },
  get transfers_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_stddev_pop_fields',
        extension: ((extensions as any) || {}).transfers_stddev_pop_fields,
      }
    );
  },
  get transfers_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_stddev_pop_order_by' }
    );
  },
  get transfers_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_stddev_samp_fields',
        extension: ((extensions as any) || {}).transfers_stddev_samp_fields,
      }
    );
  },
  get transfers_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_stddev_samp_order_by' }
    );
  },
  get transfers_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_sum_fields',
        extension: ((extensions as any) || {}).transfers_sum_fields,
      }
    );
  },
  get transfers_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_sum_order_by' }
    );
  },
  get transfers_update_column() {
    return new EnumNode({ name: 'transfers_update_column' });
  },
  get transfers_v2() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get balance_transaction() {
          return new FieldNode(schema.balance_transactions, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get charge() {
          return new FieldNode(schema.charges, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hold_until() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get payment_account() {
          return new FieldNode(schema.payment_accounts, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payment_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout() {
          return new FieldNode(schema.payouts, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get stats_transfers() {
          return new FieldNode(
            new ArrayNode(schema.stats_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get stats_transfers_aggregate() {
          return new FieldNode(
            schema.stats_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.stats_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.stats_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get transfer_line_items() {
          return new FieldNode(
            new ArrayNode(schema.transfer_line_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get transfer_line_items_aggregate() {
          return new FieldNode(
            schema.transfer_line_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfer_line_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.transfer_line_items_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_v2',
        extension: ((extensions as any) || {}).transfers_v2,
      }
    );
  },
  get transfers_v2_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'transfers_v2_aggregate',
        extension: ((extensions as any) || {}).transfers_v2_aggregate,
      }
    );
  },
  get transfers_v2_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.transfers_v2_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.transfers_v2_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.transfers_v2_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.transfers_v2_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.transfers_v2_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.transfers_v2_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.transfers_v2_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.transfers_v2_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.transfers_v2_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.transfers_v2_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'transfers_v2_aggregate_fields',
        extension: ((extensions as any) || {}).transfers_v2_aggregate_fields,
      }
    );
  },
  get transfers_v2_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.transfers_v2_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.transfers_v2_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.transfers_v2_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.transfers_v2_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.transfers_v2_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.transfers_v2_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.transfers_v2_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.transfers_v2_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.transfers_v2_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.transfers_v2_variance_order_by,
            true
          );
        },
      },
      { name: 'transfers_v2_aggregate_order_by' }
    );
  },
  get transfers_v2_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_v2_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.transfers_v2_on_conflict, true);
        },
      },
      { name: 'transfers_v2_arr_rel_insert_input' }
    );
  },
  get transfers_v2_avg_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_avg_fields',
        extension: ((extensions as any) || {}).transfers_v2_avg_fields,
      }
    );
  },
  get transfers_v2_avg_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_avg_order_by' }
    );
  },
  get transfers_v2_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_v2_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_v2_bool_exp, true),
            true
          );
        },
        get amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.balance_transactions_bool_exp, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get errors() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get hold_until() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get payment_account() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get payment_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payout() {
          return new InputNodeField(schema.payouts_bool_exp, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get stats_transfers() {
          return new InputNodeField(schema.stats_transfers_bool_exp, true);
        },
        get status() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get transfer_line_items() {
          return new InputNodeField(schema.transfer_line_items_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'transfers_v2_bool_exp' }
    );
  },
  get transfers_v2_constraint() {
    return new EnumNode({ name: 'transfers_v2_constraint' });
  },
  get transfers_v2_inc_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.Int, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfers_v2_inc_input' }
    );
  },
  get transfers_v2_insert_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get balance_transaction() {
          return new InputNodeField(
            schema.balance_transactions_obj_rel_insert_input,
            true
          );
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_obj_rel_insert_input, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get hold_until() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get payment_account() {
          return new InputNodeField(
            schema.payment_accounts_obj_rel_insert_input,
            true
          );
        },
        get payment_account_id() {
          return new InputNodeField(schema.Int, true);
        },
        get payment_id() {
          return new InputNodeField(schema.String, true);
        },
        get payout() {
          return new InputNodeField(schema.payouts_obj_rel_insert_input, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get stats_transfers() {
          return new InputNodeField(
            schema.stats_transfers_arr_rel_insert_input,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get transfer_line_items() {
          return new InputNodeField(
            schema.transfer_line_items_arr_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfers_v2_insert_input' }
    );
  },
  get transfers_v2_max_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hold_until() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payment_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_v2_max_fields',
        extension: ((extensions as any) || {}).transfers_v2_max_fields,
      }
    );
  },
  get transfers_v2_max_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get hold_until() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_max_order_by' }
    );
  },
  get transfers_v2_min_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get errors() {
          return new FieldNode(schema.String, undefined, true);
        },
        get hold_until() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payment_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get provider_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get status() {
          return new FieldNode(schema.String, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_v2_min_fields',
        extension: ((extensions as any) || {}).transfers_v2_min_fields,
      }
    );
  },
  get transfers_v2_min_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get hold_until() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_min_order_by' }
    );
  },
  get transfers_v2_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'transfers_v2_mutation_response',
        extension: ((extensions as any) || {}).transfers_v2_mutation_response,
      }
    );
  },
  get transfers_v2_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.transfers_v2_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.transfers_v2_on_conflict, true);
        },
      },
      { name: 'transfers_v2_obj_rel_insert_input' }
    );
  },
  get transfers_v2_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.transfers_v2_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.transfers_v2_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
      },
      { name: 'transfers_v2_on_conflict' }
    );
  },
  get transfers_v2_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction() {
          return new InputNodeField(schema.balance_transactions_order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge() {
          return new InputNodeField(schema.charges_order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get errors() {
          return new InputNodeField(schema.order_by, true);
        },
        get hold_until() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account() {
          return new InputNodeField(schema.payment_accounts_order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout() {
          return new InputNodeField(schema.payouts_order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get provider_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get stats_transfers_aggregate() {
          return new InputNodeField(
            schema.stats_transfers_aggregate_order_by,
            true
          );
        },
        get status() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfer_line_items_aggregate() {
          return new InputNodeField(
            schema.transfer_line_items_aggregate_order_by,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_order_by' }
    );
  },
  get transfers_v2_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'transfers_v2_pk_columns_input' }
    );
  },
  get transfers_v2_select_column() {
    return new EnumNode({ name: 'transfers_v2_select_column' });
  },
  get transfers_v2_set_input() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.Int, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get charge_id() {
          return new InputNodeField(schema.Int, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get errors() {
          return new InputNodeField(schema.String, true);
        },
        get hold_until() {
          return new InputNodeField(schema.timestamp, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.Int, true);
        },
        get payment_id() {
          return new InputNodeField(schema.String, true);
        },
        get payout_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get provider_id() {
          return new InputNodeField(schema.String, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get status() {
          return new InputNodeField(schema.String, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get total_amount() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'transfers_v2_set_input' }
    );
  },
  get transfers_v2_stddev_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_stddev_fields',
        extension: ((extensions as any) || {}).transfers_v2_stddev_fields,
      }
    );
  },
  get transfers_v2_stddev_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_stddev_order_by' }
    );
  },
  get transfers_v2_stddev_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_stddev_pop_fields',
        extension: ((extensions as any) || {}).transfers_v2_stddev_pop_fields,
      }
    );
  },
  get transfers_v2_stddev_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_stddev_pop_order_by' }
    );
  },
  get transfers_v2_stddev_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_stddev_samp_fields',
        extension: ((extensions as any) || {}).transfers_v2_stddev_samp_fields,
      }
    );
  },
  get transfers_v2_stddev_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_stddev_samp_order_by' }
    );
  },
  get transfers_v2_sum_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'transfers_v2_sum_fields',
        extension: ((extensions as any) || {}).transfers_v2_sum_fields,
      }
    );
  },
  get transfers_v2_sum_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_sum_order_by' }
    );
  },
  get transfers_v2_update_column() {
    return new EnumNode({ name: 'transfers_v2_update_column' });
  },
  get transfers_v2_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_var_pop_fields',
        extension: ((extensions as any) || {}).transfers_v2_var_pop_fields,
      }
    );
  },
  get transfers_v2_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_var_pop_order_by' }
    );
  },
  get transfers_v2_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_var_samp_fields',
        extension: ((extensions as any) || {}).transfers_v2_var_samp_fields,
      }
    );
  },
  get transfers_v2_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_var_samp_order_by' }
    );
  },
  get transfers_v2_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get balance_transaction_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get charge_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payment_account_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_v2_variance_fields',
        extension: ((extensions as any) || {}).transfers_v2_variance_fields,
      }
    );
  },
  get transfers_v2_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get balance_transaction_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_account_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_v2_variance_order_by' }
    );
  },
  get transfers_var_pop_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_var_pop_fields',
        extension: ((extensions as any) || {}).transfers_var_pop_fields,
      }
    );
  },
  get transfers_var_pop_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_var_pop_order_by' }
    );
  },
  get transfers_var_samp_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_var_samp_fields',
        extension: ((extensions as any) || {}).transfers_var_samp_fields,
      }
    );
  },
  get transfers_var_samp_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_var_samp_order_by' }
    );
  },
  get transfers_variance_fields() {
    return new ObjectNode(
      {
        get amount() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'transfers_variance_fields',
        extension: ((extensions as any) || {}).transfers_variance_fields,
      }
    );
  },
  get transfers_variance_order_by() {
    return new InputNode(
      {
        get amount() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'transfers_variance_order_by' }
    );
  },
  get tsvector() {
    return new ScalarNode({
      name: 'tsvector',
      extension: ((extensions as any) || {}).tsvector,
    });
  },
  get tsvector_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.tsvector, true);
        },
        get _gt() {
          return new InputNodeField(schema.tsvector, true);
        },
        get _gte() {
          return new InputNodeField(schema.tsvector, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.tsvector, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.tsvector, true);
        },
        get _lte() {
          return new InputNodeField(schema.tsvector, true);
        },
        get _neq() {
          return new InputNodeField(schema.tsvector, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.tsvector, true), true);
        },
      },
      { name: 'tsvector_comparison_exp' }
    );
  },
  get upvotes() {
    return new ObjectNode(
      {
        get comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get flagged_for_moderation() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get fulfilled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get geom() {
          return new FieldNode(schema.geometry, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item() {
          return new FieldNode(schema.items, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rates() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get travel_distance() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      { name: 'upvotes', extension: ((extensions as any) || {}).upvotes }
    );
  },
  get upvotes_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.upvotes_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.upvotes, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'upvotes_aggregate',
        extension: ((extensions as any) || {}).upvotes_aggregate,
      }
    );
  },
  get upvotes_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.upvotes_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.upvotes_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.upvotes_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.upvotes_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(
            schema.upvotes_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.upvotes_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.upvotes_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.upvotes_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.upvotes_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.upvotes_variance_fields, undefined, true);
        },
      },
      {
        name: 'upvotes_aggregate_fields',
        extension: ((extensions as any) || {}).upvotes_aggregate_fields,
      }
    );
  },
  get upvotes_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.upvotes_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.upvotes_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.upvotes_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.upvotes_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.upvotes_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.upvotes_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.upvotes_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.upvotes_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.upvotes_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.upvotes_variance_order_by, true);
        },
      },
      { name: 'upvotes_aggregate_order_by' }
    );
  },
  get upvotes_append_input() {
    return new InputNode(
      {
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'upvotes_append_input' }
    );
  },
  get upvotes_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.upvotes_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.upvotes_on_conflict, true);
        },
      },
      { name: 'upvotes_arr_rel_insert_input' }
    );
  },
  get upvotes_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_avg_fields',
        extension: ((extensions as any) || {}).upvotes_avg_fields,
      }
    );
  },
  get upvotes_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_avg_order_by' }
    );
  },
  get upvotes_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.upvotes_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.upvotes_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.upvotes_bool_exp, true),
            true
          );
        },
        get comment() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get fulfilled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get geom() {
          return new InputNodeField(schema.geometry_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'upvotes_bool_exp' }
    );
  },
  get upvotes_constraint() {
    return new EnumNode({ name: 'upvotes_constraint' });
  },
  get upvotes_delete_at_path_input() {
    return new InputNode(
      {
        get rates() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'upvotes_delete_at_path_input' }
    );
  },
  get upvotes_delete_elem_input() {
    return new InputNode(
      {
        get rates() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'upvotes_delete_elem_input' }
    );
  },
  get upvotes_delete_key_input() {
    return new InputNode(
      {
        get rates() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'upvotes_delete_key_input' }
    );
  },
  get upvotes_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.float8, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'upvotes_inc_input' }
    );
  },
  get upvotes_insert_input() {
    return new InputNode(
      {
        get comment() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.Boolean, true);
        },
        get fulfilled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get geom() {
          return new InputNodeField(schema.geometry, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item() {
          return new InputNodeField(schema.items_obj_rel_insert_input, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.float8, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'upvotes_insert_input' }
    );
  },
  get upvotes_max_fields() {
    return new ObjectNode(
      {
        get comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'upvotes_max_fields',
        extension: ((extensions as any) || {}).upvotes_max_fields,
      }
    );
  },
  get upvotes_max_order_by() {
    return new InputNode(
      {
        get comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_max_order_by' }
    );
  },
  get upvotes_min_fields() {
    return new ObjectNode(
      {
        get comment() {
          return new FieldNode(schema.String, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'upvotes_min_fields',
        extension: ((extensions as any) || {}).upvotes_min_fields,
      }
    );
  },
  get upvotes_min_order_by() {
    return new InputNode(
      {
        get comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_min_order_by' }
    );
  },
  get upvotes_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.upvotes, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'upvotes_mutation_response',
        extension: ((extensions as any) || {}).upvotes_mutation_response,
      }
    );
  },
  get upvotes_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.upvotes_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.upvotes_on_conflict, true);
        },
      },
      { name: 'upvotes_obj_rel_insert_input' }
    );
  },
  get upvotes_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.upvotes_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.upvotes_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.upvotes_bool_exp, true);
        },
      },
      { name: 'upvotes_on_conflict' }
    );
  },
  get upvotes_order_by() {
    return new InputNode(
      {
        get comment() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.order_by, true);
        },
        get fulfilled() {
          return new InputNodeField(schema.order_by, true);
        },
        get geom() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item() {
          return new InputNodeField(schema.items_order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rates() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_order_by' }
    );
  },
  get upvotes_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'upvotes_pk_columns_input' }
    );
  },
  get upvotes_prepend_input() {
    return new InputNode(
      {
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'upvotes_prepend_input' }
    );
  },
  get upvotes_select_column() {
    return new EnumNode({ name: 'upvotes_select_column' });
  },
  get upvotes_set_input() {
    return new InputNode(
      {
        get comment() {
          return new InputNodeField(schema.String, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get flagged_for_moderation() {
          return new InputNodeField(schema.Boolean, true);
        },
        get fulfilled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get geom() {
          return new InputNodeField(schema.geometry, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_id() {
          return new InputNodeField(schema.Int, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.Int, true);
        },
        get rates() {
          return new InputNodeField(schema.jsonb, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.float8, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'upvotes_set_input' }
    );
  },
  get upvotes_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_stddev_fields',
        extension: ((extensions as any) || {}).upvotes_stddev_fields,
      }
    );
  },
  get upvotes_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_stddev_order_by' }
    );
  },
  get upvotes_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_stddev_pop_fields',
        extension: ((extensions as any) || {}).upvotes_stddev_pop_fields,
      }
    );
  },
  get upvotes_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_stddev_pop_order_by' }
    );
  },
  get upvotes_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_stddev_samp_fields',
        extension: ((extensions as any) || {}).upvotes_stddev_samp_fields,
      }
    );
  },
  get upvotes_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_stddev_samp_order_by' }
    );
  },
  get upvotes_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'upvotes_sum_fields',
        extension: ((extensions as any) || {}).upvotes_sum_fields,
      }
    );
  },
  get upvotes_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_sum_order_by' }
    );
  },
  get upvotes_update_column() {
    return new EnumNode({ name: 'upvotes_update_column' });
  },
  get upvotes_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_var_pop_fields',
        extension: ((extensions as any) || {}).upvotes_var_pop_fields,
      }
    );
  },
  get upvotes_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_var_pop_order_by' }
    );
  },
  get upvotes_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_var_samp_fields',
        extension: ((extensions as any) || {}).upvotes_var_samp_fields,
      }
    );
  },
  get upvotes_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_var_samp_order_by' }
    );
  },
  get upvotes_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get neighborhood_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get travel_distance() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'upvotes_variance_fields',
        extension: ((extensions as any) || {}).upvotes_variance_fields,
      }
    );
  },
  get upvotes_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get neighborhood_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get travel_distance() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'upvotes_variance_order_by' }
    );
  },
  get user_blocks() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userByBlockingUserId() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'user_blocks',
        extension: ((extensions as any) || {}).user_blocks,
      }
    );
  },
  get user_blocks_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_blocks_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_blocks, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_blocks_aggregate',
        extension: ((extensions as any) || {}).user_blocks_aggregate,
      }
    );
  },
  get user_blocks_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.user_blocks_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.user_blocks_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.user_blocks_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.user_blocks_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_blocks_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_blocks_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.user_blocks_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.user_blocks_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_blocks_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_blocks_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_blocks_aggregate_fields',
        extension: ((extensions as any) || {}).user_blocks_aggregate_fields,
      }
    );
  },
  get user_blocks_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_blocks_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_blocks_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_blocks_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.user_blocks_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_blocks_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_blocks_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_blocks_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.user_blocks_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.user_blocks_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.user_blocks_variance_order_by, true);
        },
      },
      { name: 'user_blocks_aggregate_order_by' }
    );
  },
  get user_blocks_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_blocks_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.user_blocks_on_conflict, true);
        },
      },
      { name: 'user_blocks_arr_rel_insert_input' }
    );
  },
  get user_blocks_avg_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_avg_fields',
        extension: ((extensions as any) || {}).user_blocks_avg_fields,
      }
    );
  },
  get user_blocks_avg_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_avg_order_by' }
    );
  },
  get user_blocks_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_blocks_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_blocks_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_blocks_bool_exp, true),
            true
          );
        },
        get blocked_user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userByBlockingUserId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'user_blocks_bool_exp' }
    );
  },
  get user_blocks_constraint() {
    return new EnumNode({ name: 'user_blocks_constraint' });
  },
  get user_blocks_inc_input() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_blocks_inc_input' }
    );
  },
  get user_blocks_insert_input() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userByBlockingUserId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'user_blocks_insert_input' }
    );
  },
  get user_blocks_max_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'user_blocks_max_fields',
        extension: ((extensions as any) || {}).user_blocks_max_fields,
      }
    );
  },
  get user_blocks_max_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_max_order_by' }
    );
  },
  get user_blocks_min_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'user_blocks_min_fields',
        extension: ((extensions as any) || {}).user_blocks_min_fields,
      }
    );
  },
  get user_blocks_min_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_min_order_by' }
    );
  },
  get user_blocks_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_blocks, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_blocks_mutation_response',
        extension: ((extensions as any) || {}).user_blocks_mutation_response,
      }
    );
  },
  get user_blocks_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.user_blocks_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.user_blocks_on_conflict, true);
        },
      },
      { name: 'user_blocks_obj_rel_insert_input' }
    );
  },
  get user_blocks_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.user_blocks_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.user_blocks_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.user_blocks_bool_exp, true);
        },
      },
      { name: 'user_blocks_on_conflict' }
    );
  },
  get user_blocks_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userByBlockingUserId() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'user_blocks_order_by' }
    );
  },
  get user_blocks_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'user_blocks_pk_columns_input' }
    );
  },
  get user_blocks_select_column() {
    return new EnumNode({ name: 'user_blocks_select_column' });
  },
  get user_blocks_set_input() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'user_blocks_set_input' }
    );
  },
  get user_blocks_stddev_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_stddev_fields',
        extension: ((extensions as any) || {}).user_blocks_stddev_fields,
      }
    );
  },
  get user_blocks_stddev_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_stddev_order_by' }
    );
  },
  get user_blocks_stddev_pop_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_stddev_pop_fields',
        extension: ((extensions as any) || {}).user_blocks_stddev_pop_fields,
      }
    );
  },
  get user_blocks_stddev_pop_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_stddev_pop_order_by' }
    );
  },
  get user_blocks_stddev_samp_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_stddev_samp_fields',
        extension: ((extensions as any) || {}).user_blocks_stddev_samp_fields,
      }
    );
  },
  get user_blocks_stddev_samp_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_stddev_samp_order_by' }
    );
  },
  get user_blocks_sum_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_blocks_sum_fields',
        extension: ((extensions as any) || {}).user_blocks_sum_fields,
      }
    );
  },
  get user_blocks_sum_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_sum_order_by' }
    );
  },
  get user_blocks_update_column() {
    return new EnumNode({ name: 'user_blocks_update_column' });
  },
  get user_blocks_var_pop_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_var_pop_fields',
        extension: ((extensions as any) || {}).user_blocks_var_pop_fields,
      }
    );
  },
  get user_blocks_var_pop_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_var_pop_order_by' }
    );
  },
  get user_blocks_var_samp_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_var_samp_fields',
        extension: ((extensions as any) || {}).user_blocks_var_samp_fields,
      }
    );
  },
  get user_blocks_var_samp_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_var_samp_order_by' }
    );
  },
  get user_blocks_variance_fields() {
    return new ObjectNode(
      {
        get blocked_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get blocking_user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_blocks_variance_fields',
        extension: ((extensions as any) || {}).user_blocks_variance_fields,
      }
    );
  },
  get user_blocks_variance_order_by() {
    return new InputNode(
      {
        get blocked_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get blocking_user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_blocks_variance_order_by' }
    );
  },
  get user_devices() {
    return new ObjectNode(
      {
        get device_id() {
          return new FieldNode(schema.String, undefined, false);
        },
        get device_token() {
          return new FieldNode(schema.String, undefined, false);
        },
        get device_type() {
          return new FieldNode(schema.String, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, false);
        },
      },
      {
        name: 'user_devices',
        extension: ((extensions as any) || {}).user_devices,
      }
    );
  },
  get user_devices_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_devices_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_devices, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_devices_aggregate',
        extension: ((extensions as any) || {}).user_devices_aggregate,
      }
    );
  },
  get user_devices_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.user_devices_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.user_devices_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.user_devices_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.user_devices_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_devices_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_devices_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.user_devices_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.user_devices_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_devices_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_devices_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_devices_aggregate_fields',
        extension: ((extensions as any) || {}).user_devices_aggregate_fields,
      }
    );
  },
  get user_devices_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_devices_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_devices_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_devices_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.user_devices_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_devices_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_devices_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_devices_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.user_devices_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.user_devices_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.user_devices_variance_order_by,
            true
          );
        },
      },
      { name: 'user_devices_aggregate_order_by' }
    );
  },
  get user_devices_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_devices_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.user_devices_on_conflict, true);
        },
      },
      { name: 'user_devices_arr_rel_insert_input' }
    );
  },
  get user_devices_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_avg_fields',
        extension: ((extensions as any) || {}).user_devices_avg_fields,
      }
    );
  },
  get user_devices_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_avg_order_by' }
    );
  },
  get user_devices_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_devices_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_devices_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_devices_bool_exp, true),
            true
          );
        },
        get device_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get device_token() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get device_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_devices_bool_exp' }
    );
  },
  get user_devices_constraint() {
    return new EnumNode({ name: 'user_devices_constraint' });
  },
  get user_devices_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_devices_inc_input' }
    );
  },
  get user_devices_insert_input() {
    return new InputNode(
      {
        get device_id() {
          return new InputNodeField(schema.String, true);
        },
        get device_token() {
          return new InputNodeField(schema.String, true);
        },
        get device_type() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_devices_insert_input' }
    );
  },
  get user_devices_max_fields() {
    return new ObjectNode(
      {
        get device_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_devices_max_fields',
        extension: ((extensions as any) || {}).user_devices_max_fields,
      }
    );
  },
  get user_devices_max_order_by() {
    return new InputNode(
      {
        get device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_max_order_by' }
    );
  },
  get user_devices_min_fields() {
    return new ObjectNode(
      {
        get device_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_devices_min_fields',
        extension: ((extensions as any) || {}).user_devices_min_fields,
      }
    );
  },
  get user_devices_min_order_by() {
    return new InputNode(
      {
        get device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_min_order_by' }
    );
  },
  get user_devices_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_devices, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_devices_mutation_response',
        extension: ((extensions as any) || {}).user_devices_mutation_response,
      }
    );
  },
  get user_devices_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.user_devices_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.user_devices_on_conflict, true);
        },
      },
      { name: 'user_devices_obj_rel_insert_input' }
    );
  },
  get user_devices_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.user_devices_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.user_devices_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.user_devices_bool_exp, true);
        },
      },
      { name: 'user_devices_on_conflict' }
    );
  },
  get user_devices_order_by() {
    return new InputNode(
      {
        get device_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_order_by' }
    );
  },
  get user_devices_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'user_devices_pk_columns_input' }
    );
  },
  get user_devices_select_column() {
    return new EnumNode({ name: 'user_devices_select_column' });
  },
  get user_devices_set_input() {
    return new InputNode(
      {
        get device_id() {
          return new InputNodeField(schema.String, true);
        },
        get device_token() {
          return new InputNodeField(schema.String, true);
        },
        get device_type() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_devices_set_input' }
    );
  },
  get user_devices_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_stddev_fields',
        extension: ((extensions as any) || {}).user_devices_stddev_fields,
      }
    );
  },
  get user_devices_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_stddev_order_by' }
    );
  },
  get user_devices_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_stddev_pop_fields',
        extension: ((extensions as any) || {}).user_devices_stddev_pop_fields,
      }
    );
  },
  get user_devices_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_stddev_pop_order_by' }
    );
  },
  get user_devices_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_stddev_samp_fields',
        extension: ((extensions as any) || {}).user_devices_stddev_samp_fields,
      }
    );
  },
  get user_devices_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_stddev_samp_order_by' }
    );
  },
  get user_devices_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_devices_sum_fields',
        extension: ((extensions as any) || {}).user_devices_sum_fields,
      }
    );
  },
  get user_devices_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_sum_order_by' }
    );
  },
  get user_devices_update_column() {
    return new EnumNode({ name: 'user_devices_update_column' });
  },
  get user_devices_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_var_pop_fields',
        extension: ((extensions as any) || {}).user_devices_var_pop_fields,
      }
    );
  },
  get user_devices_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_var_pop_order_by' }
    );
  },
  get user_devices_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_var_samp_fields',
        extension: ((extensions as any) || {}).user_devices_var_samp_fields,
      }
    );
  },
  get user_devices_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_var_samp_order_by' }
    );
  },
  get user_devices_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_devices_variance_fields',
        extension: ((extensions as any) || {}).user_devices_variance_fields,
      }
    );
  },
  get user_devices_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_devices_variance_order_by' }
    );
  },
  get user_images() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_images',
        extension: ((extensions as any) || {}).user_images,
      }
    );
  },
  get user_images_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_images_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_images_aggregate',
        extension: ((extensions as any) || {}).user_images_aggregate,
      }
    );
  },
  get user_images_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.user_images_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.user_images_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.user_images_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.user_images_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_images_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_images_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.user_images_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.user_images_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_images_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_images_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_images_aggregate_fields',
        extension: ((extensions as any) || {}).user_images_aggregate_fields,
      }
    );
  },
  get user_images_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_images_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_images_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_images_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.user_images_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_images_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_images_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_images_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.user_images_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.user_images_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.user_images_variance_order_by, true);
        },
      },
      { name: 'user_images_aggregate_order_by' }
    );
  },
  get user_images_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_images_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.user_images_on_conflict, true);
        },
      },
      { name: 'user_images_arr_rel_insert_input' }
    );
  },
  get user_images_avg_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_avg_fields',
        extension: ((extensions as any) || {}).user_images_avg_fields,
      }
    );
  },
  get user_images_avg_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_avg_order_by' }
    );
  },
  get user_images_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_images_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_images_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_images_bool_exp, true),
            true
          );
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get height() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get label() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get quality() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get uuid() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get width() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_images_bool_exp' }
    );
  },
  get user_images_constraint() {
    return new EnumNode({ name: 'user_images_constraint' });
  },
  get user_images_inc_input() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_images_inc_input' }
    );
  },
  get user_images_insert_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_images_insert_input' }
    );
  },
  get user_images_max_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_images_max_fields',
        extension: ((extensions as any) || {}).user_images_max_fields,
      }
    );
  },
  get user_images_max_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_max_order_by' }
    );
  },
  get user_images_min_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get label() {
          return new FieldNode(schema.String, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get uuid() {
          return new FieldNode(schema.String, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_images_min_fields',
        extension: ((extensions as any) || {}).user_images_min_fields,
      }
    );
  },
  get user_images_min_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_min_order_by' }
    );
  },
  get user_images_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_images, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_images_mutation_response',
        extension: ((extensions as any) || {}).user_images_mutation_response,
      }
    );
  },
  get user_images_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.user_images_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.user_images_on_conflict, true);
        },
      },
      { name: 'user_images_obj_rel_insert_input' }
    );
  },
  get user_images_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.user_images_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.user_images_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.user_images_bool_exp, true);
        },
      },
      { name: 'user_images_on_conflict' }
    );
  },
  get user_images_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get label() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get url() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get uuid() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_order_by' }
    );
  },
  get user_images_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'user_images_pk_columns_input' }
    );
  },
  get user_images_select_column() {
    return new EnumNode({ name: 'user_images_select_column' });
  },
  get user_images_set_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get height() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get label() {
          return new InputNodeField(schema.String, true);
        },
        get quality() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get url() {
          return new InputNodeField(schema.String, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get uuid() {
          return new InputNodeField(schema.String, true);
        },
        get width() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_images_set_input' }
    );
  },
  get user_images_stddev_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_stddev_fields',
        extension: ((extensions as any) || {}).user_images_stddev_fields,
      }
    );
  },
  get user_images_stddev_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_stddev_order_by' }
    );
  },
  get user_images_stddev_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_stddev_pop_fields',
        extension: ((extensions as any) || {}).user_images_stddev_pop_fields,
      }
    );
  },
  get user_images_stddev_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_stddev_pop_order_by' }
    );
  },
  get user_images_stddev_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_stddev_samp_fields',
        extension: ((extensions as any) || {}).user_images_stddev_samp_fields,
      }
    );
  },
  get user_images_stddev_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_stddev_samp_order_by' }
    );
  },
  get user_images_sum_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_images_sum_fields',
        extension: ((extensions as any) || {}).user_images_sum_fields,
      }
    );
  },
  get user_images_sum_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_sum_order_by' }
    );
  },
  get user_images_update_column() {
    return new EnumNode({ name: 'user_images_update_column' });
  },
  get user_images_var_pop_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_var_pop_fields',
        extension: ((extensions as any) || {}).user_images_var_pop_fields,
      }
    );
  },
  get user_images_var_pop_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_var_pop_order_by' }
    );
  },
  get user_images_var_samp_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_var_samp_fields',
        extension: ((extensions as any) || {}).user_images_var_samp_fields,
      }
    );
  },
  get user_images_var_samp_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_var_samp_order_by' }
    );
  },
  get user_images_variance_fields() {
    return new ObjectNode(
      {
        get height() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get quality() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get width() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_images_variance_fields',
        extension: ((extensions as any) || {}).user_images_variance_fields,
      }
    );
  },
  get user_images_variance_order_by() {
    return new InputNode(
      {
        get height() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get quality() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get width() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_images_variance_order_by' }
    );
  },
  get user_life_cycle_view() {
    return new ObjectNode(
      {
        get credit_card() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get debit_card() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get fifth_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_item_uploaded() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_message_sent() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get forth_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get second_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get sign_up_date() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get third_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view',
        extension: ((extensions as any) || {}).user_life_cycle_view,
      }
    );
  },
  get user_life_cycle_view_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_life_cycle_view_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_life_cycle_view, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_life_cycle_view_aggregate',
        extension: ((extensions as any) || {}).user_life_cycle_view_aggregate,
      }
    );
  },
  get user_life_cycle_view_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.user_life_cycle_view_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.user_life_cycle_view_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.user_life_cycle_view_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.user_life_cycle_view_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.user_life_cycle_view_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_life_cycle_view_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_life_cycle_view_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.user_life_cycle_view_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.user_life_cycle_view_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_life_cycle_view_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_life_cycle_view_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_life_cycle_view_aggregate_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_aggregate_fields,
      }
    );
  },
  get user_life_cycle_view_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.user_life_cycle_view_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.user_life_cycle_view_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.user_life_cycle_view_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.user_life_cycle_view_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_life_cycle_view_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_life_cycle_view_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.user_life_cycle_view_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.user_life_cycle_view_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.user_life_cycle_view_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.user_life_cycle_view_variance_order_by,
            true
          );
        },
      },
      { name: 'user_life_cycle_view_aggregate_order_by' }
    );
  },
  get user_life_cycle_view_avg_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_avg_fields',
        extension: ((extensions as any) || {}).user_life_cycle_view_avg_fields,
      }
    );
  },
  get user_life_cycle_view_avg_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_avg_order_by' }
    );
  },
  get user_life_cycle_view_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_life_cycle_view_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_life_cycle_view_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_life_cycle_view_bool_exp, true),
            true
          );
        },
        get credit_card() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get debit_card() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get fifth_share_request() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get first_item_uploaded() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get first_message_sent() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get first_share_request() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get forth_share_request() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get second_share_request() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get sign_up_date() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get third_share_request() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_life_cycle_view_bool_exp' }
    );
  },
  get user_life_cycle_view_max_fields() {
    return new ObjectNode(
      {
        get credit_card() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get debit_card() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get fifth_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_item_uploaded() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_message_sent() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get forth_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get second_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get sign_up_date() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get third_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_max_fields',
        extension: ((extensions as any) || {}).user_life_cycle_view_max_fields,
      }
    );
  },
  get user_life_cycle_view_max_order_by() {
    return new InputNode(
      {
        get credit_card() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_card() {
          return new InputNodeField(schema.order_by, true);
        },
        get fifth_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_item_uploaded() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_message_sent() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get forth_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get sign_up_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get third_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_max_order_by' }
    );
  },
  get user_life_cycle_view_min_fields() {
    return new ObjectNode(
      {
        get credit_card() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get debit_card() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get fifth_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_item_uploaded() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_message_sent() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get first_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get forth_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get second_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get sign_up_date() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get third_share_request() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user() {
          return new FieldNode(schema.String, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_min_fields',
        extension: ((extensions as any) || {}).user_life_cycle_view_min_fields,
      }
    );
  },
  get user_life_cycle_view_min_order_by() {
    return new InputNode(
      {
        get credit_card() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_card() {
          return new InputNodeField(schema.order_by, true);
        },
        get fifth_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_item_uploaded() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_message_sent() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get forth_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get sign_up_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get third_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_min_order_by' }
    );
  },
  get user_life_cycle_view_order_by() {
    return new InputNode(
      {
        get credit_card() {
          return new InputNodeField(schema.order_by, true);
        },
        get debit_card() {
          return new InputNodeField(schema.order_by, true);
        },
        get fifth_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_item_uploaded() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_message_sent() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get forth_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get second_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get sign_up_date() {
          return new InputNodeField(schema.order_by, true);
        },
        get third_share_request() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_order_by' }
    );
  },
  get user_life_cycle_view_select_column() {
    return new EnumNode({ name: 'user_life_cycle_view_select_column' });
  },
  get user_life_cycle_view_stddev_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_stddev_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_stddev_fields,
      }
    );
  },
  get user_life_cycle_view_stddev_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_stddev_order_by' }
    );
  },
  get user_life_cycle_view_stddev_pop_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_stddev_pop_fields,
      }
    );
  },
  get user_life_cycle_view_stddev_pop_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_stddev_pop_order_by' }
    );
  },
  get user_life_cycle_view_stddev_samp_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_stddev_samp_fields,
      }
    );
  },
  get user_life_cycle_view_stddev_samp_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_stddev_samp_order_by' }
    );
  },
  get user_life_cycle_view_sum_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_sum_fields',
        extension: ((extensions as any) || {}).user_life_cycle_view_sum_fields,
      }
    );
  },
  get user_life_cycle_view_sum_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_sum_order_by' }
    );
  },
  get user_life_cycle_view_var_pop_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_var_pop_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_var_pop_fields,
      }
    );
  },
  get user_life_cycle_view_var_pop_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_var_pop_order_by' }
    );
  },
  get user_life_cycle_view_var_samp_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_var_samp_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_var_samp_fields,
      }
    );
  },
  get user_life_cycle_view_var_samp_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_var_samp_order_by' }
    );
  },
  get user_life_cycle_view_variance_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_life_cycle_view_variance_fields',
        extension: ((extensions as any) || {})
          .user_life_cycle_view_variance_fields,
      }
    );
  },
  get user_life_cycle_view_variance_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_life_cycle_view_variance_order_by' }
    );
  },
  get user_lists() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get list_items() {
          return new FieldNode(
            new ArrayNode(schema.list_items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get list_items_aggregate() {
          return new FieldNode(
            schema.list_items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.list_items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.list_items_bool_exp, true);
              },
            }),
            false
          );
        },
        get permanent() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      { name: 'user_lists', extension: ((extensions as any) || {}).user_lists }
    );
  },
  get user_lists_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_lists_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_lists, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_lists_aggregate',
        extension: ((extensions as any) || {}).user_lists_aggregate,
      }
    );
  },
  get user_lists_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.user_lists_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.user_lists_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.user_lists_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.user_lists_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_lists_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_lists_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.user_lists_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.user_lists_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_lists_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_lists_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_lists_aggregate_fields',
        extension: ((extensions as any) || {}).user_lists_aggregate_fields,
      }
    );
  },
  get user_lists_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_lists_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_lists_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_lists_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.user_lists_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_lists_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_lists_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_lists_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.user_lists_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.user_lists_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.user_lists_variance_order_by, true);
        },
      },
      { name: 'user_lists_aggregate_order_by' }
    );
  },
  get user_lists_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_lists_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.user_lists_on_conflict, true);
        },
      },
      { name: 'user_lists_arr_rel_insert_input' }
    );
  },
  get user_lists_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_avg_fields',
        extension: ((extensions as any) || {}).user_lists_avg_fields,
      }
    );
  },
  get user_lists_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_avg_order_by' }
    );
  },
  get user_lists_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_lists_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_lists_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_lists_bool_exp, true),
            true
          );
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get description() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get list_items() {
          return new InputNodeField(schema.list_items_bool_exp, true);
        },
        get permanent() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get title() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_lists_bool_exp' }
    );
  },
  get user_lists_constraint() {
    return new EnumNode({ name: 'user_lists_constraint' });
  },
  get user_lists_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_lists_inc_input' }
    );
  },
  get user_lists_insert_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get list_items() {
          return new InputNodeField(
            schema.list_items_arr_rel_insert_input,
            true
          );
        },
        get permanent() {
          return new InputNodeField(schema.Boolean, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_lists_insert_input' }
    );
  },
  get user_lists_max_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_lists_max_fields',
        extension: ((extensions as any) || {}).user_lists_max_fields,
      }
    );
  },
  get user_lists_max_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_max_order_by' }
    );
  },
  get user_lists_min_fields() {
    return new ObjectNode(
      {
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get description() {
          return new FieldNode(schema.String, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get title() {
          return new FieldNode(schema.String, undefined, true);
        },
        get type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_lists_min_fields',
        extension: ((extensions as any) || {}).user_lists_min_fields,
      }
    );
  },
  get user_lists_min_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_min_order_by' }
    );
  },
  get user_lists_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_lists, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_lists_mutation_response',
        extension: ((extensions as any) || {}).user_lists_mutation_response,
      }
    );
  },
  get user_lists_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.user_lists_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.user_lists_on_conflict, true);
        },
      },
      { name: 'user_lists_obj_rel_insert_input' }
    );
  },
  get user_lists_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.user_lists_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.user_lists_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.user_lists_bool_exp, true);
        },
      },
      { name: 'user_lists_on_conflict' }
    );
  },
  get user_lists_order_by() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get description() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get list_items_aggregate() {
          return new InputNodeField(schema.list_items_aggregate_order_by, true);
        },
        get permanent() {
          return new InputNodeField(schema.order_by, true);
        },
        get title() {
          return new InputNodeField(schema.order_by, true);
        },
        get type() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_order_by' }
    );
  },
  get user_lists_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'user_lists_pk_columns_input' }
    );
  },
  get user_lists_select_column() {
    return new EnumNode({ name: 'user_lists_select_column' });
  },
  get user_lists_set_input() {
    return new InputNode(
      {
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get description() {
          return new InputNodeField(schema.String, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get permanent() {
          return new InputNodeField(schema.Boolean, true);
        },
        get title() {
          return new InputNodeField(schema.String, true);
        },
        get type() {
          return new InputNodeField(schema.String, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_lists_set_input' }
    );
  },
  get user_lists_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_stddev_fields',
        extension: ((extensions as any) || {}).user_lists_stddev_fields,
      }
    );
  },
  get user_lists_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_stddev_order_by' }
    );
  },
  get user_lists_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_stddev_pop_fields',
        extension: ((extensions as any) || {}).user_lists_stddev_pop_fields,
      }
    );
  },
  get user_lists_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_stddev_pop_order_by' }
    );
  },
  get user_lists_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_stddev_samp_fields',
        extension: ((extensions as any) || {}).user_lists_stddev_samp_fields,
      }
    );
  },
  get user_lists_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_stddev_samp_order_by' }
    );
  },
  get user_lists_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_lists_sum_fields',
        extension: ((extensions as any) || {}).user_lists_sum_fields,
      }
    );
  },
  get user_lists_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_sum_order_by' }
    );
  },
  get user_lists_update_column() {
    return new EnumNode({ name: 'user_lists_update_column' });
  },
  get user_lists_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_var_pop_fields',
        extension: ((extensions as any) || {}).user_lists_var_pop_fields,
      }
    );
  },
  get user_lists_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_var_pop_order_by' }
    );
  },
  get user_lists_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_var_samp_fields',
        extension: ((extensions as any) || {}).user_lists_var_samp_fields,
      }
    );
  },
  get user_lists_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_var_samp_order_by' }
    );
  },
  get user_lists_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_lists_variance_fields',
        extension: ((extensions as any) || {}).user_lists_variance_fields,
      }
    );
  },
  get user_lists_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_lists_variance_order_by' }
    );
  },
  get user_messages_view() {
    return new ObjectNode(
      {
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get recipient() {
          return new FieldNode(schema.String, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_messages_view',
        extension: ((extensions as any) || {}).user_messages_view,
      }
    );
  },
  get user_messages_view_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_messages_view_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_messages_view, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_messages_view_aggregate',
        extension: ((extensions as any) || {}).user_messages_view_aggregate,
      }
    );
  },
  get user_messages_view_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.user_messages_view_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_messages_view_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.user_messages_view_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.user_messages_view_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.user_messages_view_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_messages_view_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_messages_view_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.user_messages_view_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.user_messages_view_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_messages_view_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_messages_view_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_messages_view_aggregate_fields',
        extension: ((extensions as any) || {})
          .user_messages_view_aggregate_fields,
      }
    );
  },
  get user_messages_view_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.user_messages_view_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.user_messages_view_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.user_messages_view_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.user_messages_view_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_messages_view_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_messages_view_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.user_messages_view_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.user_messages_view_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.user_messages_view_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.user_messages_view_variance_order_by,
            true
          );
        },
      },
      { name: 'user_messages_view_aggregate_order_by' }
    );
  },
  get user_messages_view_avg_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_avg_fields',
        extension: ((extensions as any) || {}).user_messages_view_avg_fields,
      }
    );
  },
  get user_messages_view_avg_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_avg_order_by' }
    );
  },
  get user_messages_view_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_messages_view_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_messages_view_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_messages_view_bool_exp, true),
            true
          );
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get message() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get recipient() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get sender() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get sender_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_messages_view_bool_exp' }
    );
  },
  get user_messages_view_max_fields() {
    return new ObjectNode(
      {
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get recipient() {
          return new FieldNode(schema.String, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_messages_view_max_fields',
        extension: ((extensions as any) || {}).user_messages_view_max_fields,
      }
    );
  },
  get user_messages_view_max_order_by() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_max_order_by' }
    );
  },
  get user_messages_view_min_fields() {
    return new ObjectNode(
      {
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get message() {
          return new FieldNode(schema.String, undefined, true);
        },
        get recipient() {
          return new FieldNode(schema.String, undefined, true);
        },
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender() {
          return new FieldNode(schema.String, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_messages_view_min_fields',
        extension: ((extensions as any) || {}).user_messages_view_min_fields,
      }
    );
  },
  get user_messages_view_min_order_by() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_min_order_by' }
    );
  },
  get user_messages_view_order_by() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get message() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient() {
          return new InputNodeField(schema.order_by, true);
        },
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_order_by' }
    );
  },
  get user_messages_view_select_column() {
    return new EnumNode({ name: 'user_messages_view_select_column' });
  },
  get user_messages_view_stddev_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_stddev_fields',
        extension: ((extensions as any) || {}).user_messages_view_stddev_fields,
      }
    );
  },
  get user_messages_view_stddev_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_stddev_order_by' }
    );
  },
  get user_messages_view_stddev_pop_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .user_messages_view_stddev_pop_fields,
      }
    );
  },
  get user_messages_view_stddev_pop_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_stddev_pop_order_by' }
    );
  },
  get user_messages_view_stddev_samp_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .user_messages_view_stddev_samp_fields,
      }
    );
  },
  get user_messages_view_stddev_samp_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_stddev_samp_order_by' }
    );
  },
  get user_messages_view_sum_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_messages_view_sum_fields',
        extension: ((extensions as any) || {}).user_messages_view_sum_fields,
      }
    );
  },
  get user_messages_view_sum_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_sum_order_by' }
    );
  },
  get user_messages_view_var_pop_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_var_pop_fields',
        extension: ((extensions as any) || {})
          .user_messages_view_var_pop_fields,
      }
    );
  },
  get user_messages_view_var_pop_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_var_pop_order_by' }
    );
  },
  get user_messages_view_var_samp_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_var_samp_fields',
        extension: ((extensions as any) || {})
          .user_messages_view_var_samp_fields,
      }
    );
  },
  get user_messages_view_var_samp_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_var_samp_order_by' }
    );
  },
  get user_messages_view_variance_fields() {
    return new ObjectNode(
      {
        get recipient_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get sender_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_messages_view_variance_fields',
        extension: ((extensions as any) || {})
          .user_messages_view_variance_fields,
      }
    );
  },
  get user_messages_view_variance_order_by() {
    return new InputNode(
      {
        get recipient_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get sender_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_messages_view_variance_order_by' }
    );
  },
  get user_metadata() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get has_added_item() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get has_added_need() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get has_reserved_item() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get has_upvoted_need() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get recently_rented_items() {
          return new FieldNode(schema._int4, undefined, true);
        },
        get referral_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_metadata',
        extension: ((extensions as any) || {}).user_metadata,
      }
    );
  },
  get user_metadata_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_metadata_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_metadata, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_metadata_aggregate',
        extension: ((extensions as any) || {}).user_metadata_aggregate,
      }
    );
  },
  get user_metadata_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.user_metadata_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.user_metadata_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.user_metadata_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.user_metadata_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_metadata_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_metadata_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.user_metadata_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.user_metadata_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_metadata_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_metadata_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_metadata_aggregate_fields',
        extension: ((extensions as any) || {}).user_metadata_aggregate_fields,
      }
    );
  },
  get user_metadata_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_metadata_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_metadata_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_metadata_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.user_metadata_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_metadata_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_metadata_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_metadata_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.user_metadata_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.user_metadata_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.user_metadata_variance_order_by,
            true
          );
        },
      },
      { name: 'user_metadata_aggregate_order_by' }
    );
  },
  get user_metadata_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_metadata_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.user_metadata_on_conflict, true);
        },
      },
      { name: 'user_metadata_arr_rel_insert_input' }
    );
  },
  get user_metadata_avg_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_avg_fields',
        extension: ((extensions as any) || {}).user_metadata_avg_fields,
      }
    );
  },
  get user_metadata_avg_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_avg_order_by' }
    );
  },
  get user_metadata_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_metadata_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_metadata_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_metadata_bool_exp, true),
            true
          );
        },
        get borrow_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get has_added_item() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get has_added_need() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get has_reserved_item() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get has_upvoted_need() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get item_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get message_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get notification_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get recently_rented_items() {
          return new InputNodeField(schema._int4_comparison_exp, true);
        },
        get referral_code() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get share_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_metadata_bool_exp' }
    );
  },
  get user_metadata_constraint() {
    return new EnumNode({ name: 'user_metadata_constraint' });
  },
  get user_metadata_inc_input() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.Int, true);
        },
        get item_count() {
          return new InputNodeField(schema.Int, true);
        },
        get message_count() {
          return new InputNodeField(schema.Int, true);
        },
        get notification_count() {
          return new InputNodeField(schema.Int, true);
        },
        get share_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_metadata_inc_input' }
    );
  },
  get user_metadata_insert_input() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.Int, true);
        },
        get has_added_item() {
          return new InputNodeField(schema.Boolean, true);
        },
        get has_added_need() {
          return new InputNodeField(schema.Boolean, true);
        },
        get has_reserved_item() {
          return new InputNodeField(schema.Boolean, true);
        },
        get has_upvoted_need() {
          return new InputNodeField(schema.Boolean, true);
        },
        get item_count() {
          return new InputNodeField(schema.Int, true);
        },
        get message_count() {
          return new InputNodeField(schema.Int, true);
        },
        get notification_count() {
          return new InputNodeField(schema.Int, true);
        },
        get recently_rented_items() {
          return new InputNodeField(schema._int4, true);
        },
        get referral_code() {
          return new InputNodeField(schema.String, true);
        },
        get share_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.Int, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_metadata_insert_input' }
    );
  },
  get user_metadata_max_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_metadata_max_fields',
        extension: ((extensions as any) || {}).user_metadata_max_fields,
      }
    );
  },
  get user_metadata_max_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_max_order_by' }
    );
  },
  get user_metadata_min_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get referral_code() {
          return new FieldNode(schema.String, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_metadata_min_fields',
        extension: ((extensions as any) || {}).user_metadata_min_fields,
      }
    );
  },
  get user_metadata_min_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_min_order_by' }
    );
  },
  get user_metadata_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_metadata, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_metadata_mutation_response',
        extension: ((extensions as any) || {}).user_metadata_mutation_response,
      }
    );
  },
  get user_metadata_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.user_metadata_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.user_metadata_on_conflict, true);
        },
      },
      { name: 'user_metadata_obj_rel_insert_input' }
    );
  },
  get user_metadata_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.user_metadata_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.user_metadata_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.user_metadata_bool_exp, true);
        },
      },
      { name: 'user_metadata_on_conflict' }
    );
  },
  get user_metadata_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get has_added_item() {
          return new InputNodeField(schema.order_by, true);
        },
        get has_added_need() {
          return new InputNodeField(schema.order_by, true);
        },
        get has_reserved_item() {
          return new InputNodeField(schema.order_by, true);
        },
        get has_upvoted_need() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get recently_rented_items() {
          return new InputNodeField(schema.order_by, true);
        },
        get referral_code() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_order_by' }
    );
  },
  get user_metadata_select_column() {
    return new EnumNode({ name: 'user_metadata_select_column' });
  },
  get user_metadata_set_input() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.Int, true);
        },
        get has_added_item() {
          return new InputNodeField(schema.Boolean, true);
        },
        get has_added_need() {
          return new InputNodeField(schema.Boolean, true);
        },
        get has_reserved_item() {
          return new InputNodeField(schema.Boolean, true);
        },
        get has_upvoted_need() {
          return new InputNodeField(schema.Boolean, true);
        },
        get item_count() {
          return new InputNodeField(schema.Int, true);
        },
        get message_count() {
          return new InputNodeField(schema.Int, true);
        },
        get notification_count() {
          return new InputNodeField(schema.Int, true);
        },
        get recently_rented_items() {
          return new InputNodeField(schema._int4, true);
        },
        get referral_code() {
          return new InputNodeField(schema.String, true);
        },
        get share_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.Int, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.Int, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_metadata_set_input' }
    );
  },
  get user_metadata_stddev_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_stddev_fields',
        extension: ((extensions as any) || {}).user_metadata_stddev_fields,
      }
    );
  },
  get user_metadata_stddev_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_stddev_order_by' }
    );
  },
  get user_metadata_stddev_pop_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_stddev_pop_fields',
        extension: ((extensions as any) || {}).user_metadata_stddev_pop_fields,
      }
    );
  },
  get user_metadata_stddev_pop_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_stddev_pop_order_by' }
    );
  },
  get user_metadata_stddev_samp_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_stddev_samp_fields',
        extension: ((extensions as any) || {}).user_metadata_stddev_samp_fields,
      }
    );
  },
  get user_metadata_stddev_samp_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_stddev_samp_order_by' }
    );
  },
  get user_metadata_sum_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_metadata_sum_fields',
        extension: ((extensions as any) || {}).user_metadata_sum_fields,
      }
    );
  },
  get user_metadata_sum_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_sum_order_by' }
    );
  },
  get user_metadata_update_column() {
    return new EnumNode({ name: 'user_metadata_update_column' });
  },
  get user_metadata_var_pop_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_var_pop_fields',
        extension: ((extensions as any) || {}).user_metadata_var_pop_fields,
      }
    );
  },
  get user_metadata_var_pop_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_var_pop_order_by' }
    );
  },
  get user_metadata_var_samp_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_var_samp_fields',
        extension: ((extensions as any) || {}).user_metadata_var_samp_fields,
      }
    );
  },
  get user_metadata_var_samp_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_var_samp_order_by' }
    );
  },
  get user_metadata_variance_fields() {
    return new ObjectNode(
      {
        get borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get item_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get share_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_borrow_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_active_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_approved_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_history_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_lend_notification_pending_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_message_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get unread_notification_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_count() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_metadata_variance_fields',
        extension: ((extensions as any) || {}).user_metadata_variance_fields,
      }
    );
  },
  get user_metadata_variance_order_by() {
    return new InputNode(
      {
        get borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get share_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_borrow_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_active_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_approved_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_history_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_lend_notification_pending_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_message_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get unread_notification_count() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_count() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_metadata_variance_order_by' }
    );
  },
  get user_permissions() {
    return new ObjectNode(
      {
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get permission() {
          return new FieldNode(schema.permissions, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user() {
          return new FieldNode(schema.users, undefined, false);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get user_permission_id() {
          return new FieldNode(schema.Int, undefined, false);
        },
      },
      {
        name: 'user_permissions',
        extension: ((extensions as any) || {}).user_permissions,
      }
    );
  },
  get user_permissions_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_permissions_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_permissions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_permissions_aggregate',
        extension: ((extensions as any) || {}).user_permissions_aggregate,
      }
    );
  },
  get user_permissions_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.user_permissions_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.user_permissions_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.user_permissions_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.user_permissions_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_permissions_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_permissions_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.user_permissions_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.user_permissions_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_permissions_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_permissions_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_permissions_aggregate_fields',
        extension: ((extensions as any) || {})
          .user_permissions_aggregate_fields,
      }
    );
  },
  get user_permissions_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_permissions_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_permissions_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_permissions_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(
            schema.user_permissions_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_permissions_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_permissions_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_permissions_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(
            schema.user_permissions_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.user_permissions_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.user_permissions_variance_order_by,
            true
          );
        },
      },
      { name: 'user_permissions_aggregate_order_by' }
    );
  },
  get user_permissions_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_permissions_insert_input, false),
            false
          );
        },
      },
      { name: 'user_permissions_arr_rel_insert_input' }
    );
  },
  get user_permissions_avg_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_avg_fields',
        extension: ((extensions as any) || {}).user_permissions_avg_fields,
      }
    );
  },
  get user_permissions_avg_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_avg_order_by' }
    );
  },
  get user_permissions_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_permissions_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_permissions_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_permissions_bool_exp, true),
            true
          );
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get permission() {
          return new InputNodeField(schema.permissions_bool_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
      },
      { name: 'user_permissions_bool_exp' }
    );
  },
  get user_permissions_inc_input() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_permissions_inc_input' }
    );
  },
  get user_permissions_insert_input() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get permission() {
          return new InputNodeField(
            schema.permissions_obj_rel_insert_input,
            true
          );
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_permissions_insert_input' }
    );
  },
  get user_permissions_max_fields() {
    return new ObjectNode(
      {
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_permissions_max_fields',
        extension: ((extensions as any) || {}).user_permissions_max_fields,
      }
    );
  },
  get user_permissions_max_order_by() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_max_order_by' }
    );
  },
  get user_permissions_min_fields() {
    return new ObjectNode(
      {
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_permissions_min_fields',
        extension: ((extensions as any) || {}).user_permissions_min_fields,
      }
    );
  },
  get user_permissions_min_order_by() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_min_order_by' }
    );
  },
  get user_permissions_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_permissions, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_permissions_mutation_response',
        extension: ((extensions as any) || {})
          .user_permissions_mutation_response,
      }
    );
  },
  get user_permissions_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.user_permissions_insert_input,
            false
          );
        },
      },
      { name: 'user_permissions_obj_rel_insert_input' }
    );
  },
  get user_permissions_order_by() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get permission() {
          return new InputNodeField(schema.permissions_order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_order_by' }
    );
  },
  get user_permissions_select_column() {
    return new EnumNode({ name: 'user_permissions_select_column' });
  },
  get user_permissions_set_input() {
    return new InputNode(
      {
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user_id() {
          return new InputNodeField(schema.Int, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_permissions_set_input' }
    );
  },
  get user_permissions_stddev_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_stddev_fields',
        extension: ((extensions as any) || {}).user_permissions_stddev_fields,
      }
    );
  },
  get user_permissions_stddev_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_stddev_order_by' }
    );
  },
  get user_permissions_stddev_pop_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .user_permissions_stddev_pop_fields,
      }
    );
  },
  get user_permissions_stddev_pop_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_stddev_pop_order_by' }
    );
  },
  get user_permissions_stddev_samp_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .user_permissions_stddev_samp_fields,
      }
    );
  },
  get user_permissions_stddev_samp_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_stddev_samp_order_by' }
    );
  },
  get user_permissions_sum_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_permissions_sum_fields',
        extension: ((extensions as any) || {}).user_permissions_sum_fields,
      }
    );
  },
  get user_permissions_sum_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_sum_order_by' }
    );
  },
  get user_permissions_var_pop_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_var_pop_fields',
        extension: ((extensions as any) || {}).user_permissions_var_pop_fields,
      }
    );
  },
  get user_permissions_var_pop_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_var_pop_order_by' }
    );
  },
  get user_permissions_var_samp_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_var_samp_fields',
        extension: ((extensions as any) || {}).user_permissions_var_samp_fields,
      }
    );
  },
  get user_permissions_var_samp_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_var_samp_order_by' }
    );
  },
  get user_permissions_variance_fields() {
    return new ObjectNode(
      {
        get user_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get user_permission_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_permissions_variance_fields',
        extension: ((extensions as any) || {}).user_permissions_variance_fields,
      }
    );
  },
  get user_permissions_variance_order_by() {
    return new InputNode(
      {
        get user_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get user_permission_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_permissions_variance_order_by' }
    );
  },
  get user_reviews() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation() {
          return new FieldNode(schema.reservations, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get user() {
          return new FieldNode(schema.users, undefined, true);
        },
        get userBySubjectId() {
          return new FieldNode(schema.users, undefined, true);
        },
      },
      {
        name: 'user_reviews',
        extension: ((extensions as any) || {}).user_reviews,
      }
    );
  },
  get user_reviews_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.user_reviews_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_reviews_aggregate',
        extension: ((extensions as any) || {}).user_reviews_aggregate,
      }
    );
  },
  get user_reviews_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.user_reviews_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.user_reviews_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.user_reviews_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(
            schema.user_reviews_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.user_reviews_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.user_reviews_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.user_reviews_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(
            schema.user_reviews_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.user_reviews_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.user_reviews_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'user_reviews_aggregate_fields',
        extension: ((extensions as any) || {}).user_reviews_aggregate_fields,
      }
    );
  },
  get user_reviews_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.user_reviews_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.user_reviews_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.user_reviews_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.user_reviews_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.user_reviews_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.user_reviews_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(schema.user_reviews_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.user_reviews_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(
            schema.user_reviews_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.user_reviews_variance_order_by,
            true
          );
        },
      },
      { name: 'user_reviews_aggregate_order_by' }
    );
  },
  get user_reviews_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.user_reviews_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.user_reviews_on_conflict, true);
        },
      },
      { name: 'user_reviews_arr_rel_insert_input' }
    );
  },
  get user_reviews_avg_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_avg_fields',
        extension: ((extensions as any) || {}).user_reviews_avg_fields,
      }
    );
  },
  get user_reviews_avg_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_avg_order_by' }
    );
  },
  get user_reviews_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.user_reviews_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.user_reviews_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.user_reviews_bool_exp, true),
            true
          );
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get rating() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get user() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get userBySubjectId() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'user_reviews_bool_exp' }
    );
  },
  get user_reviews_constraint() {
    return new EnumNode({ name: 'user_reviews_constraint' });
  },
  get user_reviews_inc_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get rating() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'user_reviews_inc_input' }
    );
  },
  get user_reviews_insert_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get rating() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation() {
          return new InputNodeField(
            schema.reservations_obj_rel_insert_input,
            true
          );
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get user() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
        get userBySubjectId() {
          return new InputNodeField(schema.users_obj_rel_insert_input, true);
        },
      },
      { name: 'user_reviews_insert_input' }
    );
  },
  get user_reviews_max_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'user_reviews_max_fields',
        extension: ((extensions as any) || {}).user_reviews_max_fields,
      }
    );
  },
  get user_reviews_max_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_max_order_by' }
    );
  },
  get user_reviews_min_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'user_reviews_min_fields',
        extension: ((extensions as any) || {}).user_reviews_min_fields,
      }
    );
  },
  get user_reviews_min_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_min_order_by' }
    );
  },
  get user_reviews_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'user_reviews_mutation_response',
        extension: ((extensions as any) || {}).user_reviews_mutation_response,
      }
    );
  },
  get user_reviews_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.user_reviews_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.user_reviews_on_conflict, true);
        },
      },
      { name: 'user_reviews_obj_rel_insert_input' }
    );
  },
  get user_reviews_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.user_reviews_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.user_reviews_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.user_reviews_bool_exp, true);
        },
      },
      { name: 'user_reviews_on_conflict' }
    );
  },
  get user_reviews_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation() {
          return new InputNodeField(schema.reservations_order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get user() {
          return new InputNodeField(schema.users_order_by, true);
        },
        get userBySubjectId() {
          return new InputNodeField(schema.users_order_by, true);
        },
      },
      { name: 'user_reviews_order_by' }
    );
  },
  get user_reviews_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'user_reviews_pk_columns_input' }
    );
  },
  get user_reviews_select_column() {
    return new EnumNode({ name: 'user_reviews_select_column' });
  },
  get user_reviews_set_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get rating() {
          return new InputNodeField(schema.Int, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.Int, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.Int, true);
        },
        get subject_id() {
          return new InputNodeField(schema.Int, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'user_reviews_set_input' }
    );
  },
  get user_reviews_stddev_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_stddev_fields',
        extension: ((extensions as any) || {}).user_reviews_stddev_fields,
      }
    );
  },
  get user_reviews_stddev_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_stddev_order_by' }
    );
  },
  get user_reviews_stddev_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_stddev_pop_fields',
        extension: ((extensions as any) || {}).user_reviews_stddev_pop_fields,
      }
    );
  },
  get user_reviews_stddev_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_stddev_pop_order_by' }
    );
  },
  get user_reviews_stddev_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_stddev_samp_fields',
        extension: ((extensions as any) || {}).user_reviews_stddev_samp_fields,
      }
    );
  },
  get user_reviews_stddev_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_stddev_samp_order_by' }
    );
  },
  get user_reviews_sum_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'user_reviews_sum_fields',
        extension: ((extensions as any) || {}).user_reviews_sum_fields,
      }
    );
  },
  get user_reviews_sum_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_sum_order_by' }
    );
  },
  get user_reviews_update_column() {
    return new EnumNode({ name: 'user_reviews_update_column' });
  },
  get user_reviews_var_pop_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_var_pop_fields',
        extension: ((extensions as any) || {}).user_reviews_var_pop_fields,
      }
    );
  },
  get user_reviews_var_pop_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_var_pop_order_by' }
    );
  },
  get user_reviews_var_samp_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_var_samp_fields',
        extension: ((extensions as any) || {}).user_reviews_var_samp_fields,
      }
    );
  },
  get user_reviews_var_samp_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_var_samp_order_by' }
    );
  },
  get user_reviews_variance_fields() {
    return new ObjectNode(
      {
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reservation_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get reviewer_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get subject_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'user_reviews_variance_fields',
        extension: ((extensions as any) || {}).user_reviews_variance_fields,
      }
    );
  },
  get user_reviews_variance_order_by() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get reservation_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get reviewer_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get subject_id() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'user_reviews_variance_order_by' }
    );
  },
  get users() {
    return new ObjectNode(
      {
        get allow_marketing() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get avatar_thumb_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get avatar_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get bad_actors_associated_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_associated_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_associated_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_associated_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.bad_actors_associated_users_order_by,
                    true
                  ),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_associated_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users() {
          return new FieldNode(
            new ArrayNode(schema.bad_actors_users, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bad_actors_users_aggregate() {
          return new FieldNode(
            schema.bad_actors_users_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.bad_actors_users_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.bad_actors_users_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get bio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get birthdate() {
          return new FieldNode(schema.date, undefined, true);
        },
        get borrower_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get borrower_type_notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get charge_account_records() {
          return new FieldNode(
            new ArrayNode(schema.charge_account_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_account_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_account_records_aggregate() {
          return new FieldNode(
            schema.charge_account_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.charge_account_records_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_account_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_account_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts() {
          return new FieldNode(
            new ArrayNode(schema.charge_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charge_accounts_aggregate() {
          return new FieldNode(
            schema.charge_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charge_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.charge_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get charges() {
          return new FieldNode(
            new ArrayNode(schema.charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get charges_aggregate() {
          return new FieldNode(
            schema.charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.charges_bool_exp, true);
              },
            }),
            false
          );
        },
        get checkr_candidate_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get credit_transactions() {
          return new FieldNode(
            new ArrayNode(schema.credit_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get credit_transactions_aggregate() {
          return new FieldNode(
            schema.credit_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.credit_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.credit_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get daily_statistics() {
          return new FieldNode(
            new ArrayNode(schema.daily_statistics, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get daily_statistics_aggregate() {
          return new FieldNode(
            schema.daily_statistics_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.daily_statistics_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.daily_statistics_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get default_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get device_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get email() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get fluidLedgersByCreditUserId() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluidLedgersByCreditUserId_aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluidLedgersByDebitUserId() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluidLedgersByDebitUserId_aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluidTransactionsByVendorId() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluidTransactionsByVendorId_aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_ledgers() {
          return new FieldNode(
            new ArrayNode(schema.fluid_ledger, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_ledgers_aggregate() {
          return new FieldNode(
            schema.fluid_ledger_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_ledger_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.fluid_ledger_bool_exp, true);
              },
            }),
            false
          );
        },
        get fluid_transactions() {
          return new FieldNode(
            new ArrayNode(schema.fluid_transactions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get fluid_transactions_aggregate() {
          return new FieldNode(
            schema.fluid_transactions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.fluid_transactions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.fluid_transactions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get founder() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get general_charges() {
          return new FieldNode(
            new ArrayNode(schema.general_charges, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_charges_aggregate() {
          return new FieldNode(
            schema.general_charges_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_charges_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_charges_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers() {
          return new FieldNode(
            new ArrayNode(schema.general_transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get general_transfers_aggregate() {
          return new FieldNode(
            schema.general_transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.general_transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.general_transfers_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get home_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get identifications() {
          return new FieldNode(
            new ArrayNode(schema.identifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get identifications_aggregate() {
          return new FieldNode(
            schema.identifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.identifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.identifications_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get item_reviews() {
          return new FieldNode(
            new ArrayNode(schema.item_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_reviews_aggregate() {
          return new FieldNode(
            schema.item_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.item_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get item_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.item_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get item_stakeholders_aggregate() {
          return new FieldNode(
            schema.item_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.item_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.item_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get items() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get itemsByFvipId() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get itemsByFvipId_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get itemsByMaintenanceManagerId() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get itemsByMaintenanceManagerId_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get itemsByUserId() {
          return new FieldNode(
            new ArrayNode(schema.items, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get itemsByUserId_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get items_aggregate() {
          return new FieldNode(
            schema.items_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.items_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.items_bool_exp, true);
              },
            }),
            false
          );
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get lender_payout_reports_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get lender_reports_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get location() {
          return new FieldNode(schema.locations, undefined, true);
        },
        get locationByHomeLocationId() {
          return new FieldNode(schema.locations, undefined, true);
        },
        get locations() {
          return new FieldNode(
            new ArrayNode(schema.locations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, true);
              },
            }),
            false
          );
        },
        get locations_aggregate() {
          return new FieldNode(
            schema.locations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.locations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.locations_bool_exp, true);
              },
            }),
            false
          );
        },
        get market() {
          return new FieldNode(schema.markets, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get messages() {
          return new FieldNode(
            new ArrayNode(schema.messages, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messagesBySenderId() {
          return new FieldNode(
            new ArrayNode(schema.messages, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messagesBySenderId_aggregate() {
          return new FieldNode(
            schema.messages_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get messages_aggregate() {
          return new FieldNode(
            schema.messages_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.messages_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.messages_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications() {
          return new FieldNode(
            new ArrayNode(schema.notifications, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get notifications_aggregate() {
          return new FieldNode(
            schema.notifications_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.notifications_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.notifications_bool_exp, true);
              },
            }),
            false
          );
        },
        get oauth_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oauth_provider() {
          return new FieldNode(schema.String, undefined, true);
        },
        get password_hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payment_accounts() {
          return new FieldNode(
            new ArrayNode(schema.payment_accounts, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payment_accounts_aggregate() {
          return new FieldNode(
            schema.payment_accounts_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.payment_accounts_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.payment_accounts_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get phone_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get phone_number_details() {
          return new FieldNode(
            schema.jsonb,
            new Arguments({
              get path() {
                return new ArgumentsField(schema.String, true);
              },
            }),
            true
          );
        },
        get phone_number_informations() {
          return new FieldNode(
            new ArrayNode(schema.phone_number_information, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.phone_number_information_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_informations_aggregate() {
          return new FieldNode(
            schema.phone_number_information_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.phone_number_information_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.phone_number_information_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.phone_number_information_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get phone_number_verified() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get pictures() {
          return new FieldNode(schema._jsonb, undefined, true);
        },
        get promo_code() {
          return new FieldNode(schema.promo_codes, undefined, true);
        },
        get promo_code_uses() {
          return new FieldNode(
            new ArrayNode(schema.promo_code_uses, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get promo_code_uses_aggregate() {
          return new FieldNode(
            schema.promo_code_uses_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.promo_code_uses_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.promo_code_uses_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get referral_codes() {
          return new FieldNode(
            new ArrayNode(schema.referral_codes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.referral_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get referral_codes_aggregate() {
          return new FieldNode(
            schema.referral_codes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.referral_codes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.referral_codes_bool_exp, true);
              },
            }),
            false
          );
        },
        get refresh_tokens() {
          return new FieldNode(
            new ArrayNode(schema.refresh_tokens, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refresh_tokens_bool_exp, true);
              },
            }),
            false
          );
        },
        get refresh_tokens_aggregate() {
          return new FieldNode(
            schema.refresh_tokens_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.refresh_tokens_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.refresh_tokens_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservationReviewsByLenderId() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservationReviewsByLenderId_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservationReviewsByReviewerId() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservationReviewsByReviewerId_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservationReviewsBySubjectId() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservationReviewsBySubjectId_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews() {
          return new FieldNode(
            new ArrayNode(schema.reservation_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_reviews_aggregate() {
          return new FieldNode(
            schema.reservation_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_reviews_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders() {
          return new FieldNode(
            new ArrayNode(schema.reservation_stakeholders, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservation_stakeholders_aggregate() {
          return new FieldNode(
            schema.reservation_stakeholders_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.reservation_stakeholders_select_column,
                    true
                  ),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservation_stakeholders_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.reservation_stakeholders_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get reservations() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservationsByRenterId() {
          return new FieldNode(
            new ArrayNode(schema.reservations, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservationsByRenterId_aggregate() {
          return new FieldNode(
            schema.reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get reservations_aggregate() {
          return new FieldNode(
            schema.reservations_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.reservations_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.reservations_bool_exp, true);
              },
            }),
            false
          );
        },
        get role() {
          return new FieldNode(schema.String, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get search_vector() {
          return new FieldNode(schema.tsvector, undefined, true);
        },
        get suspended_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get suspension_records() {
          return new FieldNode(
            new ArrayNode(schema.suspension_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get suspension_records_aggregate() {
          return new FieldNode(
            schema.suspension_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.suspension_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.suspension_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records() {
          return new FieldNode(
            new ArrayNode(schema.telematic_records, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_records_aggregate() {
          return new FieldNode(
            schema.telematic_records_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.telematic_records_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.telematic_records_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get telematic_use_enabled() {
          return new FieldNode(schema.Boolean, undefined, true);
        },
        get transfers() {
          return new FieldNode(
            new ArrayNode(schema.transfers, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_aggregate() {
          return new FieldNode(
            schema.transfers_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s() {
          return new FieldNode(
            new ArrayNode(schema.transfers_v2, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get transfers_v2s_aggregate() {
          return new FieldNode(
            schema.transfers_v2_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.transfers_v2_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.transfers_v2_bool_exp, true);
              },
            }),
            false
          );
        },
        get trust_index() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get upvotes() {
          return new FieldNode(
            new ArrayNode(schema.upvotes, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get upvotes_aggregate() {
          return new FieldNode(
            schema.upvotes_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.upvotes_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.upvotes_bool_exp, true);
              },
            }),
            false
          );
        },
        get userBlocksByBlockingUserId() {
          return new FieldNode(
            new ArrayNode(schema.user_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get userBlocksByBlockingUserId_aggregate() {
          return new FieldNode(
            schema.user_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get userReviewsBySubjectId() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get userReviewsBySubjectId_aggregate() {
          return new FieldNode(
            schema.user_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_blocks() {
          return new FieldNode(
            new ArrayNode(schema.user_blocks, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_blocks_aggregate() {
          return new FieldNode(
            schema.user_blocks_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_blocks_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_blocks_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_devices() {
          return new FieldNode(
            new ArrayNode(schema.user_devices, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_devices_aggregate() {
          return new FieldNode(
            schema.user_devices_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_devices_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_devices_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_images() {
          return new FieldNode(
            new ArrayNode(schema.user_images, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_images_aggregate() {
          return new FieldNode(
            schema.user_images_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_images_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_images_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_lists() {
          return new FieldNode(
            new ArrayNode(schema.user_lists, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_lists_aggregate() {
          return new FieldNode(
            schema.user_lists_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_lists_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_lists_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_metadata() {
          return new FieldNode(
            new ArrayNode(schema.user_metadata, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_metadata_aggregate() {
          return new FieldNode(
            schema.user_metadata_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_metadata_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_metadata_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_permissions() {
          return new FieldNode(
            new ArrayNode(schema.user_permissions, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_permissions_aggregate() {
          return new FieldNode(
            schema.user_permissions_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_permissions_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(
                  schema.user_permissions_bool_exp,
                  true
                );
              },
            }),
            false
          );
        },
        get user_reviews() {
          return new FieldNode(
            new ArrayNode(schema.user_reviews, false),
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get user_reviews_aggregate() {
          return new FieldNode(
            schema.user_reviews_aggregate,
            new Arguments({
              get distinct_on() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_select_column, true),
                  true
                );
              },
              get limit() {
                return new ArgumentsField(schema.Int, true);
              },
              get offset() {
                return new ArgumentsField(schema.Int, true);
              },
              get order_by() {
                return new ArgumentsField(
                  new ArrayNode(schema.user_reviews_order_by, true),
                  true
                );
              },
              get where() {
                return new ArgumentsField(schema.user_reviews_bool_exp, true);
              },
            }),
            false
          );
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get version() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      { name: 'users', extension: ((extensions as any) || {}).users }
    );
  },
  get users_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(schema.users_aggregate_fields, undefined, true);
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'users_aggregate',
        extension: ((extensions as any) || {}).users_aggregate,
      }
    );
  },
  get users_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(schema.users_avg_fields, undefined, true);
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(schema.users_select_column, true),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(schema.users_max_fields, undefined, true);
        },
        get min() {
          return new FieldNode(schema.users_min_fields, undefined, true);
        },
        get stddev() {
          return new FieldNode(schema.users_stddev_fields, undefined, true);
        },
        get stddev_pop() {
          return new FieldNode(schema.users_stddev_pop_fields, undefined, true);
        },
        get stddev_samp() {
          return new FieldNode(
            schema.users_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(schema.users_sum_fields, undefined, true);
        },
        get var_pop() {
          return new FieldNode(schema.users_var_pop_fields, undefined, true);
        },
        get var_samp() {
          return new FieldNode(schema.users_var_samp_fields, undefined, true);
        },
        get variance() {
          return new FieldNode(schema.users_variance_fields, undefined, true);
        },
      },
      {
        name: 'users_aggregate_fields',
        extension: ((extensions as any) || {}).users_aggregate_fields,
      }
    );
  },
  get users_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(schema.users_avg_order_by, true);
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(schema.users_max_order_by, true);
        },
        get min() {
          return new InputNodeField(schema.users_min_order_by, true);
        },
        get stddev() {
          return new InputNodeField(schema.users_stddev_order_by, true);
        },
        get stddev_pop() {
          return new InputNodeField(schema.users_stddev_pop_order_by, true);
        },
        get stddev_samp() {
          return new InputNodeField(schema.users_stddev_samp_order_by, true);
        },
        get sum() {
          return new InputNodeField(schema.users_sum_order_by, true);
        },
        get var_pop() {
          return new InputNodeField(schema.users_var_pop_order_by, true);
        },
        get var_samp() {
          return new InputNodeField(schema.users_var_samp_order_by, true);
        },
        get variance() {
          return new InputNodeField(schema.users_variance_order_by, true);
        },
      },
      { name: 'users_aggregate_order_by' }
    );
  },
  get users_append_input() {
    return new InputNode(
      {
        get phone_number_details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'users_append_input' }
    );
  },
  get users_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.users_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(schema.users_on_conflict, true);
        },
      },
      { name: 'users_arr_rel_insert_input' }
    );
  },
  get users_avg_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_avg_fields',
        extension: ((extensions as any) || {}).users_avg_fields,
      }
    );
  },
  get users_avg_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_avg_order_by' }
    );
  },
  get users_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.users_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.users_bool_exp, true),
            true
          );
        },
        get allow_marketing() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get avatar_thumb_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get avatar_url() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric_comparison_exp, true);
        },
        get bad_actors_associated_users() {
          return new InputNodeField(
            schema.bad_actors_associated_users_bool_exp,
            true
          );
        },
        get bad_actors_users() {
          return new InputNodeField(schema.bad_actors_users_bool_exp, true);
        },
        get bio() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get birthdate() {
          return new InputNodeField(schema.date_comparison_exp, true);
        },
        get borrower_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get borrower_type_notes() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get charge_account_records() {
          return new InputNodeField(
            schema.charge_account_records_bool_exp,
            true
          );
        },
        get charge_accounts() {
          return new InputNodeField(schema.charge_accounts_bool_exp, true);
        },
        get charges() {
          return new InputNodeField(schema.charges_bool_exp, true);
        },
        get checkr_candidate_id() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get credit_transactions() {
          return new InputNodeField(schema.credit_transactions_bool_exp, true);
        },
        get daily_statistics() {
          return new InputNodeField(schema.daily_statistics_bool_exp, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get device_token() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get device_type() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get email() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get first_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get fluidLedgersByCreditUserId() {
          return new InputNodeField(schema.fluid_ledger_bool_exp, true);
        },
        get fluidLedgersByDebitUserId() {
          return new InputNodeField(schema.fluid_ledger_bool_exp, true);
        },
        get fluidTransactionsByVendorId() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get fluid_ledgers() {
          return new InputNodeField(schema.fluid_ledger_bool_exp, true);
        },
        get fluid_transactions() {
          return new InputNodeField(schema.fluid_transactions_bool_exp, true);
        },
        get founder() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get general_charges() {
          return new InputNodeField(schema.general_charges_bool_exp, true);
        },
        get general_transfers() {
          return new InputNodeField(schema.general_transfers_bool_exp, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get identifications() {
          return new InputNodeField(schema.identifications_bool_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get item_reviews() {
          return new InputNodeField(schema.item_reviews_bool_exp, true);
        },
        get item_stakeholders() {
          return new InputNodeField(schema.item_stakeholders_bool_exp, true);
        },
        get items() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get itemsByFvipId() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get itemsByMaintenanceManagerId() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get itemsByUserId() {
          return new InputNodeField(schema.items_bool_exp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get lender_payout_reports_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get lender_reports_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get location() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
        get locationByHomeLocationId() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
        get locations() {
          return new InputNodeField(schema.locations_bool_exp, true);
        },
        get market() {
          return new InputNodeField(schema.markets_bool_exp, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint_comparison_exp, true);
        },
        get messages() {
          return new InputNodeField(schema.messages_bool_exp, true);
        },
        get messagesBySenderId() {
          return new InputNodeField(schema.messages_bool_exp, true);
        },
        get notifications() {
          return new InputNodeField(schema.notifications_bool_exp, true);
        },
        get oauth_identifier() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get oauth_provider() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get password_hash() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get payment_accounts() {
          return new InputNodeField(schema.payment_accounts_bool_exp, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get phone_number() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get phone_number_details() {
          return new InputNodeField(schema.jsonb_comparison_exp, true);
        },
        get phone_number_informations() {
          return new InputNodeField(
            schema.phone_number_information_bool_exp,
            true
          );
        },
        get phone_number_verified() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb_comparison_exp, true);
        },
        get promo_code() {
          return new InputNodeField(schema.promo_codes_bool_exp, true);
        },
        get promo_code_uses() {
          return new InputNodeField(schema.promo_code_uses_bool_exp, true);
        },
        get referral_codes() {
          return new InputNodeField(schema.referral_codes_bool_exp, true);
        },
        get refresh_tokens() {
          return new InputNodeField(schema.refresh_tokens_bool_exp, true);
        },
        get reservationReviewsByLenderId() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get reservationReviewsByReviewerId() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get reservationReviewsBySubjectId() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get reservation_reviews() {
          return new InputNodeField(schema.reservation_reviews_bool_exp, true);
        },
        get reservation_stakeholders() {
          return new InputNodeField(
            schema.reservation_stakeholders_bool_exp,
            true
          );
        },
        get reservations() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get reservationsByRenterId() {
          return new InputNodeField(schema.reservations_bool_exp, true);
        },
        get role() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get search_vector() {
          return new InputNodeField(schema.tsvector_comparison_exp, true);
        },
        get suspended_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get suspension_records() {
          return new InputNodeField(schema.suspension_records_bool_exp, true);
        },
        get telematic_records() {
          return new InputNodeField(schema.telematic_records_bool_exp, true);
        },
        get telematic_use_enabled() {
          return new InputNodeField(schema.Boolean_comparison_exp, true);
        },
        get transfers() {
          return new InputNodeField(schema.transfers_bool_exp, true);
        },
        get transfers_v2s() {
          return new InputNodeField(schema.transfers_v2_bool_exp, true);
        },
        get trust_index() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get upvotes() {
          return new InputNodeField(schema.upvotes_bool_exp, true);
        },
        get userBlocksByBlockingUserId() {
          return new InputNodeField(schema.user_blocks_bool_exp, true);
        },
        get userReviewsBySubjectId() {
          return new InputNodeField(schema.user_reviews_bool_exp, true);
        },
        get user_blocks() {
          return new InputNodeField(schema.user_blocks_bool_exp, true);
        },
        get user_devices() {
          return new InputNodeField(schema.user_devices_bool_exp, true);
        },
        get user_images() {
          return new InputNodeField(schema.user_images_bool_exp, true);
        },
        get user_lists() {
          return new InputNodeField(schema.user_lists_bool_exp, true);
        },
        get user_metadata() {
          return new InputNodeField(schema.user_metadata_bool_exp, true);
        },
        get user_permissions() {
          return new InputNodeField(schema.user_permissions_bool_exp, true);
        },
        get user_reviews() {
          return new InputNodeField(schema.user_reviews_bool_exp, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get version() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
      },
      { name: 'users_bool_exp' }
    );
  },
  get users_constraint() {
    return new EnumNode({ name: 'users_constraint' });
  },
  get users_delete_at_path_input() {
    return new InputNode(
      {
        get phone_number_details() {
          return new InputNodeField(new ArrayNode(schema.String, true), true);
        },
      },
      { name: 'users_delete_at_path_input' }
    );
  },
  get users_delete_elem_input() {
    return new InputNode(
      {
        get phone_number_details() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'users_delete_elem_input' }
    );
  },
  get users_delete_key_input() {
    return new InputNode(
      {
        get phone_number_details() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'users_delete_key_input' }
    );
  },
  get users_inc_input() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get trust_index() {
          return new InputNodeField(schema.float8, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.Int, true);
        },
      },
      { name: 'users_inc_input' }
    );
  },
  get users_insert_input() {
    return new InputNode(
      {
        get allow_marketing() {
          return new InputNodeField(schema.Boolean, true);
        },
        get avatar_thumb_url() {
          return new InputNodeField(schema.String, true);
        },
        get avatar_url() {
          return new InputNodeField(schema.String, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get bad_actors_associated_users() {
          return new InputNodeField(
            schema.bad_actors_associated_users_arr_rel_insert_input,
            true
          );
        },
        get bad_actors_users() {
          return new InputNodeField(
            schema.bad_actors_users_arr_rel_insert_input,
            true
          );
        },
        get bio() {
          return new InputNodeField(schema.String, true);
        },
        get birthdate() {
          return new InputNodeField(schema.date, true);
        },
        get borrower_type() {
          return new InputNodeField(schema.String, true);
        },
        get borrower_type_notes() {
          return new InputNodeField(schema.String, true);
        },
        get charge_account_records() {
          return new InputNodeField(
            schema.charge_account_records_arr_rel_insert_input,
            true
          );
        },
        get charge_accounts() {
          return new InputNodeField(
            schema.charge_accounts_arr_rel_insert_input,
            true
          );
        },
        get charges() {
          return new InputNodeField(schema.charges_arr_rel_insert_input, true);
        },
        get checkr_candidate_id() {
          return new InputNodeField(schema.String, true);
        },
        get credit_transactions() {
          return new InputNodeField(
            schema.credit_transactions_arr_rel_insert_input,
            true
          );
        },
        get daily_statistics() {
          return new InputNodeField(
            schema.daily_statistics_arr_rel_insert_input,
            true
          );
        },
        get default_location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get device_token() {
          return new InputNodeField(schema.String, true);
        },
        get device_type() {
          return new InputNodeField(schema.String, true);
        },
        get email() {
          return new InputNodeField(schema.String, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get fluidLedgersByCreditUserId() {
          return new InputNodeField(
            schema.fluid_ledger_arr_rel_insert_input,
            true
          );
        },
        get fluidLedgersByDebitUserId() {
          return new InputNodeField(
            schema.fluid_ledger_arr_rel_insert_input,
            true
          );
        },
        get fluidTransactionsByVendorId() {
          return new InputNodeField(
            schema.fluid_transactions_arr_rel_insert_input,
            true
          );
        },
        get fluid_ledgers() {
          return new InputNodeField(
            schema.fluid_ledger_arr_rel_insert_input,
            true
          );
        },
        get fluid_transactions() {
          return new InputNodeField(
            schema.fluid_transactions_arr_rel_insert_input,
            true
          );
        },
        get founder() {
          return new InputNodeField(schema.Boolean, true);
        },
        get general_charges() {
          return new InputNodeField(
            schema.general_charges_arr_rel_insert_input,
            true
          );
        },
        get general_transfers() {
          return new InputNodeField(
            schema.general_transfers_arr_rel_insert_input,
            true
          );
        },
        get home_location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get identifications() {
          return new InputNodeField(
            schema.identifications_arr_rel_insert_input,
            true
          );
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get item_reviews() {
          return new InputNodeField(
            schema.item_reviews_arr_rel_insert_input,
            true
          );
        },
        get item_stakeholders() {
          return new InputNodeField(
            schema.item_stakeholders_arr_rel_insert_input,
            true
          );
        },
        get items() {
          return new InputNodeField(schema.items_arr_rel_insert_input, true);
        },
        get itemsByFvipId() {
          return new InputNodeField(schema.items_arr_rel_insert_input, true);
        },
        get itemsByMaintenanceManagerId() {
          return new InputNodeField(schema.items_arr_rel_insert_input, true);
        },
        get itemsByUserId() {
          return new InputNodeField(schema.items_arr_rel_insert_input, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get lender_payout_reports_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get lender_reports_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get location() {
          return new InputNodeField(
            schema.locations_obj_rel_insert_input,
            true
          );
        },
        get locationByHomeLocationId() {
          return new InputNodeField(
            schema.locations_obj_rel_insert_input,
            true
          );
        },
        get locations() {
          return new InputNodeField(
            schema.locations_arr_rel_insert_input,
            true
          );
        },
        get market() {
          return new InputNodeField(schema.markets_obj_rel_insert_input, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get messages() {
          return new InputNodeField(schema.messages_arr_rel_insert_input, true);
        },
        get messagesBySenderId() {
          return new InputNodeField(schema.messages_arr_rel_insert_input, true);
        },
        get notifications() {
          return new InputNodeField(
            schema.notifications_arr_rel_insert_input,
            true
          );
        },
        get oauth_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get oauth_provider() {
          return new InputNodeField(schema.String, true);
        },
        get password_hash() {
          return new InputNodeField(schema.String, true);
        },
        get payment_accounts() {
          return new InputNodeField(
            schema.payment_accounts_arr_rel_insert_input,
            true
          );
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get phone_number() {
          return new InputNodeField(schema.String, true);
        },
        get phone_number_details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get phone_number_informations() {
          return new InputNodeField(
            schema.phone_number_information_arr_rel_insert_input,
            true
          );
        },
        get phone_number_verified() {
          return new InputNodeField(schema.Boolean, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get promo_code() {
          return new InputNodeField(
            schema.promo_codes_obj_rel_insert_input,
            true
          );
        },
        get promo_code_uses() {
          return new InputNodeField(
            schema.promo_code_uses_arr_rel_insert_input,
            true
          );
        },
        get referral_codes() {
          return new InputNodeField(
            schema.referral_codes_arr_rel_insert_input,
            true
          );
        },
        get refresh_tokens() {
          return new InputNodeField(
            schema.refresh_tokens_arr_rel_insert_input,
            true
          );
        },
        get reservationReviewsByLenderId() {
          return new InputNodeField(
            schema.reservation_reviews_arr_rel_insert_input,
            true
          );
        },
        get reservationReviewsByReviewerId() {
          return new InputNodeField(
            schema.reservation_reviews_arr_rel_insert_input,
            true
          );
        },
        get reservationReviewsBySubjectId() {
          return new InputNodeField(
            schema.reservation_reviews_arr_rel_insert_input,
            true
          );
        },
        get reservation_reviews() {
          return new InputNodeField(
            schema.reservation_reviews_arr_rel_insert_input,
            true
          );
        },
        get reservation_stakeholders() {
          return new InputNodeField(
            schema.reservation_stakeholders_arr_rel_insert_input,
            true
          );
        },
        get reservations() {
          return new InputNodeField(
            schema.reservations_arr_rel_insert_input,
            true
          );
        },
        get reservationsByRenterId() {
          return new InputNodeField(
            schema.reservations_arr_rel_insert_input,
            true
          );
        },
        get role() {
          return new InputNodeField(schema.String, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get search_vector() {
          return new InputNodeField(schema.tsvector, true);
        },
        get suspended_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get suspension_records() {
          return new InputNodeField(
            schema.suspension_records_arr_rel_insert_input,
            true
          );
        },
        get telematic_records() {
          return new InputNodeField(
            schema.telematic_records_arr_rel_insert_input,
            true
          );
        },
        get telematic_use_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get transfers() {
          return new InputNodeField(
            schema.transfers_arr_rel_insert_input,
            true
          );
        },
        get transfers_v2s() {
          return new InputNodeField(
            schema.transfers_v2_arr_rel_insert_input,
            true
          );
        },
        get trust_index() {
          return new InputNodeField(schema.float8, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get upvotes() {
          return new InputNodeField(schema.upvotes_arr_rel_insert_input, true);
        },
        get userBlocksByBlockingUserId() {
          return new InputNodeField(
            schema.user_blocks_arr_rel_insert_input,
            true
          );
        },
        get userReviewsBySubjectId() {
          return new InputNodeField(
            schema.user_reviews_arr_rel_insert_input,
            true
          );
        },
        get user_blocks() {
          return new InputNodeField(
            schema.user_blocks_arr_rel_insert_input,
            true
          );
        },
        get user_devices() {
          return new InputNodeField(
            schema.user_devices_arr_rel_insert_input,
            true
          );
        },
        get user_images() {
          return new InputNodeField(
            schema.user_images_arr_rel_insert_input,
            true
          );
        },
        get user_lists() {
          return new InputNodeField(
            schema.user_lists_arr_rel_insert_input,
            true
          );
        },
        get user_metadata() {
          return new InputNodeField(
            schema.user_metadata_arr_rel_insert_input,
            true
          );
        },
        get user_permissions() {
          return new InputNodeField(
            schema.user_permissions_arr_rel_insert_input,
            true
          );
        },
        get user_reviews() {
          return new InputNodeField(
            schema.user_reviews_arr_rel_insert_input,
            true
          );
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.Int, true);
        },
        get version() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'users_insert_input' }
    );
  },
  get users_max_fields() {
    return new ObjectNode(
      {
        get avatar_thumb_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get avatar_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get bio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get birthdate() {
          return new FieldNode(schema.date, undefined, true);
        },
        get borrower_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get borrower_type_notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get checkr_candidate_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get device_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get email() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get oauth_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oauth_provider() {
          return new FieldNode(schema.String, undefined, true);
        },
        get password_hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get phone_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get role() {
          return new FieldNode(schema.String, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get suspended_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get version() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'users_max_fields',
        extension: ((extensions as any) || {}).users_max_fields,
      }
    );
  },
  get users_max_order_by() {
    return new InputNode(
      {
        get avatar_thumb_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get avatar_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get bio() {
          return new InputNodeField(schema.order_by, true);
        },
        get birthdate() {
          return new InputNodeField(schema.order_by, true);
        },
        get borrower_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get borrower_type_notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get checkr_candidate_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get email() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oauth_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get oauth_provider() {
          return new InputNodeField(schema.order_by, true);
        },
        get password_hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get role() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get suspended_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
        get version() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_max_order_by' }
    );
  },
  get users_min_fields() {
    return new ObjectNode(
      {
        get avatar_thumb_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get avatar_url() {
          return new FieldNode(schema.String, undefined, true);
        },
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get bio() {
          return new FieldNode(schema.String, undefined, true);
        },
        get birthdate() {
          return new FieldNode(schema.date, undefined, true);
        },
        get borrower_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get borrower_type_notes() {
          return new FieldNode(schema.String, undefined, true);
        },
        get checkr_candidate_id() {
          return new FieldNode(schema.String, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get deleted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get device_token() {
          return new FieldNode(schema.String, undefined, true);
        },
        get device_type() {
          return new FieldNode(schema.String, undefined, true);
        },
        get email() {
          return new FieldNode(schema.String, undefined, true);
        },
        get first_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get last_name() {
          return new FieldNode(schema.String, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get oauth_identifier() {
          return new FieldNode(schema.String, undefined, true);
        },
        get oauth_provider() {
          return new FieldNode(schema.String, undefined, true);
        },
        get password_hash() {
          return new FieldNode(schema.String, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get phone_number() {
          return new FieldNode(schema.String, undefined, true);
        },
        get role() {
          return new FieldNode(schema.String, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get suspended_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get version() {
          return new FieldNode(schema.String, undefined, true);
        },
      },
      {
        name: 'users_min_fields',
        extension: ((extensions as any) || {}).users_min_fields,
      }
    );
  },
  get users_min_order_by() {
    return new InputNode(
      {
        get avatar_thumb_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get avatar_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get bio() {
          return new InputNodeField(schema.order_by, true);
        },
        get birthdate() {
          return new InputNodeField(schema.order_by, true);
        },
        get borrower_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get borrower_type_notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get checkr_candidate_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get email() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get oauth_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get oauth_provider() {
          return new InputNodeField(schema.order_by, true);
        },
        get password_hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get role() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get suspended_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
        get version() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_min_order_by' }
    );
  },
  get users_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.users, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'users_mutation_response',
        extension: ((extensions as any) || {}).users_mutation_response,
      }
    );
  },
  get users_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(schema.users_insert_input, false);
        },
        get on_conflict() {
          return new InputNodeField(schema.users_on_conflict, true);
        },
      },
      { name: 'users_obj_rel_insert_input' }
    );
  },
  get users_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(schema.users_constraint, false);
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.users_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(schema.users_bool_exp, true);
        },
      },
      { name: 'users_on_conflict' }
    );
  },
  get users_order_by() {
    return new InputNode(
      {
        get allow_marketing() {
          return new InputNodeField(schema.order_by, true);
        },
        get avatar_thumb_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get avatar_url() {
          return new InputNodeField(schema.order_by, true);
        },
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get bad_actors_associated_users_aggregate() {
          return new InputNodeField(
            schema.bad_actors_associated_users_aggregate_order_by,
            true
          );
        },
        get bad_actors_users_aggregate() {
          return new InputNodeField(
            schema.bad_actors_users_aggregate_order_by,
            true
          );
        },
        get bio() {
          return new InputNodeField(schema.order_by, true);
        },
        get birthdate() {
          return new InputNodeField(schema.order_by, true);
        },
        get borrower_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get borrower_type_notes() {
          return new InputNodeField(schema.order_by, true);
        },
        get charge_account_records_aggregate() {
          return new InputNodeField(
            schema.charge_account_records_aggregate_order_by,
            true
          );
        },
        get charge_accounts_aggregate() {
          return new InputNodeField(
            schema.charge_accounts_aggregate_order_by,
            true
          );
        },
        get charges_aggregate() {
          return new InputNodeField(schema.charges_aggregate_order_by, true);
        },
        get checkr_candidate_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get credit_transactions_aggregate() {
          return new InputNodeField(
            schema.credit_transactions_aggregate_order_by,
            true
          );
        },
        get daily_statistics_aggregate() {
          return new InputNodeField(
            schema.daily_statistics_aggregate_order_by,
            true
          );
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_token() {
          return new InputNodeField(schema.order_by, true);
        },
        get device_type() {
          return new InputNodeField(schema.order_by, true);
        },
        get email() {
          return new InputNodeField(schema.order_by, true);
        },
        get first_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get fluidLedgersByCreditUserId_aggregate() {
          return new InputNodeField(
            schema.fluid_ledger_aggregate_order_by,
            true
          );
        },
        get fluidLedgersByDebitUserId_aggregate() {
          return new InputNodeField(
            schema.fluid_ledger_aggregate_order_by,
            true
          );
        },
        get fluidTransactionsByVendorId_aggregate() {
          return new InputNodeField(
            schema.fluid_transactions_aggregate_order_by,
            true
          );
        },
        get fluid_ledgers_aggregate() {
          return new InputNodeField(
            schema.fluid_ledger_aggregate_order_by,
            true
          );
        },
        get fluid_transactions_aggregate() {
          return new InputNodeField(
            schema.fluid_transactions_aggregate_order_by,
            true
          );
        },
        get founder() {
          return new InputNodeField(schema.order_by, true);
        },
        get general_charges_aggregate() {
          return new InputNodeField(
            schema.general_charges_aggregate_order_by,
            true
          );
        },
        get general_transfers_aggregate() {
          return new InputNodeField(
            schema.general_transfers_aggregate_order_by,
            true
          );
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get identifications_aggregate() {
          return new InputNodeField(
            schema.identifications_aggregate_order_by,
            true
          );
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get item_reviews_aggregate() {
          return new InputNodeField(
            schema.item_reviews_aggregate_order_by,
            true
          );
        },
        get item_stakeholders_aggregate() {
          return new InputNodeField(
            schema.item_stakeholders_aggregate_order_by,
            true
          );
        },
        get itemsByFvipId_aggregate() {
          return new InputNodeField(schema.items_aggregate_order_by, true);
        },
        get itemsByMaintenanceManagerId_aggregate() {
          return new InputNodeField(schema.items_aggregate_order_by, true);
        },
        get itemsByUserId_aggregate() {
          return new InputNodeField(schema.items_aggregate_order_by, true);
        },
        get items_aggregate() {
          return new InputNodeField(schema.items_aggregate_order_by, true);
        },
        get last_name() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_payout_reports_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get lender_reports_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get location() {
          return new InputNodeField(schema.locations_order_by, true);
        },
        get locationByHomeLocationId() {
          return new InputNodeField(schema.locations_order_by, true);
        },
        get locations_aggregate() {
          return new InputNodeField(schema.locations_aggregate_order_by, true);
        },
        get market() {
          return new InputNodeField(schema.markets_order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get messagesBySenderId_aggregate() {
          return new InputNodeField(schema.messages_aggregate_order_by, true);
        },
        get messages_aggregate() {
          return new InputNodeField(schema.messages_aggregate_order_by, true);
        },
        get notifications_aggregate() {
          return new InputNodeField(
            schema.notifications_aggregate_order_by,
            true
          );
        },
        get oauth_identifier() {
          return new InputNodeField(schema.order_by, true);
        },
        get oauth_provider() {
          return new InputNodeField(schema.order_by, true);
        },
        get password_hash() {
          return new InputNodeField(schema.order_by, true);
        },
        get payment_accounts_aggregate() {
          return new InputNodeField(
            schema.payment_accounts_aggregate_order_by,
            true
          );
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number_details() {
          return new InputNodeField(schema.order_by, true);
        },
        get phone_number_informations_aggregate() {
          return new InputNodeField(
            schema.phone_number_information_aggregate_order_by,
            true
          );
        },
        get phone_number_verified() {
          return new InputNodeField(schema.order_by, true);
        },
        get pictures() {
          return new InputNodeField(schema.order_by, true);
        },
        get promo_code() {
          return new InputNodeField(schema.promo_codes_order_by, true);
        },
        get promo_code_uses_aggregate() {
          return new InputNodeField(
            schema.promo_code_uses_aggregate_order_by,
            true
          );
        },
        get referral_codes_aggregate() {
          return new InputNodeField(
            schema.referral_codes_aggregate_order_by,
            true
          );
        },
        get refresh_tokens_aggregate() {
          return new InputNodeField(
            schema.refresh_tokens_aggregate_order_by,
            true
          );
        },
        get reservationReviewsByLenderId_aggregate() {
          return new InputNodeField(
            schema.reservation_reviews_aggregate_order_by,
            true
          );
        },
        get reservationReviewsByReviewerId_aggregate() {
          return new InputNodeField(
            schema.reservation_reviews_aggregate_order_by,
            true
          );
        },
        get reservationReviewsBySubjectId_aggregate() {
          return new InputNodeField(
            schema.reservation_reviews_aggregate_order_by,
            true
          );
        },
        get reservation_reviews_aggregate() {
          return new InputNodeField(
            schema.reservation_reviews_aggregate_order_by,
            true
          );
        },
        get reservation_stakeholders_aggregate() {
          return new InputNodeField(
            schema.reservation_stakeholders_aggregate_order_by,
            true
          );
        },
        get reservationsByRenterId_aggregate() {
          return new InputNodeField(
            schema.reservations_aggregate_order_by,
            true
          );
        },
        get reservations_aggregate() {
          return new InputNodeField(
            schema.reservations_aggregate_order_by,
            true
          );
        },
        get role() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get search_vector() {
          return new InputNodeField(schema.order_by, true);
        },
        get suspended_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get suspension_records_aggregate() {
          return new InputNodeField(
            schema.suspension_records_aggregate_order_by,
            true
          );
        },
        get telematic_records_aggregate() {
          return new InputNodeField(
            schema.telematic_records_aggregate_order_by,
            true
          );
        },
        get telematic_use_enabled() {
          return new InputNodeField(schema.order_by, true);
        },
        get transfers_aggregate() {
          return new InputNodeField(schema.transfers_aggregate_order_by, true);
        },
        get transfers_v2s_aggregate() {
          return new InputNodeField(
            schema.transfers_v2_aggregate_order_by,
            true
          );
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get upvotes_aggregate() {
          return new InputNodeField(schema.upvotes_aggregate_order_by, true);
        },
        get userBlocksByBlockingUserId_aggregate() {
          return new InputNodeField(
            schema.user_blocks_aggregate_order_by,
            true
          );
        },
        get userReviewsBySubjectId_aggregate() {
          return new InputNodeField(
            schema.user_reviews_aggregate_order_by,
            true
          );
        },
        get user_blocks_aggregate() {
          return new InputNodeField(
            schema.user_blocks_aggregate_order_by,
            true
          );
        },
        get user_devices_aggregate() {
          return new InputNodeField(
            schema.user_devices_aggregate_order_by,
            true
          );
        },
        get user_images_aggregate() {
          return new InputNodeField(
            schema.user_images_aggregate_order_by,
            true
          );
        },
        get user_lists_aggregate() {
          return new InputNodeField(schema.user_lists_aggregate_order_by, true);
        },
        get user_metadata_aggregate() {
          return new InputNodeField(
            schema.user_metadata_aggregate_order_by,
            true
          );
        },
        get user_permissions_aggregate() {
          return new InputNodeField(
            schema.user_permissions_aggregate_order_by,
            true
          );
        },
        get user_reviews_aggregate() {
          return new InputNodeField(
            schema.user_reviews_aggregate_order_by,
            true
          );
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
        get version() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_order_by' }
    );
  },
  get users_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'users_pk_columns_input' }
    );
  },
  get users_prepend_input() {
    return new InputNode(
      {
        get phone_number_details() {
          return new InputNodeField(schema.jsonb, true);
        },
      },
      { name: 'users_prepend_input' }
    );
  },
  get users_select_column() {
    return new EnumNode({ name: 'users_select_column' });
  },
  get users_set_input() {
    return new InputNode(
      {
        get allow_marketing() {
          return new InputNodeField(schema.Boolean, true);
        },
        get avatar_thumb_url() {
          return new InputNodeField(schema.String, true);
        },
        get avatar_url() {
          return new InputNodeField(schema.String, true);
        },
        get average_rating() {
          return new InputNodeField(schema.numeric, true);
        },
        get bio() {
          return new InputNodeField(schema.String, true);
        },
        get birthdate() {
          return new InputNodeField(schema.date, true);
        },
        get borrower_type() {
          return new InputNodeField(schema.String, true);
        },
        get borrower_type_notes() {
          return new InputNodeField(schema.String, true);
        },
        get checkr_candidate_id() {
          return new InputNodeField(schema.String, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get deleted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get device_token() {
          return new InputNodeField(schema.String, true);
        },
        get device_type() {
          return new InputNodeField(schema.String, true);
        },
        get email() {
          return new InputNodeField(schema.String, true);
        },
        get first_name() {
          return new InputNodeField(schema.String, true);
        },
        get founder() {
          return new InputNodeField(schema.Boolean, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get last_name() {
          return new InputNodeField(schema.String, true);
        },
        get lender_payout_reports_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get lender_reports_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get market_id() {
          return new InputNodeField(schema.bigint, true);
        },
        get oauth_identifier() {
          return new InputNodeField(schema.String, true);
        },
        get oauth_provider() {
          return new InputNodeField(schema.String, true);
        },
        get password_hash() {
          return new InputNodeField(schema.String, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.float8, true);
        },
        get phone_number() {
          return new InputNodeField(schema.String, true);
        },
        get phone_number_details() {
          return new InputNodeField(schema.jsonb, true);
        },
        get phone_number_verified() {
          return new InputNodeField(schema.Boolean, true);
        },
        get pictures() {
          return new InputNodeField(schema._jsonb, true);
        },
        get role() {
          return new InputNodeField(schema.String, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.Int, true);
        },
        get search_vector() {
          return new InputNodeField(schema.tsvector, true);
        },
        get suspended_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get telematic_use_enabled() {
          return new InputNodeField(schema.Boolean, true);
        },
        get trust_index() {
          return new InputNodeField(schema.float8, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.Int, true);
        },
        get version() {
          return new InputNodeField(schema.String, true);
        },
      },
      { name: 'users_set_input' }
    );
  },
  get users_stddev_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_stddev_fields',
        extension: ((extensions as any) || {}).users_stddev_fields,
      }
    );
  },
  get users_stddev_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_stddev_order_by' }
    );
  },
  get users_stddev_pop_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_stddev_pop_fields',
        extension: ((extensions as any) || {}).users_stddev_pop_fields,
      }
    );
  },
  get users_stddev_pop_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_stddev_pop_order_by' }
    );
  },
  get users_stddev_samp_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_stddev_samp_fields',
        extension: ((extensions as any) || {}).users_stddev_samp_fields,
      }
    );
  },
  get users_stddev_samp_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_stddev_samp_order_by' }
    );
  },
  get users_sum_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.numeric, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.bigint, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Int, undefined, true);
        },
      },
      {
        name: 'users_sum_fields',
        extension: ((extensions as any) || {}).users_sum_fields,
      }
    );
  },
  get users_sum_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_sum_order_by' }
    );
  },
  get users_update_column() {
    return new EnumNode({ name: 'users_update_column' });
  },
  get users_var_pop_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_var_pop_fields',
        extension: ((extensions as any) || {}).users_var_pop_fields,
      }
    );
  },
  get users_var_pop_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_var_pop_order_by' }
    );
  },
  get users_var_samp_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_var_samp_fields',
        extension: ((extensions as any) || {}).users_var_samp_fields,
      }
    );
  },
  get users_var_samp_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_var_samp_order_by' }
    );
  },
  get users_variance_fields() {
    return new ObjectNode(
      {
        get average_rating() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get default_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get home_location_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get market_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get payout_percentage() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get saved_promo_code_id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get trust_index() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get vehicle_borrow_limit() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'users_variance_fields',
        extension: ((extensions as any) || {}).users_variance_fields,
      }
    );
  },
  get users_variance_order_by() {
    return new InputNode(
      {
        get average_rating() {
          return new InputNodeField(schema.order_by, true);
        },
        get default_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get home_location_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get market_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get payout_percentage() {
          return new InputNodeField(schema.order_by, true);
        },
        get saved_promo_code_id() {
          return new InputNodeField(schema.order_by, true);
        },
        get trust_index() {
          return new InputNodeField(schema.order_by, true);
        },
        get vehicle_borrow_limit() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'users_variance_order_by' }
    );
  },
  get uuid() {
    return new ScalarNode({
      name: 'uuid',
      extension: ((extensions as any) || {}).uuid,
    });
  },
  get uuid_comparison_exp() {
    return new InputNode(
      {
        get _eq() {
          return new InputNodeField(schema.uuid, true);
        },
        get _gt() {
          return new InputNodeField(schema.uuid, true);
        },
        get _gte() {
          return new InputNodeField(schema.uuid, true);
        },
        get _in() {
          return new InputNodeField(new ArrayNode(schema.uuid, true), true);
        },
        get _is_null() {
          return new InputNodeField(schema.Boolean, true);
        },
        get _lt() {
          return new InputNodeField(schema.uuid, true);
        },
        get _lte() {
          return new InputNodeField(schema.uuid, true);
        },
        get _neq() {
          return new InputNodeField(schema.uuid, true);
        },
        get _nin() {
          return new InputNodeField(new ArrayNode(schema.uuid, true), true);
        },
      },
      { name: 'uuid_comparison_exp' }
    );
  },
  get vehicle_insurance_rates() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get hourly_rate() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
        get insurance() {
          return new FieldNode(schema.String, undefined, false);
        },
        get total_percent() {
          return new FieldNode(schema.float8, undefined, false);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, false);
        },
      },
      {
        name: 'vehicle_insurance_rates',
        extension: ((extensions as any) || {}).vehicle_insurance_rates,
      }
    );
  },
  get vehicle_insurance_rates_aggregate() {
    return new ObjectNode(
      {
        get aggregate() {
          return new FieldNode(
            schema.vehicle_insurance_rates_aggregate_fields,
            undefined,
            true
          );
        },
        get nodes() {
          return new FieldNode(
            new ArrayNode(schema.vehicle_insurance_rates, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'vehicle_insurance_rates_aggregate',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_aggregate,
      }
    );
  },
  get vehicle_insurance_rates_aggregate_fields() {
    return new ObjectNode(
      {
        get avg() {
          return new FieldNode(
            schema.vehicle_insurance_rates_avg_fields,
            undefined,
            true
          );
        },
        get count() {
          return new FieldNode(
            schema.Int,
            new Arguments({
              get columns() {
                return new ArgumentsField(
                  new ArrayNode(
                    schema.vehicle_insurance_rates_select_column,
                    true
                  ),
                  true
                );
              },
              get distinct() {
                return new ArgumentsField(schema.Boolean, true);
              },
            }),
            true
          );
        },
        get max() {
          return new FieldNode(
            schema.vehicle_insurance_rates_max_fields,
            undefined,
            true
          );
        },
        get min() {
          return new FieldNode(
            schema.vehicle_insurance_rates_min_fields,
            undefined,
            true
          );
        },
        get stddev() {
          return new FieldNode(
            schema.vehicle_insurance_rates_stddev_fields,
            undefined,
            true
          );
        },
        get stddev_pop() {
          return new FieldNode(
            schema.vehicle_insurance_rates_stddev_pop_fields,
            undefined,
            true
          );
        },
        get stddev_samp() {
          return new FieldNode(
            schema.vehicle_insurance_rates_stddev_samp_fields,
            undefined,
            true
          );
        },
        get sum() {
          return new FieldNode(
            schema.vehicle_insurance_rates_sum_fields,
            undefined,
            true
          );
        },
        get var_pop() {
          return new FieldNode(
            schema.vehicle_insurance_rates_var_pop_fields,
            undefined,
            true
          );
        },
        get var_samp() {
          return new FieldNode(
            schema.vehicle_insurance_rates_var_samp_fields,
            undefined,
            true
          );
        },
        get variance() {
          return new FieldNode(
            schema.vehicle_insurance_rates_variance_fields,
            undefined,
            true
          );
        },
      },
      {
        name: 'vehicle_insurance_rates_aggregate_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_aggregate_fields,
      }
    );
  },
  get vehicle_insurance_rates_aggregate_order_by() {
    return new InputNode(
      {
        get avg() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_avg_order_by,
            true
          );
        },
        get count() {
          return new InputNodeField(schema.order_by, true);
        },
        get max() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_max_order_by,
            true
          );
        },
        get min() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_min_order_by,
            true
          );
        },
        get stddev() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_stddev_order_by,
            true
          );
        },
        get stddev_pop() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_stddev_pop_order_by,
            true
          );
        },
        get stddev_samp() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_stddev_samp_order_by,
            true
          );
        },
        get sum() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_sum_order_by,
            true
          );
        },
        get var_pop() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_var_pop_order_by,
            true
          );
        },
        get var_samp() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_var_samp_order_by,
            true
          );
        },
        get variance() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_variance_order_by,
            true
          );
        },
      },
      { name: 'vehicle_insurance_rates_aggregate_order_by' }
    );
  },
  get vehicle_insurance_rates_arr_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            new ArrayNode(schema.vehicle_insurance_rates_insert_input, false),
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_on_conflict,
            true
          );
        },
      },
      { name: 'vehicle_insurance_rates_arr_rel_insert_input' }
    );
  },
  get vehicle_insurance_rates_avg_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_avg_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_avg_fields,
      }
    );
  },
  get vehicle_insurance_rates_avg_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_avg_order_by' }
    );
  },
  get vehicle_insurance_rates_bool_exp() {
    return new InputNode(
      {
        get _and() {
          return new InputNodeField(
            new ArrayNode(schema.vehicle_insurance_rates_bool_exp, true),
            true
          );
        },
        get _not() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_bool_exp,
            true
          );
        },
        get _or() {
          return new InputNodeField(
            new ArrayNode(schema.vehicle_insurance_rates_bool_exp, true),
            true
          );
        },
        get daily_rate() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get id() {
          return new InputNodeField(schema.Int_comparison_exp, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
        get insurance() {
          return new InputNodeField(schema.String_comparison_exp, true);
        },
        get total_percent() {
          return new InputNodeField(schema.float8_comparison_exp, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp_comparison_exp, true);
        },
      },
      { name: 'vehicle_insurance_rates_bool_exp' }
    );
  },
  get vehicle_insurance_rates_constraint() {
    return new EnumNode({ name: 'vehicle_insurance_rates_constraint' });
  },
  get vehicle_insurance_rates_inc_input() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.Int, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get total_percent() {
          return new InputNodeField(schema.float8, true);
        },
      },
      { name: 'vehicle_insurance_rates_inc_input' }
    );
  },
  get vehicle_insurance_rates_insert_input() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.Int, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get insurance() {
          return new InputNodeField(schema.String, true);
        },
        get total_percent() {
          return new InputNodeField(schema.float8, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'vehicle_insurance_rates_insert_input' }
    );
  },
  get vehicle_insurance_rates_max_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get insurance() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_max_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_max_fields,
      }
    );
  },
  get vehicle_insurance_rates_max_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get insurance() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_max_order_by' }
    );
  },
  get vehicle_insurance_rates_min_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get inserted_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
        get insurance() {
          return new FieldNode(schema.String, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.float8, undefined, true);
        },
        get updated_at() {
          return new FieldNode(schema.timestamp, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_min_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_min_fields,
      }
    );
  },
  get vehicle_insurance_rates_min_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get insurance() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_min_order_by' }
    );
  },
  get vehicle_insurance_rates_mutation_response() {
    return new ObjectNode(
      {
        get affected_rows() {
          return new FieldNode(schema.Int, undefined, false);
        },
        get returning() {
          return new FieldNode(
            new ArrayNode(schema.vehicle_insurance_rates, false),
            undefined,
            false
          );
        },
      },
      {
        name: 'vehicle_insurance_rates_mutation_response',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_mutation_response,
      }
    );
  },
  get vehicle_insurance_rates_obj_rel_insert_input() {
    return new InputNode(
      {
        get data() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_insert_input,
            false
          );
        },
        get on_conflict() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_on_conflict,
            true
          );
        },
      },
      { name: 'vehicle_insurance_rates_obj_rel_insert_input' }
    );
  },
  get vehicle_insurance_rates_on_conflict() {
    return new InputNode(
      {
        get constraint() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_constraint,
            false
          );
        },
        get update_columns() {
          return new InputNodeField(
            new ArrayNode(schema.vehicle_insurance_rates_update_column, false),
            false
          );
        },
        get where() {
          return new InputNodeField(
            schema.vehicle_insurance_rates_bool_exp,
            true
          );
        },
      },
      { name: 'vehicle_insurance_rates_on_conflict' }
    );
  },
  get vehicle_insurance_rates_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.order_by, true);
        },
        get insurance() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
        get updated_at() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_order_by' }
    );
  },
  get vehicle_insurance_rates_pk_columns_input() {
    return new InputNode(
      {
        get id() {
          return new InputNodeField(schema.Int, false);
        },
      },
      { name: 'vehicle_insurance_rates_pk_columns_input' }
    );
  },
  get vehicle_insurance_rates_select_column() {
    return new EnumNode({ name: 'vehicle_insurance_rates_select_column' });
  },
  get vehicle_insurance_rates_set_input() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.Int, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.Int, true);
        },
        get id() {
          return new InputNodeField(schema.Int, true);
        },
        get inserted_at() {
          return new InputNodeField(schema.timestamp, true);
        },
        get insurance() {
          return new InputNodeField(schema.String, true);
        },
        get total_percent() {
          return new InputNodeField(schema.float8, true);
        },
        get updated_at() {
          return new InputNodeField(schema.timestamp, true);
        },
      },
      { name: 'vehicle_insurance_rates_set_input' }
    );
  },
  get vehicle_insurance_rates_stddev_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_stddev_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_stddev_fields,
      }
    );
  },
  get vehicle_insurance_rates_stddev_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_stddev_order_by' }
    );
  },
  get vehicle_insurance_rates_stddev_pop_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_stddev_pop_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_stddev_pop_fields,
      }
    );
  },
  get vehicle_insurance_rates_stddev_pop_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_stddev_pop_order_by' }
    );
  },
  get vehicle_insurance_rates_stddev_samp_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_stddev_samp_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_stddev_samp_fields,
      }
    );
  },
  get vehicle_insurance_rates_stddev_samp_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_stddev_samp_order_by' }
    );
  },
  get vehicle_insurance_rates_sum_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Int, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.float8, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_sum_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_sum_fields,
      }
    );
  },
  get vehicle_insurance_rates_sum_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_sum_order_by' }
    );
  },
  get vehicle_insurance_rates_update_column() {
    return new EnumNode({ name: 'vehicle_insurance_rates_update_column' });
  },
  get vehicle_insurance_rates_var_pop_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_var_pop_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_var_pop_fields,
      }
    );
  },
  get vehicle_insurance_rates_var_pop_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_var_pop_order_by' }
    );
  },
  get vehicle_insurance_rates_var_samp_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_var_samp_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_var_samp_fields,
      }
    );
  },
  get vehicle_insurance_rates_var_samp_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_var_samp_order_by' }
    );
  },
  get vehicle_insurance_rates_variance_fields() {
    return new ObjectNode(
      {
        get daily_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get hourly_rate() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get id() {
          return new FieldNode(schema.Float, undefined, true);
        },
        get total_percent() {
          return new FieldNode(schema.Float, undefined, true);
        },
      },
      {
        name: 'vehicle_insurance_rates_variance_fields',
        extension: ((extensions as any) || {})
          .vehicle_insurance_rates_variance_fields,
      }
    );
  },
  get vehicle_insurance_rates_variance_order_by() {
    return new InputNode(
      {
        get daily_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get hourly_rate() {
          return new InputNodeField(schema.order_by, true);
        },
        get id() {
          return new InputNodeField(schema.order_by, true);
        },
        get total_percent() {
          return new InputNodeField(schema.order_by, true);
        },
      },
      { name: 'vehicle_insurance_rates_variance_order_by' }
    );
  },
};

lazyGetters(schema);

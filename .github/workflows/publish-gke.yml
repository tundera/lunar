# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE
on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GITHUB_SHA: ${{ swapi.sha }}
  GKE_ZONE: us-west1-a
  GKE_CLUSTER: tundera
  IMAGE: tundera
  REGISTRY_HOSTNAME: us.gcr.io
  DEPLOYMENT_NAME: tundera

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/swapi-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_key: ${{ secrets.GKE_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE-base":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-base:$GITHUB_SHA

        # Build the nextjs image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE-nextjs":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

        # Push the website image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-nextjs:$GITHUB_SHA

        # Build the nextjs image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE-website":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

        # Push the website image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE-website:$GITHUB_SHA
